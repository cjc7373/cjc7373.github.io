<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coherence's Blog</title><link>https://blog.coherence.codes/</link><description>Recent content on Coherence's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Sun, 16 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Travis CI 自动部署 Hexo 博客</title><link>https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/</link><pubDate>Sun, 21 Apr 2019 20:16:56 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/ -&lt;p>&lt;img src="./bg2017121901.png" alt="bg2017121901">&lt;/p>
&lt;h2 id="缘由">缘由&lt;/h2>
&lt;p>其实我想用 CI 来自动化部署博客很久了，只是因为懒，CI 又有很多新知识，担心自己的知识储备不够，于是一直咕咕咕。&lt;/p>
&lt;p>前段时间装了 Arch 之后，我很想在两个系统之间同步写作进度，但是 Windows 的休眠和快速启动会导致在 Arch 下我只能以只读方式挂载 Windows 分区（我日常关机用休眠，所以拒绝关休眠）。原来设想的&lt;code>ln -s&lt;/code>大法行不通了。&lt;/p>
&lt;p>于是我想到了 CI。仔细一想其实也不复杂，无非是&lt;code>git push&lt;/code>， &lt;code>git pull&lt;/code>两下罢了。那么，Let&amp;rsquo;s do it!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="需求">需求&lt;/h2>
&lt;p>我原来设想是博客同时部署在 Github Pages 和我的 VPS 上，而由于某些不可抗力~~（懒）~~后者并没有实现。所以需求就变得十分简单，commit 博客内容，CI 自动构建然后部署。&lt;/p>
&lt;ul>
&lt;li>我更新博客之后，commit 然后 push 至 Github repo&lt;/li>
&lt;li>CI 自动构建博客&lt;/li>
&lt;li>CI 将构建完成的静态文件 push 至 Github repo&lt;/li>
&lt;/ul>
&lt;p>我原先使用的是&lt;code>hexo-deployer-git&lt;/code>插件，通过&lt;code>hexo g -d&lt;/code>部署，现在这个插件可以丢弃了。同时我的 Hexo 的很多配置都被我瞎改了，同时还有许多奇奇怪怪的模块可能需要清理（不如重新来一遍（大雾）），这些先不谈。&lt;/p>
&lt;h2 id="配置-github-repo">配置 Github Repo&lt;/h2>
&lt;p>在这个 Repo 中需要两个分支：&lt;/p>
&lt;ul>
&lt;li>master 用于存放构建完成的静态文件&lt;/li>
&lt;li>source 用于存放 Hexo 生成的博客源文件&lt;/li>
&lt;/ul>
&lt;p>对 Hexo 文件夹的操作如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>git init
git remote add origin git@github.com:cjc7373/cjc7373.github.io.git
git checkout -b source
git add .
git commit -m &amp;#34;To use CI to automated deploy&amp;#34;
git push origin source:source
&lt;/code>&lt;/pre>&lt;p>本来以为这个仓库会很大（整个文件夹大概 100M），突然发现它自带&lt;code>.gitignore&lt;/code>文件，所以实际大小并没有多少。&lt;/p>
&lt;p>&lt;img src="./1555835090941.png" alt="1555835090941">&lt;/p>
&lt;p>然后在 Github 上将主分支切换为&lt;code>source&lt;/code>分支。&lt;/p>
&lt;h2 id="配置-travis-ci">配置 Travis CI&lt;/h2>
&lt;p>CI 访问仓库需要权限，可选择 Access Token 或者单独的 Deploy key，后者似乎有些麻烦，我选择了前者。当前需求应该只需要 repo 权限，然后在 Travis CI 的 Environment Variables 中加入这个 Token，注意不要勾选 Display value in build log。&lt;/p>
&lt;p>然后就是编写&lt;code>.travis.yml&lt;/code>了。 &lt;del>正当我准备抄大佬们的配置的时候，忽然看到 Travis CI 官方提供了&lt;a href="https://docs.travis-ci.com/user/deployment/pages/">轮子&lt;/a>，那就用吧QAQ（其实也没简单多少）&lt;/del>，然后翻车了。&lt;/p>
&lt;p>&lt;img src="./1555837683039.png" alt="1555837683039">&lt;/p>
&lt;p>看了下文档，我也没搞懂每个字段的意思。所以还是自己来吧。&lt;/p>
&lt;p>为了在 commit 记录中显示更新日期，我把 push 部分单独写成了 sh脚本。&lt;/p>
&lt;p>&lt;code>.travis.yml&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>language: node_js
node_js: stable
# 只监听 source 分支的改动
branches:
only:
- source
# 缓存依赖，节省持续集成时间
cache:
directories:
- node_modules
install:
- npm install
script:
- hexo clean
- hexo g
after_script:
- chmod +x ./deploy.sh # 添加可执行权限
- ./deploy.sh
&lt;/code>&lt;/pre>&lt;p>&lt;code>deploy.sh&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
set -ev
export TZ=&amp;#39;Asia/Shanghai&amp;#39;
git config --global user.name &amp;#34;cjc7373&amp;#34;
git config --global user.email &amp;#34;niuchangcun@163.com&amp;#34;
# 获取以前的 commit 记录
git clone -b master https://github.com/cjc7373/cjc7373.github.io.git .deploy
# 这么移动是为了确保不受之前文件的影响
mv .deploy/.git/ public/
cd public
git checkout master
git add .
git commit -m &amp;#34;Site updated: `date +&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;`&amp;#34;
# 我也不知道 token 怎么用。。抄大佬的代码
git push &amp;#34;https://${token}@github.com/cjc7373/cjc7373.github.io.git&amp;#34; master:master --quiet
&lt;/code>&lt;/pre>&lt;p>一开始忘了给&lt;code>deploy.sh&lt;/code>可执行权限，CI 啥都没报错就退出了。。后来 token 又忘了写。。反正出了好多锅。。&lt;/p>
&lt;p>&lt;img src="./1555840082905.png" alt="1555840082905">&lt;/p>
&lt;p>（看着都是成功其实都是失败。。）&lt;/p>
&lt;p>同时本地配合一下批处理，真正一键发布（滑稽&lt;/p>
&lt;pre tabindex="0">&lt;code>cd C:\Users\niuch\Documents\GitHub\blog\
git add .
git commit
git push
pause
&lt;/code>&lt;/pre>&lt;h2 id="后记">后记&lt;/h2>
&lt;p>历经两个多小时，终于把 CI 弄好了。虽然对 CI 还是一知半解，不过总算开了个头，也基本实现了需求。&lt;/p>
&lt;p>Travis CI 官方的文档很全，但是以我的英文水平看得很吃力（懒得看），中文资料的质量又参差不齐。所以还是要锻炼自己的英语水平啊。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a href="https://docs.travis-ci.com">https://docs.travis-ci.com&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>中国电信 HG2543C1 光猫获取超级管理员密码</title><link>https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/</link><pubDate>Sat, 16 Feb 2019 16:32:47 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/ -&lt;p>寒假回家，欣闻家中宽带升级成了 200M，然而坑爹的是一直以来的桥接模式被改成路由模式。由于想公网访问本地的 NAS，且想看看 IPV6 是否已在我家区域部署，所以想破解光猫获取管理员密码。&lt;/p>
&lt;p>Google 该设备的型号，发现网上并没有相关的教程，可能是型号比较新的缘故。致电中国电信，被告知无法透露管理员密码，派人上门调试则需额外花费。本着自己折腾的原则，遂在某宝购入 CH340G USB转TTL板，准备拆机 TTL 破解光猫。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="0x01-拆机">0x01 拆机&lt;/h2>
&lt;p>拆机后发现 PCB 板上有 TTL 插针，用万用表测得倒数第二根为 GND（接地pin），然后剩余四根随机组合，测得 RX（接收数据pin）和 TX（发送数据pin）。用杜邦线连接 USB转TTL板和 TTL 插针。&lt;/p>
&lt;p>&lt;img src="./IMG_20190219_113847.jpg" alt="IMG_20190219_113847">&lt;/p>
&lt;h2 id="0x02-串口调试">0x02 串口调试&lt;/h2>
&lt;p>电脑安装好 USB转TTL板的驱动，USB端连接上电脑。网上的教程一般使用 SecureCRT， 然而我后来发现 Xshell 也能连接串口，遂用 Xshell 进行调试。&lt;/p>
&lt;p>&lt;img src="./1550548463370.png" alt="1550548463370">&lt;/p>
&lt;p>如图设置参数，port 按照自己的情况设置。&lt;/p>
&lt;p>然后连接。接通电源后等待。大概等待两分钟后，按回车，出现 &lt;code>Login:&lt;/code> 字样，用 &lt;code>root/hg2x0&lt;/code> 登陆。&lt;/p>
&lt;p>用 &lt;code>cat /proc/cpuinfo&lt;/code> 看一下 CPU 信息，居然是 MIPS&amp;hellip;&lt;/p>
&lt;p>&lt;img src="./1550306022384.png" alt="1550306022384">&lt;/p>
&lt;p>超级密码在&lt;code>/flash/cfg/agentconf/factory.conf &lt;/code>文件中。文件前两行即为管理员账户和密码。至此，光猫破解完成。&lt;/p>
&lt;h2 id="0x03-参考资料">0x03 参考资料&lt;/h2>
&lt;p>&lt;a href="https://paper.seebug.org/506/#0x03">如何通过TTL调试光猫&lt;/a>
&lt;a href="https://m2.zhugh.com:26800/po-jie-dian-xin-guang-mao/">破解电信光猫&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>2018年终总结&amp;2019展望</title><link>https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/</link><pubDate>Mon, 11 Feb 2019 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/ -&lt;p>今天是己亥猪年的大年初七，很惭愧到今天我才想起寒假前就想写的年终总结还没有写。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="2018-总结">2018 总结&lt;/h2>
&lt;p>时间及事件依据：印象笔记、Google 相册、我的记忆。&lt;/p>
&lt;p>事件大致以时间顺序排列。&lt;/p>
&lt;ul>
&lt;li>一月初，经历了在西安的第一场雪。&lt;/li>
&lt;li>（时间未知）使用了 Windows 运行来快速启动程序，&lt;del>（感觉上）大大提高了效率&lt;/del>（不（感觉装逼才是真的&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1549962279010.png" alt="1549962279010">&lt;/p>
&lt;ul>
&lt;li>从 1.13 开始寒假训练， 3.24 校赛，3.31 天梯赛，5.17 左右 ACM省赛，7.19 开始暑假多校训练，10.26 徐州区域赛， 11.23 深圳 CCPC 总决赛，整个一年我算是比较积极地参与 ACM-ICPC 竞赛（虽然下半年逐渐开始划水&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1550032126921.png" alt="1550032126921">
（六张照片依次为 CCPC、寒假训练、省赛、校赛、天梯赛、徐州区域赛）&lt;/p>
&lt;ul>
&lt;li>一月末，开始种草轻薄本，并寻求把游戏本卖了，未果。&lt;/li>
&lt;li>从年初开始，用空闲资金进行投资，并开始学习相关知识。一月末我第一次买入了一个基金，入坑。一开始赚了点钱很高兴，后来贸易战开始就亏了。七月初买了一本金融方面的书然而并没有看多少。八月开始跟投某大V的投资计划，九月末把主要账户转移到且慢。回想起一开始什么都不懂就冲着某个行业买基金，现在慢慢有些了解但知识仍然很浅薄。时刻要提醒自己：不要盲从。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1550032359691.png" alt="1550032359691">&lt;/p>
&lt;ul>
&lt;li>定下（并践行）了在美（英）剧中学英语的目标，然后每当我看剧时总是自我安慰同时我也在&lt;del>学习&lt;/del>（并没有）。&lt;/li>
&lt;/ul>
&lt;p>到目前为止看过的剧有（不限于18年）：Friends，Sherlock，Black Mirror 一季， The IT Crowd 两季，Monday Mornings，Greys Anatomy 一季， Person of Interest 三季，Modern Family 半季多&lt;/p>
&lt;ul>
&lt;li>从3月份开始，我开始撸 DigitalOcean 的 Github 学生优惠，到现在为止服务器运维的相关知识增长地挺快&amp;hellip;应该是从大学开始吧，我开始用VPS自建SS，一开始是 Cloudcone 还是 Vultr 后来撸到了 DO，再后来19年年初的时候知道了一个超便宜的深港专线，后来又撸了阿里云的学生机。&lt;/li>
&lt;li>四月中旬看了死亡诗社，Seize the day 成了我的座右铭，虽然我一直没有做到这一点。&lt;/li>
&lt;li>整个一年我总有一种感觉，学习不在状态，有时候一直陷入一种昏昏沉沉的状态，那种状态下，犯困，没有学习的心思，干其他事也提不起兴趣。仿佛就在虚度光阴。从那个寒假开始我就（似乎）养成了不良的生活习惯。&lt;/li>
&lt;li>四五月份入了创新IE3P 和 iPad 2018，拔草成功，却没有对我的学习质量有多大的改善。后来又开始种草蓝牙降噪耳机&amp;hellip;&lt;/li>
&lt;li>六月末，转专业考试。一年中最重要的一件事，从环境科学与工程转到了软件工程专业，进入了理想的专业。&lt;/li>
&lt;li>然而同时打算换宿舍的（非常不喜欢我们宿舍的氛围和作息），最终没有成功。后来也尝试过 Bose Sleepbuds 这个方案，效果不佳。遂产生了租房的想法。&lt;/li>
&lt;li>尝试读英文原著，从大一上开始读星际穿越的剧本，读到18年年中读完了。然后开始看三体的英文版，到现在看了一半多。&lt;/li>
&lt;li>九月中旬开始用 Excel 记账，对日常消费进行记录和管理，持续至今。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1550035065769.png" alt="1550035065769">&lt;/p>
&lt;ul>
&lt;li>九月中旬，在学校有了一辆自己的自行车。&lt;/li>
&lt;li>大二上是忙碌的一学期。首先课就很多，粗略统计之下每周有38个学时，作为对比，大一上是27学时，大一下是33学时。然后学期初的时候偶然间看到网络中心招学生助理，于是去了。（&lt;del>并没有学什么东西&lt;/del>好歹还是学了点的）然后是计协（主要）和其他社团的活动。&lt;/li>
&lt;li>学习成绩仍然不尽如人意，而且有着每学期逐步下滑的趋势&amp;hellip;&lt;/li>
&lt;li>记不清某个时间了，折腾过Ubuntu，碰到了N+I卡驱动的问题，卡启动Logo，最后也没解决。后来就弃疗了，平时就瞎搞搞虚拟机和 WSL 了。&lt;/li>
&lt;li>十二月下旬，我校ACM新生赛，我负责了评测环境的搭建，这大概是我一年来做过的最有意义的一件事。&lt;/li>
&lt;li>好多书都只读到一半，然后处于半弃坑状态，比如未来简史，值得反思&amp;hellip;&lt;/li>
&lt;li>下半年的印象笔记笔记数量似乎少了很多&amp;hellip;&lt;/li>
&lt;li>更加怀念高中时候的生活了&amp;hellip;或许到了工作之后我也会更加怀念大学的生活吧。&lt;/li>
&lt;/ul>
&lt;h2 id="2019-年初计划">2019 年初计划&lt;/h2>
&lt;ul>
&lt;li>学习 Linux，参考书目《Linux&amp;amp;Unix 大学教程》&lt;/li>
&lt;li>学习 Git，参考书目 《Pro Git》&lt;/li>
&lt;li>学习计算机网络，参考书目《Computer Networking:A Top-down Approach》（这本书TM还是去年七月下旬借的）&lt;/li>
&lt;li>学习使用 Anki （去年九月初就知道了这个软件并一直想学 emmm..)&lt;/li>
&lt;li>写一篇关于 Lumia 的博客（同样是去年鸽到现在了&amp;hellip;）&lt;/li>
&lt;li>用 AutoHotkey 把 Markdown 编辑器打造地更顺手一点&lt;/li>
&lt;li>在豆瓣建立起我的书单，并写书评&lt;/li>
&lt;li>买轻薄本（从去年年初我就开始有这个想法了QAQ），目前种草 LG Gram，等一个19款&lt;/li>
&lt;li>多运动，多出去骑车&lt;/li>
&lt;li>实现本博客的 Todo（虽然大半都是在瞎搞&lt;/li>
&lt;li>搬出去！&lt;/li>
&lt;li>做好未来的打算，考研 OR 出国，是否找个实验室去做项目，未来的方向等等&lt;/li>
&lt;li>记录生活&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>这篇文章写了三天才写完，写的也比较杂乱。事实上在一开始我就没有一个整体的构思。&lt;/p>
&lt;p>2019年已经快过去了两个月，我才堪堪写完年初计划。这些计划（或者说我未来的目标）虽有个模糊的大方向，却又不甚明了，或许我还需要更深层次的思考吧。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>DOMjudge 配置/踩坑指南</title><link>https://blog.coherence.codes/posts/2020_and_before/domjudge-config/</link><pubDate>Wed, 19 Dec 2018 20:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/domjudge-config/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/domjudge-config/ -&lt;p>我校新生赛也能用上 World Final 同款评测系统啦~&lt;/p>
&lt;p>DOMjudge 提供了详尽的&lt;a href="https://www.domjudge.org/documentation">官方文档&lt;/a>，然而对于博主这种英文弱鸡来说读的很痛苦。前前后后折腾了有两个星期吧，以此文作为避（踩）坑指南。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>DOMjudge，作为一款开源的 CCS(&lt;a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System">Contest Control System&lt;/a>)，现已被ICPC钦定为官方的比赛评测系统。比 pc^2 这种闭源而含有诸多 Bug 的 CCS 高到不知道哪里去了啊。&lt;/p>
&lt;p>&lt;img src="./1545218741334.png" alt="1545218741334">&lt;/p>
&lt;p>根据官方文档的描述，DOMjudge 的主要特性有：&lt;/p>
&lt;ul>
&lt;li>分布式且自动评测的 judge host&lt;/li>
&lt;li>Web 用户界面&lt;/li>
&lt;li>模块化的系统，方面添加不同的语言/编译器&lt;/li>
&lt;/ul>
&lt;p>整个 DOMjudge 主要分为两个部分，Domserver 和 Judgehost，据其名字即可得出它们的功能。需要注意的是，DOMjudge 使用数据库来存放几乎一切数据，所以我们还需配置 MySQL 或者 MariaDB。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>DOMjudge 只能运行在 Linux 环境下。博主的运行环境是 Ubuntu Server 18.04 LTS，以及 DOMjudge 7.1.1。&lt;/p>
&lt;p>除了传统的安装方式外，DOMjudge 还提供了 Docker 镜像以供安装，这样就大大简化了安装的困难程度。&lt;/p>
&lt;p>关于 Docker 的使用这里不作详细描述。（其实是博主也一知半解）&lt;/p>
&lt;p>然而&lt;a href="https://hub.docker.com/r/domjudge/domserver">官方的 Docker 文档中&lt;/a>仅使用了命令来启动容器，为了进一步简化安装，也为了方便修改配置，我决定采用 Docker Compose 。以下是 &lt;code>docker-compose.yml &lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mariadb&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">dj-mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_ROOT_PASSWORD=rootpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_USER=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_PASSWORD=djpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_DATABASE=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">$PWD/data:/var/lib/mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">13306&lt;/span>:&lt;span style="color:#ae81ff">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">max-connections=1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">innodb-log-file-size=480M&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">domserver&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">domjudge/domserver:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">domserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_HOST=mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_USER=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_DATABASE=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_PASSWORD=djpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_ROOT_PASSWORD=rootpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">CONTAINER_TIMEZONE=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">phpmyadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">80&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">links&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">judgehost&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">domjudge/judgehost:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">judgedaemon-0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">privileged&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">CONTAINER_TIMEZONE=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">DAEMON_ID=0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">JUDGEDAEMON_PASSWORD=whatthehell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">domserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">links&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">domserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/sys/fs/cgroup:/sys/fs/cgroup:ro&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">phpmyadmin&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">phpmyadmin/phpmyadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">myadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">PMA_HOST=mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">links&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mariadb:mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行 &lt;code>docker-compose up -d&lt;/code> 即可完成部署。&lt;/p>
&lt;p>Judgehost 利用了 Linux 内核的 Cgroup 特性，所以需进行一步额外设置（似乎部分内核较新的系统不需要）。编辑 &lt;code>/etc/default/grub&lt;/code> 文件，将默认的命令改为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>GRUB_CMDLINE_LINUX_DEFAULT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;quiet cgroup_enable=memory swapaccount=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GRUB_CMDLINE_LINUX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;quiet cgroup_enable=memory swapaccount=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行 &lt;code>update-grub&lt;/code> 并重启。&lt;/p>
&lt;p>需要多核判题的话创建多个 Judgehost 容器并修改 DAEMON_ID 为不同的值即可。&lt;/p>
&lt;p>目前存在的问题：&lt;/p>
&lt;ul>
&lt;li>judgehost 用户的初始密码不定，需要手动去 web 端更改并添加 &lt;code>JUDGEDAEMON_PASSWORD&lt;/code> 的环境变量。（默认环境变量的密码是 &lt;code>password&lt;/code>）&lt;/li>
&lt;li>整个系统对我来说是个黑盒&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>除了 MariaDB , DOMserver , Judgehost 这三个必要的容器外，我还使用了 phpMyAdmin 来进行图形化的数据库管理（备份)。数据库（即 &lt;code>mariadb&lt;/code> 容器的数据卷）创建在了当前目录的&lt;code>data&lt;/code>文件夹下，方便备份。&lt;/p>
&lt;p>其中，Domserver 映射到了主机的 80 端口， phpMyAdmin 映射到了 8080 端口。由于是内网环境，故不准备采用 HTTPS 加密。&lt;/p>
&lt;p>需要注意的是，DOMjudge 提供的 Judgehost 镜像中仅包含 C, C++, Java 三种语言的运行环境。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>Domserver 部署成功后，即可通过 Web 端来访问了。默认的管理员账号用户名 &lt;code>admin&lt;/code> ，默认密码被打印在domserver启动时的日志中，同时也可以用&lt;code>docker exec -it domserver cat /opt/domjudge/domserver/etc/initial_admin_password.secret&lt;/code>来获取 。&lt;/p>
&lt;p>可以在 Config Checker 中进行配置检查。&lt;/p>
&lt;p>C++ 的默认编译选项没有 C++11， 需手动添加。&lt;/p>
&lt;h3 id="题目导入">题目导入&lt;/h3>
&lt;p>DOMjudge 支持用 zip 格式的压缩包导入/导出题目。&lt;/p>
&lt;p>具体的文件结构是：&lt;/p>
&lt;pre tabindex="0">&lt;code>│ domjudge-problem.ini
│
├─data
│ ├─sample
│ └─secret
│
└─problem_statement
problem.{pdf,html,txt}
&lt;/code>&lt;/pre>&lt;p>在 &lt;code>domjudge-problem.ini&lt;/code> 中定义了如下信息：&lt;/p>
&lt;p>&lt;img src="./1545219324330.png" alt="1545219324330">&lt;/p>
&lt;p>（懒得翻译了，有时间再补）&lt;/p>
&lt;p>在 secret 文件夹中存放测试数据，在 sample 文件夹中存放样例数据， 在 problem_statement 存放题面。&lt;/p>
&lt;p>（不知道为什么博主在压缩包内上传题面没有成功过，只能通过 Web 端来上传）&lt;/p>
&lt;p>测试数据的扩展名为 &lt;code>.in&lt;/code> 和 &lt;code>.ans&lt;/code>。&lt;/p>
&lt;h3 id="队伍导入">队伍导入&lt;/h3>
&lt;p>队伍及用户导入采用 tsv(&lt;em>tab-separated values&lt;/em>) 格式，即信息之间采用制表符（TAB）分隔。事实上，文件的扩展名并不需要采用&lt;code>.tsv&lt;/code>。我们可以直接在Excel中创建一个表格然后将其后复制至一个文本文件中。&lt;/p>
&lt;p>格式由&lt;a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System_Requirements#Appendix:_File_formats"> ICPC 官方定义&lt;/a>。&lt;/p>
&lt;p>teams 格式：&lt;/p>
&lt;pre tabindex="0">&lt;code>teams 1
team_id external_ID group_id team_name institution_name institution_short_name country_code
&lt;/code>&lt;/pre>&lt;p>参考&lt;a href="https://cubercsl.cn/notes/DOMjudge-Note.html">CSL的博客&lt;/a>发现：&lt;/p>
&lt;blockquote>
&lt;p>在导入teams表的时候，在&lt;code>Country Code&lt;/code>后追加一列，填写&lt;code>Institution External ID&lt;/code>。
这步是阅读&lt;a href="https://github.com/DOMjudge/domjudge/blob/master/lib/lib.impexp.php#L108">源代码&lt;/a>后猜测的，当时的实际操作是直接在数据库中的&lt;code>team_affiliation&lt;/code>用SQL语句更新&lt;code>ExternalID&lt;/code>的。&lt;/p>
&lt;/blockquote>
&lt;p>博主采用了这种方式，并在导入队伍后通过 Web 界面手动添加 Affiliation 信息。&lt;/p>
&lt;p>事实上，institution_name institution_short_name country_code这三个字段都不是必要的，只需要有External ID就可以。而如果没有External ID的话，会创建和队伍数量一样多的Affiliation。&lt;/p>
&lt;p>accounts 格式：&lt;/p>
&lt;pre tabindex="0">&lt;code>accounts 1
account_type fullname username password
&lt;/code>&lt;/pre>&lt;p>一种（可能）简单的方式是先导入队伍再导入用户，并且用户 username 的后缀数字与 team_id 相同。不需要的字段可以直接留空。（不能缺少分隔符）&lt;/p>
&lt;p>tsv 文件可以采用 Excel 生成。在 Excel 中输入完数据后选择另存为文本文件（制表符分隔）即可。&lt;/p>
&lt;p>如需使用&lt;code>institution_name institution_short_name country_code&lt;/code> 三项需在 Team Affiliations 中提前创建相应的条目。&lt;/p>
&lt;h3 id="api">API&lt;/h3>
&lt;p>参考官方的 API 说明，DOMjudge 包含&lt;a href="https://clics.ecs.baylor.edu/index.php/Contest_API"> ICPC 定义的 API &lt;/a>和&lt;a href="https://www.domjudge.org/demoweb/api/doc">自有的 API&lt;/a>。&lt;/p>
&lt;p>&lt;img src="./1545220336183.png" alt="1545220336183">&lt;/p>
&lt;h3 id="滚榜">滚榜&lt;/h3>
&lt;p>尝试使用官方的 &lt;a href="https://icpc.baylor.edu/icpctools/">ICPC tools&lt;/a>，发现总是提示比赛未结束，查阅日志认为是 DOMjudge 的 event feed 格式与 ICPC tools 提供的 resolver 工具的格式不兼容。&lt;/p>
&lt;p>尝试 DOMjura 发现同样不能正确读取 event-feed 。&lt;/p>
&lt;hr>
&lt;p>2019年校赛补充：滚榜采用了 Github 上的&lt;a href="https://github.com/hex539/scoreboard">这个项目&lt;/a>。这比官方的滚榜工具好用多了，但是也有坑。&lt;/p>
&lt;p>首先它使用bazel作为构建工具，但是bazel对于Windows很不友好（至少对于这个项目而言），会有奇怪的报错。所以我使用了Ubuntu。其次，由于构建过程中大部分源都在国外，对于国内的网络环境来说很不友好。我的解决办法是使用proxychains代理bazel，实测无需任何配置即可支持Domjudge 7.1.1（2019/12/7）。&lt;/p>
&lt;h2 id="2018冬季新生赛概况">2018冬季新生赛概况&lt;/h2>
&lt;p>闲扯几句。&lt;/p>
&lt;p>热身赛一切良好。出题人数据出锅，被批判了一个多小时2333。&lt;/p>
&lt;p>正式赛赛前比赛账号导入的时候，有个人是后来添加的，和之前的版本没有对应上，导致部分队伍登录到了后一个队伍的账号，重新导入 team 后发现无法登录，还需导入 accounts。这导致比赛推迟了 5 分钟。&lt;/p>
&lt;p>由于 Submission 的输出数据是保留的，而赛前我的服务器硬盘空间本来就不多了，比赛时当服务器的硬盘占用达到 90% 时，所有 judgehost 就都被关了。我只能胡乱删几个软件包腾出空间。还好没有造成大的影响。&lt;/p>
&lt;p>然后直到最后还是没有搞出滚榜。&lt;/p>
&lt;p>GG。总体来说还是挺顺利的，服务器没有崩，甚至平均 CPU load 只有 1.0 左右，就是感觉比较吃 I/O，还好我用的是固态（&lt;del>先见之明&lt;/del>）。&lt;/p>
&lt;p>总结一下，DOMjudge 体验极佳，可以在校赛再推广一波。&lt;/p>
&lt;h2 id="2019冬季新生赛概况">2019冬季新生赛概况&lt;/h2>
&lt;p>由于今年懒得去嫖学校的服务器了，所以打算用公网服务器。本来在GCP和阿里云之间纠结用哪个，给我恰好滑稽给我提供了他在镇江的独服，于是建了一个16C，16G内存的虚拟机用作评测服务器（顺带送了个域名）。&lt;/p>
&lt;p>这台服务器的网络结构比较复杂，首先，他是Windows Server，通过一个软件把某些端口的流量转发至一台Debian虚拟机中（为了方便管理证书等），然后由Debian上的Nginx反代至Domjudge的虚拟机中。这样我自己就不用配置证书也能有HTTPS。&lt;/p>
&lt;p>但是Windows有一个老生常谈的坑：时间问题。Windows的硬件时钟是本地时间，而Linux为UTC时间，这导致了一开始Domjudge里的时间是假的，需要手动设置。&lt;/p>
&lt;p>本次Domjudge的配置基本与之前相同，用Docker-compose一键部署。&lt;/p>
&lt;p>之前一直没有做过压力测试一直是我的遗憾，这次在研究了Domjudge的&lt;a href="https://www.domjudge.org/demoweb/api/doc">API文档&lt;/a>之后，写了一个&lt;a href="Domjudge-config/submit.py">自动交题的脚本&lt;/a>，并且用Locust辅助做压力测试，然后评测机不负众望炸了。。&lt;/p>
&lt;p>&lt;img src="./image-20191208184458561.png" alt="image-20191208184458561">&lt;/p>
&lt;p>其实还不止这个错，还有各种奇怪的错误。幸好在正式比赛中评测机表现得很稳健，并没有出锅，应该是压力还不够大。。&lt;/p>
&lt;p>比赛时还碰到一个bug，在一道题重测后这道题的一血变更了，但是榜单上的一血是错的，重新刷新榜单也未解决。查看数据库表发现有一张叫&lt;code>scorecache&lt;/code>的表，推测该表即为榜单的缓存，于是更改&lt;code>is_first_solved&lt;/code>字段后，成功解决。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/domjudge-config/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>使用KMS激活Visio</title><link>https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/</link><pubDate>Sat, 01 Dec 2018 23:11:38 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/ -&lt;h2 id="题记">题记&lt;/h2>
&lt;p>如果你懒的话当然可以用KMSpico等工具一键激活，但博主不想电脑里多个启动项，并且博主的电脑预装了Office2013家庭与学生版，用此类工具可能出现不可预知的后果，所以打算自己动手激活Visio。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="转换visio版本">转换Visio版本&lt;/h2>
&lt;p>我在&lt;a href="http://msdn.itellyou.cn/?lang=zh-cn">MSDN我告诉你&lt;/a>和某非著名PT站上并没有找到Visio的VL（批量授权）版本，然而KMS激活需要VL版，所以第一步是转换Visio的版本。&lt;/p>
&lt;p>复制以下代码，保存为.bat文件并用管理员身份运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> exist &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&amp;#34;&lt;/span> cd /d &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles%\Microsoft Office\Office16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> exist &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&amp;#34;&lt;/span> cd /d &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles(x86)%\Microsoft Office\Office16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /rearm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> /f %%x in &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dir /b ..\root\Licenses16\visio???vl_kms*.xrm-ms&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> cscript ospp.vbs /inslic:&lt;span style="color:#e6db74">&amp;#34;..\root\Licenses16\%%x&amp;#34;&lt;/span> &amp;gt;nul
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> /f %%x in &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dir /b ..\root\Licenses16\visio???vl_mak*.xrm-ms&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> cscript ospp.vbs /inslic:&lt;span style="color:#e6db74">&amp;#34;..\root\Licenses16\%%x&amp;#34;&lt;/span> &amp;gt;nul
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令的作用分别为：&lt;/p>
&lt;ul>
&lt;li>打开Office的安装目录（Visio也属于Office的一部分）&lt;/li>
&lt;li>重置零售激活&lt;/li>
&lt;li>安装KMS和MAK许可证（转换版本）&lt;/li>
&lt;/ul>
&lt;p>题外话：转换Office和Project版本同理。&lt;/p>
&lt;p>Office：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /rearm
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
&lt;/code>&lt;/pre>&lt;p>Project：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /rearm
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\project???vl_kms*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\project???vl_mak*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
&lt;/code>&lt;/pre>&lt;p>再跑下题，为什么要用批处理呢，因为这段命令直接在cmd里执行会出错，博主没学过Shell无法理解。（留下了没有知识的泪水）&lt;/p>
&lt;h2 id="设置kms密钥及服务器">设置KMS密钥及服务器&lt;/h2>
&lt;p>打开Office的安装目录，也就是代码里的&lt;code>%ProgramFiles%\Microsoft Office\Office16\&lt;/code>（64位）或者&lt;code>%ProgramFiles(x86)%\Microsoft Office\Office16\&lt;/code>（32位）。&lt;/p>
&lt;p>按住Shift+右键，选择在此处打开PowerShell，输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /inpkey&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>PD3PC-RHNGV-FXJ29-8JK7D-RJRJK
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来安装KMS密钥。注意以上命令中的KMS密钥只适用与Visio2016，其他版本可到&lt;a href="https://docs.microsoft.com/zh-cn/DeployOffice/vlactivation/gvlks">微软官方文档&lt;/a>中查询。&lt;/p>
&lt;p>然后设置KMS服务器，博主用的是网上找的，以后尝试一下自己搭一个：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /sethst:xxx.xxx
&lt;/code>&lt;/pre>&lt;p>由于不保证可用性，服务器名称已略去。&lt;/p>
&lt;p>指令Office立即连接KMS服务器进行激活：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /act
&lt;/code>&lt;/pre>&lt;p>完成！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a href="https://03k.org/kms.html">https://03k.org/kms.htm&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000015697457">https://segmentfault.com/a/1190000015697457&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/ywd1992/article/details/79412991">https://blog.csdn.net/ywd1992/article/details/79412991&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Markdown简介</title><link>https://blog.coherence.codes/posts/2020_and_before/all-about-markdown/</link><pubDate>Thu, 08 Nov 2018 20:16:56 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/all-about-markdown/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/all-about-markdown/ -&lt;h2 id="什么是-markdown">&lt;strong>什么是 Markdown?&lt;/strong>&lt;/h2>
&lt;p>Markdown 是一种轻量级且易使用的标记语言，通过对标题、正文、加粗、链接等主要文本格式的预设编码，帮用户在写作中有效避免频繁的格式调整，获得更加流畅沉浸的写作体验。&lt;/p>
&lt;p>&lt;img src="./Markdown-mark.svg.png" alt="哈哈哈">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h3 id="markdown-vs-富文本">Markdown VS 富文本&lt;/h3>
&lt;p>基于 Markdown 写作，是属于&lt;strong>纯文本&lt;/strong>写作。「纯文本」写作和「富文本」写作是对立的，我们来区分一下：&lt;/p>
&lt;h4 id="富文本写作-">**「富文本」写作 **&lt;/h4>
&lt;p>你平时在&lt;strong>Word&lt;/strong>上写作，就属于富文本写作。修改文字的大小、修改文字颜色、调整各种格式只需要点一下鼠标就行。富文本写作最大的特点是：&lt;strong>所见即所得&lt;/strong>，你把格式调整成什么样子，就会直接显示出什么样的效果。&lt;/p>
&lt;p>然而，富文本的格式排版过于繁杂，以致于你不得不花费大量时间在这上面，而忽略了写作本身。&lt;/p>
&lt;p>同时，富文本存在着&lt;strong>多平台转换不方便&lt;/strong>的问题，假如你在 Word 上写好了文档，格式也调好了，复制粘贴到其他写作平台的时候发现：&lt;strong>格式全乱啦&lt;/strong>；即使是转发给其他人也可能因为 Word 版本的不同而导致显示的差别很大。（如果你有过去打印店打印文档的经历的话，相信体会很深吧）富文本一般需要使用专用软件打开（如Word）。&lt;/p>
&lt;h4 id="markdown写作">&lt;strong>「Markdown」写作&lt;/strong>&lt;/h4>
&lt;p>基于 &lt;strong>Markdown&lt;/strong> 写作，就是纯文本写作。它允许人们使用纯文本格式来编写文档。如果你想设置某段文字的格式，只需要使用一些简单的符号来代表即可。所以&lt;strong>文字和格式都是纯文本&lt;/strong>。能够用普通的文本编辑器打开。&lt;/p>
&lt;p>Markdown正好处在富文本的对立面，由于其简洁的特性，导致其格式只有寥寥几种，功能上也远不如富文本编辑器。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Markdown 的优点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>纯文本所以&lt;strong>兼容性&lt;/strong>极强，可以用所有文本编辑器打开&lt;/p>
&lt;/li>
&lt;li>
&lt;p>让你更&lt;strong>专注于文字&lt;/strong>而不是排版&lt;/p>
&lt;/li>
&lt;li>
&lt;p>格式&lt;strong>转换方便&lt;/strong>，Markdown 文本你可以轻松转换为 html、电子书等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Markdown 的标记语法有&lt;strong>极好的可读性&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Markdown的主要用途&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>博客（自建、简书、CSDN等等）&lt;/li>
&lt;li>笔记，随笔等&lt;/li>
&lt;li>Github&lt;/li>
&lt;/ul>
&lt;h2 id="编辑器推荐">编辑器推荐&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Typora&lt;/strong> Markdown也能所见即所得！&lt;/li>
&lt;/ul>
&lt;h2 id="基本语法">基本语法&lt;/h2>
&lt;p>Markdown语法主要分为如下几大部分： &lt;strong>标题&lt;/strong>，&lt;strong>段落&lt;/strong>，&lt;strong>区块引用&lt;/strong>，&lt;strong>代码区块&lt;/strong>，&lt;strong>强调&lt;/strong>，&lt;strong>列表&lt;/strong>，&lt;strong>分割线&lt;/strong>，&lt;strong>链接&lt;/strong>，&lt;strong>图片&lt;/strong>，&lt;strong>反斜杠 \&lt;/strong>，&lt;strong>行内引用&lt;/strong>。&lt;/p>
&lt;h4 id="1-标题">1. 标题&lt;/h4>
&lt;p>使用&lt;code>#&lt;/code>，可表示1-6级标题。&lt;/p>
&lt;blockquote>
&lt;p># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;h1 id="一级标题">一级标题&lt;/h1>
&lt;h2 id="二级标题">二级标题&lt;/h2>
&lt;h3 id="三级标题">三级标题&lt;/h3>
&lt;h4 id="四级标题">四级标题&lt;/h4>
&lt;h5 id="五级标题">五级标题&lt;/h5>
&lt;h6 id="六级标题">六级标题&lt;/h6>
&lt;/blockquote>
&lt;h4 id="2-段落">2. 段落&lt;/h4>
&lt;p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用&lt;strong>两个以上&lt;/strong>空格加上回车（引用中换行省略回车）。&lt;/p>
&lt;h4 id="3-区块引用">3. 区块引用&lt;/h4>
&lt;p>在段落的每行或者只在第一行使用符号&lt;code>&amp;gt;&lt;/code>,还可使用多个嵌套引用，如：&lt;/p>
&lt;blockquote>
&lt;p>&amp;gt; 区块引用
&amp;gt;&amp;gt; 嵌套引用&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;p>区块引用&lt;/p>
&lt;blockquote>
&lt;p>嵌套引用&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h4 id="4-代码区块">4. 代码区块&lt;/h4>
&lt;p>1）代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如
普通段落：&lt;/p>
&lt;p>int main()
{
printf(&amp;ldquo;Hello, Markdown.&amp;rdquo;);
}&lt;/p>
&lt;p>代码区块：&lt;/p>
&lt;pre>&lt;code>int main()
{
printf(&amp;quot;Hello, Markdown.&amp;quot;);
}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>注意&lt;/strong>:需要和普通段落之间存在空行。&lt;/p>
&lt;p>2）在代码区块的前后加上 ```&lt;/p>
&lt;blockquote>
&lt;p>```
hello,world
```&lt;/p>
&lt;/blockquote>
&lt;p>效果为：&lt;/p>
&lt;pre tabindex="0">&lt;code>hello，world
&lt;/code>&lt;/pre>&lt;h4 id="5-强调">5. 强调&lt;/h4>
&lt;p>在强调内容两侧分别加上&lt;code>*&lt;/code>或者&lt;code>_&lt;/code>，如：&lt;/p>
&lt;blockquote>
&lt;p>*斜体*，_斜体_
*&lt;em>粗体*&lt;/em>，_&lt;em>粗体_&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>斜体&lt;/em>，&lt;em>斜体&lt;/em>
&lt;strong>粗体&lt;/strong>，&lt;strong>粗体&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h4 id="6-列表">6. 列表&lt;/h4>
&lt;p>使用&lt;code>·&lt;/code>、&lt;code>+&lt;/code>、或&lt;code>-&lt;/code>标记无序列表，如：&lt;/p>
&lt;blockquote>
&lt;p>-（+&lt;em>） 第一项 -（+&lt;/em>） 第二项 - （+*）第三项&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。&lt;/p>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>第一项&lt;/li>
&lt;li>第二项&lt;/li>
&lt;li>第三项&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>有序列表的标记方式是将上述的符号换成数字,并辅以&lt;code>.&lt;/code>，如：&lt;/p>
&lt;blockquote>
&lt;p>1 . 第一项
2 . 第二项
3 . 第三项&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>第一项&lt;/li>
&lt;li>第二项&lt;/li>
&lt;li>第三项&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4 id="7-分割线">7. 分割线&lt;/h4>
&lt;p>分割线最常使用就是三个或以上&lt;code>*&lt;/code>，还可以使用&lt;code>-&lt;/code>和&lt;code>_&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>***&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;hr>
&lt;/blockquote>
&lt;h4 id="8-链接">8. 链接&lt;/h4>
&lt;p>使用 &lt;strong>[]()&lt;/strong> 在[]内输入链接的名称，()内输入链接的地址。&lt;/p>
&lt;blockquote>
&lt;p>[我的博客](&lt;a href="https://cjc7373.github.io">https://cjc7373.github.io&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://cjc7373.github.io">我的博客&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="9-图片">9. 图片&lt;/h4>
&lt;p>添加图片的形式和链接相似，只需在链接的基础上前方加一个&lt;code>！&lt;/code>。&lt;/p>
&lt;h4 id="10-反斜杠">10. 反斜杠&lt;code>\&lt;/code>&lt;/h4>
&lt;p>相当于&lt;strong>反转义&lt;/strong>作用。使符号成为普通符号。&lt;/p>
&lt;h4 id="11-行内引用">11. 行内引用&lt;/h4>
&lt;p>在字符之间加上`，起到标记作用，相当于行内引用。如：&lt;/p>
&lt;blockquote>
&lt;p>`Too young`&lt;/p>
&lt;/blockquote>
&lt;p>效果：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Too young&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="拓展语法">拓展语法&lt;/h2>
&lt;h4 id="1表格">1.表格&lt;/h4>
&lt;pre tabindex="0">&lt;code>| 一个普通标题 | 一个普通标题 | 一个普通标题 |
| ------ | :------: | ------: |
| 短文本 | 中等文本 | 稍微长一点的文本 |
| 稍微长一点的文本 | 短文本 | 中等文本 |
&lt;/code>&lt;/pre>&lt;p>&lt;code>------&lt;/code>用作标题和内容的分隔符，&lt;code>:&lt;/code>用来控制对齐方式，上述表格的效果如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>一个普通标题&lt;/th>
&lt;th style="text-align:center">一个普通标题&lt;/th>
&lt;th style="text-align:right">一个普通标题&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>短文本&lt;/td>
&lt;td style="text-align:center">中等文本&lt;/td>
&lt;td style="text-align:right">稍微长一点的文本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>稍微长一点的文本&lt;/td>
&lt;td style="text-align:center">短文本&lt;/td>
&lt;td style="text-align:right">中等文本&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
- https://blog.coherence.codes/posts/2020_and_before/all-about-markdown/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>关于我</title><link>https://blog.coherence.codes/posts/2020_and_before/about_me/</link><pubDate>Sat, 03 Nov 2018 16:37:04 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/about_me/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/about_me/ -&lt;h2 id="关于我">关于我&lt;/h2>
&lt;p>博主是一名大四学生。&lt;/p>
&lt;ul>
&lt;li>爱好一切数码产品&lt;/li>
&lt;li>安卓（伪）瞎折腾党&lt;/li>
&lt;li>ACM 打铁选手&lt;/li>
&lt;li>Linux 初学者&lt;/li>
&lt;li>科幻爱好者&lt;/li>
&lt;/ul>
&lt;h2 id="关于博客">关于博客&lt;/h2>
&lt;ul>
&lt;li>2021-02-08 迁移到 pelican, 打算自己写个主题, 待填坑&lt;/li>
&lt;li>2020-03-26 更新 Hexo 至 4.2.0，启用 hexo-generator-sitemap 插件&lt;/li>
&lt;li>2020-02-22 更改评论为 &lt;code>disqusjs&lt;/code>，详见作者的&lt;a href="https://blog.skk.moe/post/disqusjs/">博文&lt;/a>；启用 &lt;a href="https://github.com/theme-next/theme-next-pjax">pjax&lt;/a>&lt;/li>
&lt;li>2019-12-24 启用新域名&lt;code>blog.coherence.codes&lt;/code>&lt;/li>
&lt;li>2019-10-07 升级主题至 Next V7.4.1&lt;/li>
&lt;li>2018-09-24 第一篇博文。采用 Hexo + NexT 主题， 部署于 Github Pages。搭建过程见{% post_link Hexo搭建小记 这篇文章 %}&lt;/li>
&lt;/ul>
&lt;h2 id="联系我">联系我&lt;/h2>
&lt;p>Telegram：@Coherence0&lt;/p>
&lt;p>Email：niuchangcun AT gmail.com&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/about_me/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Windows10字体崩溃修复</title><link>https://blog.coherence.codes/posts/2020_and_before/windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/</link><pubDate>Fri, 02 Nov 2018 18:23:47 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/ -&lt;blockquote>
&lt;p>这就是乱改字体的后果..&lt;/p>
&lt;/blockquote>
&lt;p>字体修复，不只是字体修复。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="事由">事由&lt;/h2>
&lt;p>偶然间看到一篇&lt;a href="http://www.dgtle.com/article-25875-1.html">替换Win10字体来提升字体观感的文章&lt;/a>，加上一直听说Win10的字体渲染很垃圾，于是就按照文中的步骤，把默认的微软雅黑字体替换成了苹果的苹方字体。&lt;/p>
&lt;p>然而，使用了一段时间后发现，所有的字体似乎都小了一圈，而且在cmd中出现了字体大小错乱的情况。网上找了一圈发现Win10砍掉了调整字体大小的功能，现在只能以整体缩放来调整字体大小。新的字体感觉也没有想象中的那么好。&lt;/p>
&lt;p>于是我把备份的默认字体又恢复了回去，按道理不会出事，然而我的电脑出锅了。一些软件的中文字体成了方框，cmd的字体也变得很奇怪。&lt;/p>
&lt;h2 id="解决方法">解决方法&lt;/h2>
&lt;p>一番操作之后，发现设置里的新宋体是乱码，感觉可能是字体文件崩了。&lt;/p>
&lt;p>&lt;img src="./1541154864085.png" alt="1541154864085">&lt;/p>
&lt;p>但是&lt;code>simsunb.ttf&lt;/code>这个文件我分明备份过。。&lt;/p>
&lt;p>没办法，继续面向Google解决问题，这时候找到了一个&lt;a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-ime/%E5%9C%A8windows/d575f11c-1f2e-454c-9fcd-432809f7fd76">微软社区页面&lt;/a>，里面给出了三条命令：&lt;/p>
&lt;pre tabindex="0">&lt;code>DISM.exe /Online /Cleanup-image /Scanhealth
DISM.exe /Online /Cleanup-image /Restorehealth
sfc /scannow
&lt;/code>&lt;/pre>&lt;p>根据&lt;a href="https://support.microsoft.com/zh-cn/help/947821/fix-windows-update-errors-by-using-the-dism-or-system-update-readiness">微软官方支持页面&lt;/a>的描述，这三个命令是检查系统文件的完整性并自动通过 Windows 更新来修复。&lt;/p>
&lt;p>用管理员身份打开cmd，依次执行完重启，一切都恢复了原状。&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>看了一些&lt;a href="https://www.zhihu.com/question/274344133">知乎回答&lt;/a>，感觉Win10的字体也并没有那么糟糕。事实上我一直以来用着默认的字体也没有感到不舒服。&lt;del>可能是我眼瞎吧。&lt;/del>&lt;/p>
&lt;p>另外，上述的三个命令理论上能解决Windows的许多问题，碰到问题可以尝试。&lt;/p>
&lt;h4 id="2019213-更新">2019/2/13 更新&lt;/h4>
&lt;p>目前家里入了 4K 显示器，200% 缩放，观感上没有任何问题。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>我为什么选择了独立博客</title><link>https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 13 Oct 2018 20:13:11 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/ -&lt;p>这是一个独立博客式微的时代。&lt;/p>
&lt;p>独立博客没有博客平台的推荐导流系统，相比之下观之者寥寥。&lt;/p>
&lt;p>那我为什么还是选择了独立博客呢？&lt;/p>
&lt;ul>
&lt;li>自由，不会受外部因素的影响，可以随意添加自己想要的功能。&lt;/li>
&lt;li>方便，一行命令就能更新博客。&lt;/li>
&lt;li>可控，完全受自己管理。&lt;/li>
&lt;/ul>
&lt;p>在这纷纭复杂的互联网中，拥有自己的一方小天地，似乎也是极好的。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Hexo搭建小记</title><link>https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 13 Oct 2018 20:10:18 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/ -&lt;blockquote>
&lt;p>身为一个懒人，又不会写网页，也只能用用博客生成器了。&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="为什么选择hexo">为什么选择Hexo&lt;/h2>
&lt;p>其实也没啥特别的理由。一开始想把博客搭在自己的服务器上，然而感觉维护太麻烦了，正好觉得Github Pages很不错，就决定用了。Github Pages只支持静态页面，WordPress之类的就不能用了，于是&lt;del>随手找了几个静态博客生成器，&lt;/del> 随手一查就找到了Hexo。&lt;/p>
&lt;h2 id="hexo搭建过程">Hexo搭建过程&lt;/h2>
&lt;p>Hexo的官方文档有中文，这点很赞。虽然官方文档讲的不是很清楚..然而搭建还是比较简单的，加上Google了几篇教程，很快就把Hexo搭起来了。&lt;/p>
&lt;p>身为一个博客生成器，当然不能让我们接触到代码了。所以Hexo的基本配置均在&lt;code>_config.yml&lt;/code>这个配置文件中。配置采用YAML语法，看看官方文档也就差不多了解了。基本上无需过多配置就搭建完成了。&lt;/p>
&lt;h2 id="hexo主题">Hexo主题&lt;/h2>
&lt;p>Hexo有许多主题，个人采用了官方推荐的 &lt;a href="https://github.com/iissnan/hexo-theme-next">NexT.Pisces&lt;/a>主题，整体风格还是比较简洁的（然而用这个主题的实在是太多了&amp;hellip;随便一个Hexo博客就是Next主题）。&lt;/p>
&lt;p>同时主题内已集成了许多第三方服务，如Google Analysis、DISQUS等，只要改改配置文件就能配置完成，还是相当简单的。&lt;/p>
&lt;h2 id="hexo图片插入指引">Hexo图片插入指引&lt;/h2>
&lt;p>直接用Markdown语法引用图片会导致图片在首页无法显示，官网给出了一个解决方案，就是利用内置的插件，形式如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>{% asset_path slug %}
&lt;/code>&lt;/pre>&lt;p>然而这个方法会破环原生Markdown语法，对编辑者的预览等造成不便。&lt;/p>
&lt;p>很奇怪官方为什么要采用这种方法。&lt;/p>
&lt;p>更好的解决方案是安装&lt;a href="https://github.com/CodeFalling/hexo-asset-image">&lt;strong>hexo-asset-image&lt;/strong>&lt;/a>这个插件。进入博客目录，使用如下命令安装插件：&lt;/p>
&lt;pre tabindex="0">&lt;code>npm install https://github.com/CodeFalling/hexo-asset-image --save
&lt;/code>&lt;/pre>&lt;p>安装完成后，即可使用原生Markdown语法插入图片。&lt;/p>
&lt;h2 id="to-do">To Do&lt;/h2>
&lt;h5 id="已实现功能">已实现功能&lt;/h5>
&lt;ul>
&lt;li>评论，采用DISQUS&lt;/li>
&lt;li>数据统计，采用Google Analytics&lt;/li>
&lt;li>图片显示在首页&lt;/li>
&lt;li>搜索引擎收录，Google Search Console&lt;/li>
&lt;li>首页文章不显示全部&lt;/li>
&lt;li>git配置，&lt;code>hexo g -d&lt;/code>一条命令部署&lt;/li>
&lt;li>&lt;a href="use-ci-auto-deploy-blog.md">使用Travis CI自动生成及部署&lt;/a>&lt;/li>
&lt;/ul>
&lt;h5 id="待实现功能">待实现功能&lt;/h5>
&lt;ul>
&lt;li>更多的自定义操作&lt;/li>
&lt;li>文章访问量统计&lt;/li>
&lt;li>在自己的服务器也部署博客，然后用 CI 实现自动部署&lt;/li>
&lt;li>使用 CDN 加速 Github Pages 的访问&lt;/li>
&lt;li>评论点击加载&lt;/li>
&lt;/ul>
&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>&lt;a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">hexo中完美插入本地图片&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gaodaxiu0406.github.io/2017/08/21/%E4%B8%BAHEXO%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%AF%8F%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E9%87%8F%E7%BB%9F%E8%AE%A1/">为HEXO博客中每篇文章的浏览量统计&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://hexo.io/zh-cn/docs/">Hexo官方文档&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://theme-next.iissnan.com/">NexT使用文档&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://moweide.com/2017/08/27/hexo_next_started/">theme-next!Hexo网站的一次华丽升级&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item></channel></rss>