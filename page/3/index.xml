<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coherence's Blog</title><link>https://blog.coherence.codes/</link><description>Recent content on Coherence's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Tue, 21 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/index.xml" rel="self" type="application/rss+xml"/><item><title>Hackergame 2021 write-up</title><link>https://blog.coherence.codes/posts/2021/hackergame_2021_writeup/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/hackergame_2021_writeup/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2021/hackergame_2021_writeup/ -&lt;p&gt;记录一下比赛期间踩到的坑.&lt;/p&gt;
&lt;h2 id="签到"&gt;签到&lt;/h2&gt;
&lt;p&gt;开始完全没有读题直接进题目, 然后想了半天没思路并随机测试了一些数.. 直到我读了题..&lt;/p&gt;
&lt;h2 id="进制十六参上"&gt;进制十六——参上&lt;/h2&gt;
&lt;p&gt;显然, 大家都知道怎么编辑十六进制, 然而我并不想手输这么多文本, 于是 Google 在线 OCR, 结果 OCR 的内容有部分是错的.. 被迫找同学要了一份 OCR 结果.&lt;/p&gt;
&lt;h2 id="去吧追寻自由的电波"&gt;去吧！追寻自由的电波&lt;/h2&gt;
&lt;p&gt;直接 Google ffmepg 音频速度. 然而很多结果给的一个过滤器是不改变音调的方案, 后来发现直接改采样率就行了..&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;cjc@coherence hackergame_2021&lt;span style="color:#f92672"&gt;]&lt;/span&gt;$ file radio.mp3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;radio.mp3: Audio file with ID3 version 2.4.0, contains: MPEG ADTS, layer III, v1, &lt;span style="color:#ae81ff"&gt;128&lt;/span&gt; kbps, &lt;span style="color:#ae81ff"&gt;48&lt;/span&gt; kHz, Stereo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;cjc@coherence hackergame_2021&lt;span style="color:#f92672"&gt;]&lt;/span&gt;$ ffmpeg -i radio.mp3 -af &lt;span style="color:#e6db74"&gt;&amp;#34;asetrate=16000&amp;#34;&lt;/span&gt; radio_output.mp3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令来自&lt;a href="http://johnriselvato.com/ffmpeg-how-to-change-the-pitch-sample-rate-of-an-audio-track-mp3/"&gt;这里&lt;/a&gt;, 虽然我根本没有看这篇文章..&lt;/p&gt;
&lt;h2 id="猫咪问答-pro-max"&gt;猫咪问答 Pro Max&lt;/h2&gt;
&lt;p&gt;没错, 被第二题坑了.. 以为是第四题不对, 于是写了个暴力跑了几万次..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030151026284.png" alt="image-20211030151026284"&gt;&lt;/p&gt;
&lt;p&gt;提示: 这是一个提示.&lt;/p&gt;
&lt;h2 id="卖瓜"&gt;卖瓜&lt;/h2&gt;
&lt;p&gt;已经被同学提示了这是个 PHP 溢出问题.. 甚至都找到了 (同学给的) &lt;a href="https://www.php.net/manual/zh/language.types.integer.php#125251"&gt;PHP 文档中的一条评论 (甚至题解也给了这个)&lt;/a&gt;, 但是并不知道怎么做.. 于是用 &lt;code&gt;b1=2**63//6+n&lt;/code&gt; (n 为 -10~10 之间的一个随机数) 瞎试做出来了.&lt;/p&gt;
&lt;h2 id="透明的文件"&gt;透明的文件&lt;/h2&gt;
&lt;p&gt;看&lt;a href="https://learnku.com/articles/26231"&gt;这篇文章&lt;/a&gt;学到了一些 ANSI 转义序列的知识. 题解上说只需简单地在 &lt;code&gt;[&lt;/code&gt; 前加上 &lt;code&gt;\x1b&lt;/code&gt; 就行, 然而并不行.. 我的终端并不能解析这些转义序列..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030153759137.png" alt="image-20211030153759137"&gt;&lt;/p&gt;
&lt;p&gt;于是在进行了一些我也忘记了是什么的操作之后终于成功了:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030154033261.png" alt="image-20211030154033261"&gt;&lt;/p&gt;
&lt;p&gt;只记得 Python 从文件读然后 print 和直接 print 一个字符串的结果还不一样.. (也可能是是否在 REPL 下的区别.. 不管了)&lt;/p&gt;
&lt;p&gt;找个时间可以好好学一学这方面的内容..&lt;/p&gt;
&lt;p&gt;PS: 直接使用 &lt;code&gt;cat transparent.txt | sed 's/\[/\x1b[/g' | sed 's/ /#/g'&lt;/code&gt; 是可以的.. 那看来是 VSCode 的替换的锅了.. 在 VSCode 中我直接用字符串 &lt;code&gt;\x1b&lt;/code&gt; 替换的.. 而 sed 替换出来的是一个字节 &lt;code&gt;\x1b&lt;/code&gt;..&lt;/p&gt;
&lt;h2 id="旅行照片"&gt;旅行照片&lt;/h2&gt;
&lt;p&gt;纯社工题. 第五题题解中说的百度街景里并没有找到.. 小红书发挥了重要作用..&lt;/p&gt;
&lt;h2 id="flag-助力大红包"&gt;FLAG 助力大红包&lt;/h2&gt;
&lt;p&gt;居然真的有人在求助力..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030154537778.png" alt="image-20211030154537778"&gt;&lt;/p&gt;
&lt;p&gt;第一时间就想到了 &lt;code&gt;X-Forwarded-For&lt;/code&gt;. 我以为并不会这么简单, 没想到恰恰是这么简单..&lt;/p&gt;
&lt;p&gt;这题因为题目的请求并发限制还被坑了一会..&lt;/p&gt;
&lt;h2 id="amnesia"&gt;Amnesia&lt;/h2&gt;
&lt;p&gt;没想到题解这么简单, &lt;code&gt;putchar&lt;/code&gt; 一个 char 字符会被分配到栈上, 我还用了一个很魔法的方法..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030164358742.png" alt="image-20211030164358742"&gt;&lt;/p&gt;
&lt;p&gt;这样似乎能强制把 b 数组放到 .text 段上..&lt;/p&gt;
&lt;p&gt;第二问显然我不会..&lt;/p&gt;
&lt;h2 id="图之上的信息"&gt;图之上的信息&lt;/h2&gt;
&lt;p&gt;基本没遇到什么障碍, Google 到 &lt;a href="https://stackoverflow.com/questions/34199982/how-to-query-all-the-graphql-type-fields-without-writing-a-long-query"&gt;How to query all the GraphQL type fields without writing a long query?&lt;/a&gt; 之后试了几分钟就试出来了.&lt;/p&gt;
&lt;h2 id="easy-rsa"&gt;Easy RSA&lt;/h2&gt;
&lt;p&gt;get_p 用一下 &lt;a href="https://en.wikipedia.org/wiki/Wilson%27s_theorem"&gt;Wilson&amp;rsquo;s theorem&lt;/a&gt; 就行, 但 get_q 直到比赛结束还没想出来.. 还是数理基础不够扎实(&lt;/p&gt;
&lt;p&gt;原来 get_q 也是一次 RSA 的加密过程! 我还一直在试图解 $value_q = q^e mod\ n$ 这个方程.. (能解出来就有鬼了)&lt;/p&gt;
&lt;p&gt;那么现在虽然我还不懂 RSA 的正确性, &lt;del&gt;我已经完全掌握 RSA 了&lt;/del&gt;.&lt;/p&gt;
&lt;h2 id="加密的-u-盘"&gt;加密的 U 盘&lt;/h2&gt;
&lt;p&gt;一开始各种 Google &lt;code&gt;luks exploit&lt;/code&gt;, &lt;code&gt;luks attack&lt;/code&gt;, 但是总感觉这么一个应用广泛的标准有明显的漏洞不太可能.. 直到我读了一下 &lt;code&gt;man cryptsetup&lt;/code&gt;..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030160044184.png" alt="image-20211030160044184"&gt;&lt;/p&gt;
&lt;p&gt;从题解中我得知了 LUKS 使用 passphrase 用来加密 master key, master key 加密全盘文件, 这是为了避免改 passphrase 时重新加密全盘的开销.&lt;/p&gt;
&lt;h2 id="赛博厨房"&gt;赛博厨房&lt;/h2&gt;
&lt;p&gt;Level 0 和 1 很简单.&lt;/p&gt;
&lt;p&gt;从同学处得到的提示每日菜谱是根据哈希来的, 于是写了个暴力, 然而跑了几个小时都没跑出结果..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030175312389.png" alt="image-20211030175312389"&gt;&lt;/p&gt;
&lt;p&gt;题解确实是暴力.. 但是我这样枚举是不对的, 因为菜谱是哈希, 所以只要稍微改一点点程序就能得到一个不一样的菜谱, 然后赌哈希的结果.. (相当于工作量证明了..)&lt;/p&gt;
&lt;p&gt;Level 3 显然看都没看..&lt;/p&gt;
&lt;h2 id="阵列恢复大师"&gt;阵列恢复大师&lt;/h2&gt;
&lt;p&gt;尝试暴力了一下磁盘顺序, 看了题解发现离正确答案还有很远.. 比如 chunk 的大小, 文件系统类型 (这两个我想到了, 但不知道怎么获得), &lt;code&gt;mdadm --build&lt;/code&gt; 和 &lt;code&gt;mdadm --create&lt;/code&gt; 的区别..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030175155176.png" alt="image-20211030175155176"&gt;&lt;/p&gt;
&lt;h2 id="马赛克"&gt;马赛克&lt;/h2&gt;
&lt;p&gt;尝试了一下最后只把定位点给恢复出来了.. 题解的思路是暴力枚举, 思路确实很简单, 难的是实现..&lt;/p&gt;
&lt;h2 id="minecraft"&gt;minecRaft&lt;/h2&gt;
&lt;p&gt;扫了一遍源码发现核心逻辑应该是在 flag.js 中. 打开一看经典混淆了.. 操作了一番 (指替换变量名) 后尝试把 &lt;code&gt;gyflagh&lt;/code&gt; 函数的返回改成 &lt;code&gt;true&lt;/code&gt;, 发现并没有用. 那看来是要解密那个字符串了..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030161245519.png" alt="image-20211030161245519"&gt;&lt;/p&gt;
&lt;p&gt;核心逻辑在 code 函数里:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030161353309.png" alt="image-20211030161353309"&gt;&lt;/p&gt;
&lt;p&gt;本以为这个过程是不可逆的, 但最后一天仔细看了一下后发现第 68 行 array_a[0] 的操作中只涉及了 array_a[1], 第 71 行也是同理, 于是只要简单地减一下就行了.&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030161717407.png" alt="image-20211030161717407"&gt;&lt;/p&gt;
&lt;p&gt;还好几个辅助函数比如 &lt;code&gt;LongToBase16&lt;/code&gt;, &lt;code&gt;Base16ToLong&lt;/code&gt; 没有混淆.. 不然肯定做不出了..&lt;/p&gt;
&lt;h2 id="其他"&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;震惊! 排行榜上有选手公然发题解!&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030145149135.png" alt="image-20211030145149135"&gt;&lt;/p&gt;
&lt;p&gt;嗯.. 看昵称就知道是什么了..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后校内排名 29, 总排名推测一下应该在 100~200 之间&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030165413748.png" alt="image-20211030165413748"&gt;&lt;/p&gt;
&lt;p&gt;全靠 web 和 general 拿分..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不过在第一天甚至短暂地冲到过第一, 人生巅峰.jpg&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030165521990.png" alt="image-20211030165521990"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://blog.coherence.codes/posts/2021/hackergame_2021_writeup/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>2020年终总结&amp;2021展望</title><link>https://blog.coherence.codes/posts/2021/2020summary_2021plan/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/2020summary_2021plan/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2021/2020summary_2021plan/ -&lt;p&gt;又到了传统艺能&lt;del&gt;年终&lt;/del&gt;年初总结时间, 在一天鸽一天的情况之下, 今天已经是正月十四了..&lt;/p&gt;
&lt;h2 id="2020-总结"&gt;2020 总结&lt;/h2&gt;
&lt;p&gt;一句话总结的话, 知识的广度提升了, 深度还不够, 学习状态仍旧不能让自己满意. 以及这一年我始终在担心有没有学上, 找不找得到工作.&lt;/p&gt;
&lt;h3 id="学业"&gt;学业&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于疫情的爆发, 导致了 2020 春季学期完全在家上课, 更加方便摸鱼了(&lt;/p&gt;
&lt;p&gt;一开始港哥在群里说武汉疫情的时候, 我还不觉得这是什么大事, 后来才发现我错得离谱.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二月底到三月初, 陆续投了几个实习, 被拒了几个, 后来决定考研之后, 又鸽了几个&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210225125307219.png" alt="image-20210225125307219"&gt;&lt;/p&gt;
&lt;p&gt;说实话我对以后能不能找到工作还是有点怀疑的..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从三月开始, 断断续续地开始准备考研了, 然而实际上还是不够努力吧, 到考试前一天我还没完全搞懂二次型..&lt;/p&gt;
&lt;p&gt;不过从时间上来说, 暑假之后就全力准备考研了..&lt;/p&gt;
&lt;p&gt;我很想说考研让我变得更沉得下心来学习了, 但事实上这并不是真的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只准备了两三天之后 (因为太晚看到了), 尝试申请了一下 GSoC, 不出意外凉了..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;七月到十月, 参加开源之夏, 也算是赚到了人生的第一桶金吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="玩"&gt;玩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一月, 去滑雪+攀岩, 还是挺有意思的&lt;/li&gt;
&lt;li&gt;二月初, 折腾了一下 Windows 10 on Arm for Lumia 1520, 并没有什么用, 于是继续吃灰&lt;/li&gt;
&lt;li&gt;七月, 乘着沪通铁路的开通, 去上海玩了一次, 居然被我碰到了一次高铁延误..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="环境"&gt;环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二月末, 开始搞 Manjaro, 一开始两个系统都用, 逐渐就只用 Linux 了 (特别是我发现了 proton 和 lutris 之后..)&lt;/li&gt;
&lt;li&gt;三月初, 开始尝试 Typora+第三方云同步&lt;/li&gt;
&lt;li&gt;七月, 从 Onedrive 转向 Syncthing (是不是有一种 Anything can be self-hosted 的趋势呢..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="书"&gt;书&lt;/h3&gt;
&lt;p&gt;本年度仍然没有怎么看书..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看完了心理学与生活, 心理学啊, exciting&lt;/li&gt;
&lt;li&gt;看完了 Dark Forest&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="代码"&gt;代码&lt;/h3&gt;
&lt;p&gt;总的来说, 感觉自己乱七八糟的项目一堆, 却没什么拿得出手的..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zaobot, 基本一整年都在维护 (虽然目前的代码还是挺是💩的, 打算再次重构&lt;/li&gt;
&lt;li&gt;云盘在年初把后端重构了一下, 后来就鸽了 (事实上我这是重复造轮子, seafile 的体验就很好..)&lt;/li&gt;
&lt;li&gt;pip, 四五月吧, 修了一些 bug, 做了点微小的贡献, 主要还是 codebase 没太理解..&lt;/li&gt;
&lt;li&gt;Hackergame, 七到九月, 后端应该基本可用了, 然后答应的前端鸽了.. 当时天天看文档..&lt;/li&gt;
&lt;li&gt;九十月考研的时候, 稍微学了一点 Anki, 为了自己用得顺手, 写了一个小插件.&lt;/li&gt;
&lt;li&gt;建了个&lt;a href="https://github.com/cjc7373/my_scripts"&gt;仓库&lt;/a&gt;写一些日常使用的脚本, 然而目前觉得可以全扔 Ansible 里..&lt;/li&gt;
&lt;li&gt;花&lt;del&gt;半个小时&lt;/del&gt;三天写了个课程评价, 然而并没有人用..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="学习"&gt;学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;年中, 学了下小鹤双拼, 虽然似乎打字速度没快多少..&lt;/li&gt;
&lt;li&gt;十一月, 终于把 Learning How To Learn 学完了, 然而我学到了什么呢..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="剁手"&gt;剁手&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一月初, 本来已经买了联想小新 Pro 13, 然而压感触控的体验不是很好, 又碰到了下方向键有概率用不了的问题, 于是退了..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一月, 购置了网件 R7900p, 终于能在电视上用 smb 看电影不卡了.. 然而 ipv6 是个坑..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二月, 捡了个洋垃圾 Surface 3, 虽然电池有坑, 但是 Surface 总体还是可以的. 后来出了.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;六月中, 入手了 Surface Pro 7, 除了续航有点差其他都很满意. 18 年开始就种下的草 (指买轻薄本) 终于拔了.&lt;/p&gt;
&lt;p&gt;附一张合照:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210225152027832.png" alt="image-20210225152027832"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十一月, 由于创新 IE3P 的线老是掉, 我终于买了个无线耳机, Galaxy Bud+.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="财务"&gt;财务&lt;/h3&gt;
&lt;p&gt;基金今年还是没怎么动, 看着大盘涨.. 稍微学了点投资的知识.&lt;/p&gt;
&lt;p&gt;记账方面, Spendee 在年中放弃了, 因为感觉意义不大. 后来知道了 Plain Text Accounting, 于是学了点 Beancount, 不过还没应用到实践中.&lt;/p&gt;
&lt;h3 id="其他"&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src="./image-20210225144517669.png" alt="image-20210225144517669"&gt;&lt;/p&gt;
&lt;p&gt;事实证明这是很好的追踪一个问题的工具..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210225150738841.png" alt="image-20210225150738841"&gt;&lt;/p&gt;
&lt;p&gt;但是浏览条目还是有些不爽 (比较慢)..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;六月, 开始用 KeePassXC 管理密码.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暑假里, 看了人类星球, 自然与人文纪录片交汇的佳作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020 秋季学期运动的次数显著增加了, 经常会去打打羽毛球.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十月, 和 Moo 在北门合租了, 环境比之前在樱花广场好了很多..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十二月, 用 rsync 删了一波自己的 home 目录, 血的教训.. 没想到我也有删库的一天..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这一年没怎么管博客, 因为考研, 外加想着迁移 Pelican, 结果又挖了一个大坑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2021-计划"&gt;2021 计划&lt;/h2&gt;
&lt;p&gt;还有两天考研出分了.. 说实话挺害怕的.. 考不上就只能找工作了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今年还是想尝试一下 GSoC, 到四月中旬申请结束还有一个半月.. 努力去混混脸熟吧.&lt;/li&gt;
&lt;li&gt;事实上, 我还有一堆开的坑, 包括但不限于:
&lt;ul&gt;
&lt;li&gt;给 Wikipedia 贡献一个优良条目的翻译&lt;/li&gt;
&lt;li&gt;写个 (或者找找) 各板块指数的 PB 中值温度计.&lt;/li&gt;
&lt;li&gt;所有 VPS 都使用 Ansible 维护&lt;/li&gt;
&lt;li&gt;写一个 Pelican 的主题, 类似 &lt;a href="https://github.com/amazingrise/hugo-theme-diary"&gt;diary&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;学习 CSAPP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;毕设, 写一个第三方网易云, 毕竟是自己提的项目, 还是要好好写的.. 这又是一大堆不熟悉的技术栈..&lt;/li&gt;
&lt;li&gt;还是要多看点书..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不管怎么样, 我还是要以更加积极的心态去迎接未来. 冲!&lt;/p&gt;
- https://blog.coherence.codes/posts/2021/2020summary_2021plan/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Anki 工作流</title><link>https://blog.coherence.codes/posts/2021/anki_workflow/</link><pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/anki_workflow/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2021/anki_workflow/ -&lt;p&gt;&lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt; 是一个间隔式重复的&amp;quot;闪卡 (flashcard)&amp;ldquo;记忆软件. 下面来谈谈我考研及日常生活中的 Anki 工作流.&lt;/p&gt;
&lt;h2 id="为什么选择-anki"&gt;为什么选择 Anki&lt;/h2&gt;
&lt;p&gt;和市面上其他的记忆软件一样, Anki 也是基于遗忘曲线, 基于间隔式重复这一原理的. 最大的不同在于它是高度自定义的. 自己制作卡组, 设计模板, 甚至编写自己的插件. 还有很多特性例如 Notes 和 Cards 相分离我其实并没有用到.&lt;/p&gt;
&lt;p&gt;其次 Anki 是一款开源软件, 在我希望所有软件都用自由软件替换的如今, 这无疑是一个重要的理由.&lt;/p&gt;
&lt;p&gt;最后它在 Windows, Linux, Android 上都有客户端, 并支持同步. 虽然内置的同步服务器是由 Ankiweb 提供的 (我至今不知道 Ankiweb 和 Anki 的关系以及它是如何运作的), 然而也能够用自建的替换.&lt;/p&gt;
&lt;p&gt;虽然网上能够找到很多已制作好的卡组, 然而这些卡组并不一定适合自己. 以记单词而言, 卡组中的许多卡片都是自己已经熟知的. 况且制卡这个过程本身能够帮助自己记忆. 所以我还是选择了自己构建卡组的方式.&lt;/p&gt;
&lt;h2 id="基础卡片"&gt;基础卡片&lt;/h2&gt;
&lt;p&gt;对于一般的记忆来说, 基础的 Note type 就够用了.. 比如我一开始用 Anki 来提醒我复习新概念英语, 用的是以下的 Note type:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210224200941341.png" alt="image-20210224200941341"&gt;&lt;/p&gt;
&lt;p&gt;十分简单.&lt;/p&gt;
&lt;h2 id="考研"&gt;考研&lt;/h2&gt;
&lt;p&gt;考研的时候打算用 Anki 背单词, 于是我做真题的时候碰到不认识的单词记录下来, 然后用 Anki 制卡.&lt;/p&gt;
&lt;p&gt;卡片字段设计和工作流受到了&lt;a href="https://ankiweb.net/shared/info/934622764"&gt;考研英语真题生词&lt;/a&gt;这个卡组的启发.&lt;/p&gt;
&lt;p&gt;其中最主要的问题是音标, 发音和释义. 一开始想的办法是发音用 TTS, 于是找到了 Azure 的 API, 然而一个缺点是每次制卡要等很久 (请求 API), 而且 Azure 的 API 很贵.. 我给一个几百张卡的卡组加发音花了我五块钱..&lt;/p&gt;
&lt;p&gt;于是我就想到了从词典中导入, 我平时主要使用的词典是 OALD8 (很久之前从 &lt;a href="https://www.pdawiki.com/forum/"&gt;pdawiki&lt;/a&gt; 下的), 于是我就自己糊了个&lt;a href="https://ankiweb.net/shared/info/738556640"&gt;插件&lt;/a&gt;.. 功能很简单, 根据单词字段从词典 mdx 文件里查询音标和发音, 并填充到相应字段中.&lt;/p&gt;
&lt;p&gt;最后的成品卡片是这样的:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210224201415659.png" alt="image-20210224201415659"&gt;&lt;/p&gt;
&lt;p&gt;制卡的时候首先手打单词和例句, 然后从词典里选一个释义复制过来就行了. 个人感觉也不是很麻烦..&lt;/p&gt;
&lt;p&gt;看一下成果:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210224202958005.png" alt="image-20210224202958005"&gt;&lt;/p&gt;
&lt;p&gt;考研的那一百多天里我总共背了 364 个单词.. 其实挺少的..&lt;/p&gt;
&lt;p&gt;之后的卡组中我优化了一下 Note 的字段, 于是现在变成了这样:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210224201845315.png" alt="image-20210224201845315"&gt;&lt;/p&gt;
&lt;h2 id="咕咕咕时间"&gt;咕咕咕时间&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;释义的导入我肯定也想自动化的. 而选择释义势必要做一个弹窗, 那么这就涉及到 Qt 的知识了, 于是目前搁置了&lt;/li&gt;
&lt;li&gt;有的单词不同的词性有不同的发音, 这个也没有处理..&lt;/li&gt;
&lt;li&gt;有一个 &lt;a href="https://github.com/ninja33/ODH"&gt;chrome 插件&lt;/a&gt;已经基本上把我想做的都实现了, 可以借鉴一下..&lt;/li&gt;
&lt;/ul&gt;
- https://blog.coherence.codes/posts/2021/anki_workflow/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Codeforces Round 634 (Div. 3) 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/</link><pubDate>Sun, 19 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/ -&lt;h2 id="1335a---candies-and-two-sisters"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/A"&gt;1335A - Candies and Two Sisters&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;快乐签到。&lt;/p&gt;
&lt;h2 id="1335b---construct-the-string"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/B"&gt;1335B - Construct the String&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先构造长度为 $a$ 的字符串，然后第 $i+a$ 个字母为第 $i$ 个字母，输出即可。&lt;/p&gt;
&lt;h2 id="1335c---two-teams-composing"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/C"&gt;1335C - Two Teams Composing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2/1 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给 $n$ 个数，每个数有一个值，要求把它们分成数量相同的两组，一组所有的值相等，一组所有的值不等。&lt;/p&gt;
&lt;p&gt;先统计每个值的数量，得出最大个数 $m$，和不同值的数的个数 $l$，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ans = min(l, m) if m &amp;lt; l + 2 else ans = min(l, m) + 1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="1335d---anti-sudoku"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/D"&gt;1335D - Anti-Sudoku&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个求解好的数独，求改动不超过 9 个数，使其每行、列、区块内皆有两个相同的数。&lt;/p&gt;
&lt;p&gt;想了两分钟，发现将所有的 1 替换为 2 即可。&lt;/p&gt;
&lt;h2 id="1335e---three-blocks-palindrome"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/E2"&gt;1335E - Three Blocks Palindrome&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Not Attempted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个含有$n$个数的序列，定义三区块的回文数为：$[\underbrace{a, a, \dots, a}&lt;em&gt;{x}, \underbrace{b, b, \dots, b}&lt;/em&gt;{y}, \underbrace{a, a, \dots, a}_{x}]$，$x, y$是大于等于0的整数，a可以等于b。求一个最长子序列使它为三区块的回文数。输出长度。&lt;/p&gt;
&lt;p&gt;又是一道需要神奇的优化的题。。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200416163610781.png" alt="image-20200416163610781"&gt;&lt;/p&gt;
&lt;p&gt;按官方题解的思路是这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stdin&lt;span style="color:#f92672"&gt;.&lt;/span&gt;readline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; n &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[] &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev[j][i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; prev[j][i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev[s[i]][i] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos[s[i]]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# if x == 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans, len(pos[i]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# if x != 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, (len(pos[i]) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; k &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(m, prev[k][pos[i][&lt;span style="color:#f92672"&gt;-&lt;/span&gt;j]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; prev[k][pos[i][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans, m &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; j)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(ans)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是超时了。翻别人的代码发现创建prev数组还能优化：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stdin&lt;span style="color:#f92672"&gt;.&lt;/span&gt;readline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[] &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev[i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; prev[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;copy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prev[i][s[i]] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos[s[i]]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# if x == 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans, len(pos[i]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# if x != 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, (len(pos[i]) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; k &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;201&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(m, prev[pos[i][&lt;span style="color:#f92672"&gt;-&lt;/span&gt;j]&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][k] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; prev[pos[i][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]][k])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans, m &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; j)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(ans)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;700多ms过了。。&lt;/p&gt;
- https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Codeforces Round 629 (Div. 3) 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/</link><pubDate>Sun, 12 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/ -&lt;p&gt;快乐划水。&lt;/p&gt;
&lt;h2 id="1328a---divisibility-problem"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/A"&gt;1328A - Divisibility Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;快乐签到。&lt;/p&gt;
&lt;h2 id="1328b---k-th-beautiful-string"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/B"&gt;1328B - K-th Beautiful String&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个数n，要求构造一个字符串，包含n-2个a，2个b，且在这个字符串的按字典序的全排列中排在第k个。&lt;/p&gt;
&lt;p&gt;找b的位置即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n, k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; p &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(max(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (p &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; (k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; int(((p &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (p &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; pos1 &lt;span style="color:#f92672"&gt;or&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; pos2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1328c---ternary-xor"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/C"&gt;1328C - Ternary XOR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个三进制数x，求两个数a，b，使这两个数的异或为x，且max(a, b)最小。&lt;/p&gt;
&lt;p&gt;从左往右对每一位考虑最优解，若是0或2，则平均分配，若为1，则分配到0的那方获得接下来所有的数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; input()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(len(x)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; x[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;or&lt;/span&gt; x[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans1 &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; str(int(x[i]) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans2 &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; str(int(x[i]) &lt;span style="color:#f92672"&gt;//&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans1 &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans2 &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, len(x)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans1 &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans2 &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; x[j]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(ans1, ans2, sep&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1328d---carousel"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/D"&gt;1328D - Carousel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Not Attempted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大概是能做的，只是到了十二点太困了。。就睡觉去了。&lt;/p&gt;
&lt;p&gt;n个动物围成一圈，相邻的不同动物要有不同的颜色，求最少的颜色和对应的颜色序列。&lt;/p&gt;
&lt;p&gt;考虑几种情况：所有动物都相同，总数为偶数，总数为奇数但存在相邻的相同动物，总数为奇数且不存在相邻的相同动物。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; figure &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; figure&lt;span style="color:#f92672"&gt;.&lt;/span&gt;count(figure[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; n:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;1 &amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;elif&lt;/span&gt; n &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; figure[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; figure[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]: &lt;span style="color:#75715e"&gt;# -1 即最后一个&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; flg &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; flg:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print((i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1328e---tree-queries"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/E"&gt;1328E - Tree Queries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Not Attempted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一棵树，有m个查询，每个查询给出树上的一些节点，若有一条从根节点出发的路径，使这些节点属于这条路径或和这条路径上某个点的距离为一，输出 YES，否则为 NO。&lt;/p&gt;
&lt;p&gt;补题的时候都是泪。按题解写了个 dfs 序，然后对每个查询去它的父节点，对每个节点检查其是否为最深的那个节点的祖先。&lt;/p&gt;
&lt;p&gt;然后上来一个 CE：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200406110417718.png" alt="image-20200406110417718"&gt;&lt;/p&gt;
&lt;p&gt;我就奇怪了你为什么不用 utf-8，而且之前交过带中文注释的正常啊。于是把注释改回英文。&lt;/p&gt;
&lt;p&gt;之后是无尽的 RE 和 TLE。分析了一波复杂度没毛病啊，只能是优化的锅了。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200406110610535.png" alt="image-20200406110610535"&gt;&lt;/p&gt;
&lt;p&gt;看了别人的代码，主要是两点：用栈模拟 dfs 和输入使用&lt;code&gt;input = sys.stdin.readline&lt;/code&gt;。试了一下确实，直接 dfs 会爆栈空间，不优化输入会 TLE。&lt;/p&gt;
&lt;p&gt;最终结果可以看出，PyPy 和 CPython 差距还是挺大的。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200406110757605.png" alt="image-20200406110757605"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stdin&lt;span style="color:#f92672"&gt;.&lt;/span&gt;readline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;n, m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tree &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[] &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; u, v &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tree[u]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(v)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tree[v]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(u)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tout &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;par &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dep &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;stack &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; stack:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; to, parent, depth, state &lt;span style="color:#f92672"&gt;=&lt;/span&gt; stack&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pop()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; state:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; par[to] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parent
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dep[to] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; depth
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tin[to] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; t
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stack&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append((to, parent, depth, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; tree[to]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; parent: &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stack&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append((i, to, depth&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tout[to] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; t
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# print(f&amp;#34;tin={tin}\ntout={tout}&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# replace every non-root vertex with its parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; query &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [par[int(i)] &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;del&lt;/span&gt;(query[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fv &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; max_dep &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; query:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# search the deepest vertex fv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; dep[i] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; max_dep:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; max_dep &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dep[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fv &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# for every vertex, should be fv&amp;#39;s parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; query:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; (tin[i] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; tin[fv] &lt;span style="color:#f92672"&gt;and&lt;/span&gt; tout[fv] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; tout[i]):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flg &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; flg: print(&lt;span style="color:#e6db74"&gt;&amp;#34;NO&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;: print(&lt;span style="color:#e6db74"&gt;&amp;#34;YES&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1328f---make-k-equal"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/F"&gt;1328F - Make k Equal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Not Attempted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给 n 个数，给一个数 k &amp;lt;= n，要使得至少 k 个数相等。有两种操作：使一个最小的数 +1，使一个最大的数 -1。求最少的操作数。&lt;/p&gt;
&lt;p&gt;根据&lt;a href="https://www.cnblogs.com/st1vdy/p/12579249.html"&gt;这篇题解&lt;/a&gt;，本题一共三种情况，给最大值 -1，给最小值 +1，同时进行两种操作（此时一定有 $a_1=a_n$ ）。（这个解法感觉比官方的还要好）&lt;/p&gt;
&lt;p&gt;第一和第二种情况类似，将最左（右）边的 k 个数变为一致即可。第三种情况下，$\sum_{i=1}^{\frac{n}{2}}(a_{n-i}-a_i)$即将所有数变为相同（但是如果 n 为奇数，中间那个数怎么办？待考虑。。但结果是对的），但我们只需要 k 个，所以减去$n-k$。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stdin&lt;span style="color:#f92672"&gt;.&lt;/span&gt;readline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;n, k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;a&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sort()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; a[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; a[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exit(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# suppose val is the number where k numbers are the same&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# case 1, turn the leftmost k numbers to val (or val-1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; a[k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; a[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;): &lt;span style="color:#75715e"&gt;# if a[k-1] have many same numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; a[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; a[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# case 2, turn the rightmost k numbers to val (or val-1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;a_reverse &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a[::&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;(a_reverse[k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; a_reverse[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(k&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; a_reverse[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; a_reverse[i&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# case 3, all the numbers are val or val-1 or val+1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n&lt;span style="color:#f92672"&gt;//&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; a[n&lt;span style="color:#f92672"&gt;-&lt;/span&gt;i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; a[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;m &lt;span style="color:#f92672"&gt;-=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; k
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(min(l, r, m))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>博客图片文件夹迁移</title><link>https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/</link><pubDate>Wed, 01 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/ -&lt;p&gt;我原来的博客文件夹结构是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200328175914444.png" alt="image-20200328175914444"&gt;&lt;/p&gt;
&lt;p&gt;博文数量少的时候，还挺直观，但是数量一多，看着就很杂乱，因此，萌生了重新归类的想法。&lt;/p&gt;
&lt;p&gt;思路大概是这样：按年份归类，然后图片统一放到当前目录下的&lt;code&gt;images&lt;/code&gt;文件夹里。&lt;/p&gt;
&lt;h2 id="实践"&gt;实践&lt;/h2&gt;
&lt;p&gt;脚本的逻辑大概是对每一篇博文，寻找其元数据的 date 字段，将其移动到对应的文件夹下，同时对同名的文件夹也进行递归移动。由于图片都是相对引用的，所以不会出问题。（即使出了咱还有 git）&lt;/p&gt;
- https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Kickstart 2020 Round A 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/</link><pubDate>Thu, 26 Mar 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/ -&lt;p&gt;第一次打Kickstart，体验还是很不错的。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7"&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;迟了几分钟进比赛，发现前十已经两题AC了。&lt;/p&gt;
&lt;h2 id="allocation"&gt;Allocation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;签到题，排序后从大到小输出即可。&lt;/p&gt;
&lt;h2 id="plates"&gt;Plates&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2/0 TLE, WA&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;N叠盘子，每叠K个，每个盘子有一个beauty值，从中取P个，但对于每叠只能从上到下取，求beauty值最大为多少。&lt;/p&gt;
&lt;p&gt;先写了一个每次取最大的，WA，发现不对，然后去做第三题了。后又写了个dfs，TLE了。当时心态有点崩，因为TOP 10基本是两分钟AC，想到DP，但没有深入想。&lt;/p&gt;
&lt;p&gt;官方题解是对于每一叠盘子，先预处理前n个的beauty值和sum，然后对于每一个状态&lt;code&gt;dp[i][j]&lt;/code&gt;，即在前i叠盘子和取j个盘子时能取到的最大值，有状态转移方程&lt;code&gt;dp[i][j] = max(dp[i][j], sum[i][x]+dp[i-1][j-x])&lt;/code&gt;。循环求dp即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; out &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Case #&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n, k, p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append([int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append([&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; a[i]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; j
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum[i]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(s)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (p&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (p&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, p&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(min(j&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(dp[i][j], sum[i][x] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; dp[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;x])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans, dp[i][p])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; out &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; str(ans)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="workout"&gt;Workout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2/1 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个递增的数列，插入K个值，求每两个值的差的最小值。&lt;/p&gt;
&lt;p&gt;这道题和我校2017新生赛的一题类似，对结果二分即可。&lt;/p&gt;
&lt;h2 id="bundling"&gt;Bundling&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Not Attempted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把N个字符串分成K组，每组的分数为最长公共前缀的长度，求全局最高分。&lt;/p&gt;
&lt;p&gt;直接进行分组比较困难，我们可以考虑每组的分数同时也是共同前缀的个数。那么对于每个前缀，若有p个单词拥有这个前缀，则这个前缀会给结果贡献&lt;code&gt;p // K&lt;/code&gt;分。由此求字符串中的每个前缀和拥有这个前缀的字符串数即可。&lt;/p&gt;
&lt;p&gt;使用前缀树可很容易求得。一开始我的做法是递归这棵树，用了两种写法都RE了，Google了一圈找到测试数据会导致爆栈，故采用了list来模拟栈遍历。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; out &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Case #&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n, k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tree &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#39;pre_num&amp;#39;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; word &lt;span style="color:#f92672"&gt;=&lt;/span&gt; input()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tree
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; c &lt;span style="color:#f92672"&gt;in&lt;/span&gt; word:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cur&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setdefault(c, {&lt;span style="color:#e6db74"&gt;&amp;#39;pre_num&amp;#39;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur[&lt;span style="color:#e6db74"&gt;&amp;#39;pre_num&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stack &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [tree]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; len(stack):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; node &lt;span style="color:#f92672"&gt;=&lt;/span&gt; stack&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pop()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; node[&lt;span style="color:#e6db74"&gt;&amp;#39;pre_num&amp;#39;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;//&lt;/span&gt; k
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; node:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;pre_num&amp;#39;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stack&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(node[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; out &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; str(s)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>2019年终总结&amp;2020展望</title><link>https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/</link><pubDate>Sat, 01 Feb 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/ -&lt;p&gt;又是一年一度的年终总结时间了，进入二十一世纪的第二个十年，我的心情十分激动……&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;好吧，激动是假的。时空是连续的，进入2020和平常的一天没有任何区别。转眼间已经来到了庚子鼠年的大年初八，我恍然记得我的年终总结还没有写，于是准备把这个传统艺能发扬下去，也看一看2019定的目标完成了多少。&lt;/p&gt;
&lt;h2 id="2019-总结"&gt;2019 总结&lt;/h2&gt;
&lt;p&gt;时间及事件依据：印象笔记、Google 相册、我的记忆、Telegram。&lt;/p&gt;
&lt;p&gt;事件尽量归类，未归类的大致以时间顺序排列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;找到了一个&lt;del&gt;记录生活&lt;/del&gt;吐槽的平台。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200201201451074.png" alt="image-20200201201451074"&gt;&lt;/p&gt;
&lt;p&gt;这个channel的内容输入延续至今。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一月，金工实习和数学建模美赛，虽然没学到什么，还是挺有意思的。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200201202345974.png" alt="image-20200201202345974"&gt;&lt;/p&gt;
&lt;p&gt;图为某数控机床。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月上旬，重新开始在印象笔记写日记。三月末更换至纸质方式。&lt;/p&gt;
&lt;p&gt;之后觉得日记意义不大，更换为每日计划，但是没有坚持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月，在外租房居住。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月和十二月，分别安排了我校ACM的校赛和新生赛。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src="./image-20200201215603263.png" alt="image-20200201215603263"&gt;&lt;/p&gt;
&lt;p&gt;请记住我这句话，都是泪。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寒假里把N1刷了一遍OMV，但存储只有一个U盘。暑假刷回了无灯的固件，买了个硬盘盒+320G机械，勉强能当NAS来用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ingress，从入坑到弃坑，大概是二月到五月的事。&lt;del&gt;（其实以前玩过&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;因为这个游戏还出去玩了挺多次的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月末，开始入坑Arch Linux。&lt;/p&gt;
&lt;p&gt;然后发现这是个巨坑。（折腾万岁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;投资方面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和去年没多大变化吧。看的还是那两个人，还是没有系统地学经济学。只不过跟着大盘走盈利了一些罢了。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200222105649825.png" alt="image-20200222105649825"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;英语方面。自我感觉英语能力有了较大提升。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;年度英美刷剧（和去年总结对比了一下）：Friends二刷，The Newsroom，Person of Interest 两季，The IT Crowd一季多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十月份想去考一考托福，大概也学了一段时间，后来无限期搁置了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Kindle读原著方面，把三体一看完了，又开了个哈利波特的坑，也看完了第一部。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我看了多少书？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;买了好多书。&lt;del&gt;（然而都没有看&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Linux&amp;amp;Unix大学教程基本看完了。后来又买了本鸟哥的，还没看。&lt;/li&gt;
&lt;li&gt;Head First with HTML&amp;amp;CSS 还剩最后两章没看。&lt;/li&gt;
&lt;li&gt;Computer Networking: A Top-down Approach，18年7月在图书馆里借了第五版影印版，一年基本没看，大三上由于要学计算机网络，好歹看了点，后又从淘宝打印了第七版英文版，看了三分之二左右。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四月初，启用了Digital Wellbeing，但是并没有起到限制玩手机时间的作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四月末，参加了一次西安GDG活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;剁手记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二月初，给家中置换了一个新的显示器，淘汰了老AOC 21&amp;rsquo; 1680*1050 服役十二年的历史。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./image-20200201203042582.png" alt="image-20200201203042582"&gt;&lt;/p&gt;
&lt;p&gt;图为 AOC 27&amp;rsquo; 4K 某型号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二月，给笔记本加了根8G的内存。年末的时候这个价钱可以买到16G的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四月末，出售 Bose Sleepbuds。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;八月末，入手人生中第一台相机，Sony α7m2，带28-70镜头。于是周末又有很多次出去拍照。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本年度还是没有换笔记本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十月末，在宿舍购置了显示器，同样是AOC（因为便宜），27&amp;rsquo; 2K 带Type-C接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双十一期间，购置了东芝RC500 500G固态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;陆续参加了天文协会的几次活动。知识竞赛，航天厂科普，石门山野观。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大三上开学初，想加入一个实验室，后未果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个一年曾多次试图维护QOJ项目，未果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我学了些什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;五月，参加了微信小程序开发大赛。学了一点JS。&lt;/li&gt;
&lt;li&gt;七月初，软通实训。快乐划水半个月。学了点前端，学了点HTTP。&lt;/li&gt;
&lt;li&gt;暑假里，学了点前端（HTML+CSS），帮我爸写了个小软件。&lt;/li&gt;
&lt;li&gt;暑假及大三上的前半学期，在Coursera学完了吴恩达机器学习课。&lt;/li&gt;
&lt;li&gt;同样在Coursera，Learning how to learn 看了一年了还没看完。&lt;/li&gt;
&lt;li&gt;七月末，开始学Vue。&lt;/li&gt;
&lt;li&gt;九月开始，做一个访客认证的项目，学了些认证相关的协议。&lt;/li&gt;
&lt;li&gt;十一月，学了一点正则。&lt;/li&gt;
&lt;li&gt;十一月中旬，学了一点AutoHotkey，自己写了一个简单的脚本，用着还挺舒服的。&lt;/li&gt;
&lt;li&gt;十二月，因软件测试的课程作业学了一点CI/CD和Github Actions。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我写了多少代码？&lt;/p&gt;
&lt;p&gt;​ &lt;img src="./image-20200202132048404.png" alt="image-20200202132048404"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;五月，微信小程序，一个相册。&lt;/li&gt;
&lt;li&gt;十一月开始，作为项目管理课程的大作业，也是我希望我校有的，和同学写了个西大云盘。Vue+Django。&lt;/li&gt;
&lt;li&gt;十一月，Python 课程作业，用Tkinter写了个小软件，调用了一下Bing Map的API显示了个地图。&lt;/li&gt;
&lt;li&gt;十一月末，根据TUNA群的经验写了个zaobot。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记账。这个习惯保持下来了，不过从Excel转移到了Spendee。有好处也有坏处吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统上，从Windows到Win+Arch双系统到Windows+WSL，折腾了很多，却感觉没有深入多少东西。&lt;/p&gt;
&lt;p&gt;重装了好多次系统.. 一开始换专业版重装了一次，换硬盘又重装了一次。配置环境什么就很麻烦。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入门了维基百科的一些原则及基础的编辑方式。但离一个合格的编辑还很远。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;国庆借舍友的Switch打了七天的塞尔达，Switch好感+++&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="去年的年初计划"&gt;去年的年初计划&lt;/h2&gt;
&lt;p&gt;大部分都实现了。&lt;/p&gt;
&lt;h2 id="2020-年初计划"&gt;2020 年初计划&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参与一个开源项目。&lt;/li&gt;
&lt;li&gt;找一个实习。&lt;/li&gt;
&lt;li&gt;考研。&lt;/li&gt;
&lt;li&gt;继续寻找方向。&lt;/li&gt;
&lt;li&gt;多写一些博客，输出自己的知识，同时也提高自己的能力。&lt;/li&gt;
&lt;/ul&gt;
- https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>WSL使用体验</title><link>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Sun, 08 Dec 2019 19:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/ -&lt;p&gt;首先，WSL真香！&lt;/p&gt;
&lt;h2 id="开启wsl"&gt;开启WSL&lt;/h2&gt;
&lt;p&gt;最简单的方式是使用管理员权限运行Powershell，然后输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启电脑，然后在应用商店中安装WSL发行版。&lt;/p&gt;
&lt;h2 id="arch"&gt;Arch&lt;/h2&gt;
&lt;p&gt;注意到WSL是没有Arch Linux发行版的（以前有一个非官方的，很快被下架了），但是我们有办法添加Arch发行版。去&lt;a href="https://github.com/yuk7/ArchWSL"&gt;这个仓库&lt;/a&gt;下载打包好的appx文件和证书，首先将证书导入至受信任的根证书颁发机构，然后安装appx即可。&lt;/p&gt;
&lt;h2 id="体验"&gt;体验&lt;/h2&gt;
&lt;h3 id="坑"&gt;坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认WSL不会读取&lt;code&gt;~/.bashrc&lt;/code&gt;而会读取&lt;code&gt;~/.bash_profile&lt;/code&gt;，所以需要在&lt;code&gt;~/.bash_profile&lt;/code&gt;中写入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[[&lt;/span&gt; -f ~/.bashrc &lt;span style="color:#f92672"&gt;]]&lt;/span&gt; ; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; . ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;才能够正常读取bash配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="netcat"&gt;Netcat&lt;/h3&gt;
&lt;p&gt;首先我Google到的是&lt;code&gt;gnu-netcat&lt;/code&gt;。但是运行时报错&lt;code&gt;nc: core.c:372: core_tcp_connect: Assertion ret == 0' failed.&lt;/code&gt;搜索了&lt;a href="https://github.com/msys2/MSYS2-packages/issues/1030"&gt;相关Issus&lt;/a&gt;之后，我更换成了&lt;a href="https://www.archlinux.org/packages/community/x86_64/openbsd-netcat/"&gt;openbsd-netcat&lt;/a&gt;，问题解决。&lt;/p&gt;
&lt;h3 id="缺点"&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WSL下无法使用Docker等涉及内核的操作，该缺陷在WSL2中被解决。&lt;/li&gt;
&lt;li&gt;默认无图形界面，使用GUI需自己安装X Server，较为麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="windows-terminal"&gt;Windows Terminal&lt;/h2&gt;
&lt;p&gt;注意，截至目前，Windows Terminal仍处于预览阶段，正式发布预计要到2020年4月。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191115231943950.png" alt="image-20191115231943950"&gt;&lt;/p&gt;
&lt;p&gt;安装WSL后，Windows Terminal能够自动识别WSL并添加至可用Terminal列表中。&lt;/p&gt;
&lt;h3 id="bug"&gt;Bug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动Shell后的工作目录为Windows当前用户的Home目录，而非Linux的用户Home目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./image-20191115232130240.png" alt="image-20191115232130240"&gt;&lt;/p&gt;
&lt;p&gt;​ 可以通过在配置文件中加入&lt;code&gt;&amp;quot;commandline&amp;quot; : &amp;quot;wsl ~&amp;quot;&lt;/code&gt;来解决，不过这个方案只适用于默认WSL发行版，对于其他发行版无效，可以通过在&lt;code&gt;.bashrc&lt;/code&gt;中添加一条判断语句来解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows Terminal目前暂无法自动添加至右键菜单上下文，需手动添加注册表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往Terminal中粘贴内容是会自动在行间加空格。（更新：这个bug是由于\r\n与\n的处理问题，在0.7中被解决）&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191115233340872.png" alt="image-20191115233340872"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wsl2"&gt;WSL2&lt;/h2&gt;
&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;
&lt;p&gt;可喜可贺，WSL终于能用Docker了。&lt;/p&gt;
&lt;p&gt;配置镜像源（无systemd）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在配置文件 &lt;code&gt;/etc/default/docker&lt;/code&gt; 中的 &lt;code&gt;DOCKER_OPTS&lt;/code&gt; 中配置Hub地址：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;DOCKER_OPTS=&amp;#34;--registry-mirror=https://docker.mirrors.ustc.edu.cn/&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新启动服务:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id="坑-1"&gt;坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方宣称在18945之后的版本中Windows访问WSL提供的网络服务只需使用localhost即可（服务需绑定之0.0.0.0而不是127.0.0.1，因为实际上这些连接被认为是局域网中的连接）。&lt;/p&gt;
&lt;p&gt;尝试在Docker中使用。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191116233838273.png" alt="image-20191116233838273"&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;netstat -ano&lt;/code&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191116233912110.png" alt="image-20191116233912110"&gt;&lt;/p&gt;
&lt;p&gt;然而在Windows下只能使用IPv6地址访问：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191116233953189.png" alt="image-20191116233953189"&gt;b&lt;/p&gt;
&lt;p&gt;而不能使用IPv4：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191116234023402.png" alt="image-20191116234023402"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无法使用systemd。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pycharm"&gt;Pycharm&lt;/h2&gt;
&lt;p&gt;Pycharm能够将Python解释器设置为WSL中的Python。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191119150317595.png" alt="image-20191119150317595"&gt;&lt;/p&gt;
&lt;p&gt;同时能够将terminal设置为WSL：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191119150135830.png" alt="image-20191119150135830"&gt;&lt;/p&gt;
&lt;p&gt;只需要将Shell path设置成&lt;code&gt;bash.exe&lt;/code&gt;即可。注意设置为&lt;code&gt;arch.exe&lt;/code&gt;等自定义的发行版名称时，无法将当前工作目录传递给Shell。&lt;/p&gt;
&lt;p&gt;注意到由于WSL没有图形界面，无法在Python中运行GUI程序。&lt;/p&gt;
&lt;h3 id="bug-1"&gt;Bug&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;在WSL中安装的包无法被识别：&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191119150405724.png" alt="image-20191119150405724"&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;因此也无法使用这个包的自动补全、查看定义等一系列功能。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/help/pycharm/using-wsl-as-a-remote-interpreter.html"&gt;文档里&lt;/a&gt;写得清清楚楚：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191208194351006.png" alt="image-20191208194351006"&gt;&lt;/p&gt;
&lt;p&gt;我错了，我应该看文档的。安装rsync之后问题解决。&lt;/p&gt;
&lt;h2 id="参考资料"&gt;参考资料&lt;/h2&gt;
- https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>重新安装 Hexo</title><link>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</link><pubDate>Wed, 07 Aug 2019 16:03:29 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/ -&lt;h2 id="缘由"&gt;缘由&lt;/h2&gt;
&lt;p&gt;直接原因是 Github 的一个假装很贴心的功能：&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565183420437.png" alt="1565183420437"&gt;&lt;/p&gt;
&lt;p&gt;由于我的 Hexo 已年代久远，所以有了一堆漏洞，在尝试 Github 的自动修复未果之后，同时也因为当初搞 Hexo 的时候不是很懂，文档也没写好，就决定重新装一遍。&lt;/p&gt;
&lt;h2 id="过程"&gt;过程&lt;/h2&gt;
&lt;h3 id="环境"&gt;环境&lt;/h3&gt;
&lt;p&gt;node.js 6.4.1&lt;/p&gt;
&lt;p&gt;hexo 3.9.0&lt;/p&gt;
&lt;p&gt;hexo-cli 2.0.0&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565186395227.png" alt="1565186395227"&gt;&lt;/p&gt;
&lt;p&gt;官方文档上写需要 node.js 6.9+，然而我是 6.4，不知道会不会锅。&lt;/p&gt;
&lt;h3 id="hexo-安装"&gt;Hexo 安装&lt;/h3&gt;
&lt;p&gt;首先，把仓库 clone 下来后，备份一份源文件。然后找一个空文件夹，按照官方文档的指引，执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hexo init
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（我发现现在 &lt;code&gt;hexo init&lt;/code&gt; 会同时自动执行 &lt;code&gt;npm install&lt;/code&gt;命令了）&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565185528852.png" alt="1565185528852"&gt;&lt;/p&gt;
&lt;p&gt;然而还是有一个漏洞，不管了。&lt;/p&gt;
&lt;p&gt;然后删除原文件夹中文件（保留.git），把新的文件复制过去。同时把备份文件夹中的&lt;code&gt;source&lt;/code&gt;文件夹覆盖过去。（自动创建 .gitignore 好评）&lt;/p&gt;
&lt;p&gt;这时候基本的安装就完成了，接下来打开 Github Desktop 开始对比差异。&lt;/p&gt;
&lt;p&gt;在全局配置&lt;code&gt;_config.yml&lt;/code&gt;中，&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565184499949.png" alt="1565184499949"&gt;&lt;/p&gt;
&lt;p&gt;这个配置是为每篇博文创建一个单独的资源文件夹。&lt;/p&gt;
&lt;p&gt;基本不用变，直接 discard changes 即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt; 和 &lt;code&gt;deploy.sh&lt;/code&gt; 也直接还原。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cjc7373.github.io/2018/10/13/Hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/#Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%8C%87%E5%BC%95"&gt;图片的问题&lt;/a&gt;先不管，有问题再说。&lt;/p&gt;
&lt;h3 id="主题安装"&gt;主题安装&lt;/h3&gt;
&lt;p&gt;剩下的差异全是主题文件。既然都重新搞了，那就换一个主题吧。在自己的 stars 里找了个主题 &lt;a href="https://github.com/yscoder/hexo-theme-indigo"&gt;hexo-theme-indigo&lt;/a&gt;，看了下也支持 Analysis、Disqus，就决定用它了。&lt;/p&gt;
&lt;p&gt;接下来就开始按照&lt;a href="https://github.com/yscoder/hexo-theme-indigo/wiki"&gt;主题文档&lt;/a&gt;来安装。首先 clone 仓库，我选择 card 分支，感觉比较好看（其实也没有对比）。&lt;/p&gt;
&lt;p&gt;在 hexo 根目录执行&lt;code&gt;git clone -b card https://github.com/yscoder/hexo-theme-indigo.git themes/indigo&lt;/code&gt;，下载主题文件。安装插件&lt;code&gt;hexo-renderer-less hexo-generator-feed hexo-generator-json-content hexo-helper-qrcode&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id="开启标签页"&gt;开启标签页&lt;/h2&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hexo new page tags
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改 &lt;code&gt;hexo/source/tags/index.md&lt;/code&gt; 的元数据&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;layout: tags
comments: false
---
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="开启分类页"&gt;开启分类页&lt;/h2&gt;
&lt;p&gt;仅 card theme 支持。&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hexo new page categories
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改 &lt;code&gt;hexo/source/categories/index.md&lt;/code&gt; 的元数据&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;layout: categories
comments: false
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;话说用 Github Desktop commit 的时候因为主题文件夹也是一个 git 仓库，所以报错了，在命令行中 add，提示&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565227855897.png" alt="1565227855897"&gt;&lt;/p&gt;
&lt;p&gt;于是我去 Google 了下&lt;a href="%5Bhttps://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97%5D(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)"&gt;子模块&lt;/a&gt;，感觉这会让问题变复杂，同时这个主题已经很久没更新过了，干脆把主题的版本库删了吧。删除 &lt;code&gt;.git&lt;/code&gt;文件夹后，提交成功。&lt;/p&gt;
&lt;h3 id="主题配置"&gt;主题配置&lt;/h3&gt;
&lt;p&gt;编辑站点配置文件。启用主题&lt;code&gt;theme: indigo&lt;/code&gt;。feed 是用来 rss 的，不管。jsonContent 用来搜索，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id="jsoncontent配置"&gt;jsonContent配置&lt;/h3&gt;
&lt;p&gt;为了节约资源，可以对 jsonContent 插件生成的数据字段进行配置，减少数据文件大小。参考 &lt;a href="https://github.com/alexbruno/hexo-generator-json-content"&gt;hexo-generator-json-content&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;jsonContent:
meta: false
pages: false
posts:
title: true
date: true
path: true
text: true
raw: false
content: false
slug: false
updated: false
comments: false
link: false
permalink: false
excerpt: false
categories: false
tags: true
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;编辑主题配置文件，&lt;code&gt;themes/indigo/_config.yml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;左侧菜单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;添加新菜单项时，在 menu 下增加子属性即可。属性说明如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;menu:
link: # fontawesome图标，省略前缀，本主题前缀为 icon-，必须
text: About # 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写
url: /about # 链接，绝对或相对路径，必须
target: _blank # 是否跳出，省略则在当前页面打开
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fontawesome 图标已集成到主题中，你可以到 &lt;a href="http://fontawesome.io/icons/"&gt;这个页面&lt;/a&gt; 挑选合适的图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我修改为如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;menu:
home:
text: 主页
url: /
archives:
url: /archives
tags:
url: /tags
th-list:
text: Categories
url: /categories
github:
url: https://github.com/cjc7373
target: _blank
user:
text: 关于
url: /about
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其余改动略。&lt;/p&gt;
&lt;p&gt;由于这个主题为国人制作，配置文件都带有中文注释，还是很友好的。&lt;/p&gt;
&lt;h2 id="修锅"&gt;修锅&lt;/h2&gt;
&lt;p&gt;图片不出意外地崩了。。而且不止首页图片，是所有。。装插件试试。&lt;code&gt;npm install hexo-asset-image --save&lt;/code&gt;。装完又多了两个漏洞，这插件是有多久没更新了。。自动修复试试。&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565232540544.png" alt="1565232540544"&gt;&lt;/p&gt;
&lt;p&gt;GG。&lt;/p&gt;
&lt;p&gt;语言是错的。hexo 配置文件改成 zh-cn 试试。&lt;/p&gt;
&lt;p&gt;头像好丑。改成猫头鹰了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;坑爹啊，img不说清楚在哪里。。我在根目录下创建了img，结果找了一下发现是在&lt;code&gt;themes\indigo\source\img&lt;/code&gt;下，图片还是炸。待修。暂时回滚至以前的版本。&lt;/p&gt;
&lt;h2 id="回滚"&gt;回滚&lt;/h2&gt;
&lt;p&gt;Updated in 2019/10/7&lt;/p&gt;
&lt;p&gt;&lt;img src="./1570428603861.png" alt="1570428603861"&gt;&lt;/p&gt;
&lt;p&gt;时隔两个月,重新拾回了我的博客..&lt;/p&gt;
&lt;p&gt;这个主题的锅不想修了..&lt;/p&gt;
&lt;p&gt;又看了几个主题之后,看看似乎原主题也挺好的..&lt;/p&gt;
&lt;p&gt;所以我又用回了 Next..&lt;/p&gt;
&lt;p&gt;看了一下 Next 换维护者了..&lt;/p&gt;
&lt;p&gt;&lt;img src="./1570429427612.png" alt="1570429427612"&gt;&lt;/p&gt;
&lt;p&gt;仓库地址从&lt;a href="https://github.com/iissnan/hexo-theme-next"&gt;这个&lt;/a&gt;变为&lt;a href="https://github.com/theme-next/hexo-theme-next"&gt;这个&lt;/a&gt;(话说居然不是 fork 过去的)&lt;/p&gt;
&lt;p&gt;大致过程是&lt;del&gt;重来一遍上述过程&lt;/del&gt;回退到某一个提交即可.&lt;/p&gt;
&lt;p&gt;不过我把 node.js 的版本更新到了 v12.11.1&lt;/p&gt;
&lt;p&gt;首先这四个 commit 记录不需要了,我建了个新的分支 theme-indigo 扔着..&lt;/p&gt;
&lt;p&gt;然后,先fetch一下,因为我在远程仓库上回滚了之前的更改..然后发现记错了,回滚的是 master 分支..&lt;/p&gt;
&lt;p&gt;然后看一下 log, 回退到 2939aa 这个 commit.&lt;/p&gt;
&lt;p&gt;&lt;img src="./1570429889982.png" alt="1570429889982"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset --hard 2939aa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此时本地分支已经落后于远程分支了,需要强制推送一遍.&lt;code&gt;git push --force&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./1570430098775.png" alt="1570430098775"&gt;&lt;/p&gt;
&lt;p&gt;看了一下这个提交是 [Hexo 安装](#Hexo 安装) 完成之后.&lt;/p&gt;
&lt;p&gt;接下来安装主题, 先从 Github 下载一个 release. 目前是 v7.4.1&lt;/p&gt;
&lt;p&gt;看了一眼&lt;a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md"&gt;从5.x升级&lt;/a&gt;文档, 全局配置中 language 要从 zh-Hans 变为 zh-CN&lt;/p&gt;
&lt;p&gt;&lt;del&gt;然后并没有发现其他配置文档&lt;/del&gt; 是有的, 只不过是英文, 在&lt;a href="https://theme-next.org/docs/getting-started/"&gt;这里&lt;/a&gt;, 只能一行一行看 &lt;code&gt;_config.yml&lt;/code&gt; 了.&lt;/p&gt;
&lt;p&gt;用 sublimerge 对比一下新旧配置文件的差异..&lt;/p&gt;
&lt;p&gt;&lt;img src="./1570431870938.png" alt="1570431870938"&gt;&lt;/p&gt;
&lt;p&gt;瞎改了一点.&lt;/p&gt;
&lt;p&gt;ok. 测试一下, 果然图片又崩了. 原因引用的图片地址多了一级. 把多余的地址删掉是能够正常显示的.&lt;/p&gt;
&lt;p&gt;&lt;img src="./1570432899620.png" alt="1570432899620"&gt;&lt;/p&gt;
&lt;p&gt;然而原来那个插件 &lt;code&gt;hexo-asset-image&lt;/code&gt; 没用了. 无奈继续 Google, 找到了一篇&lt;a href="https://liolok.github.io/en/How-to-Add-Image-to-Hexo-Blog-Post/"&gt;英文博文&lt;/a&gt;, 指出了另一个插件&lt;a href="https://github.com/liolok/hexo-asset-link"&gt;hexo-asset-link&lt;/a&gt;, 尝试之, 发现能完美在首页及内容页显示图片.&lt;/p&gt;
&lt;p&gt;至此, 我的博客算是修好了. (这篇博客写得不成样子,大雾,希望没人看到吧&lt;/p&gt;
&lt;h2 id="结语"&gt;结语&lt;/h2&gt;
&lt;p&gt;两次修锅的过程, 让我看到了 Hexo 的插入图片的巨坑. 用图床能够避免这个问题, 然而图床也有缺点, 我还是更喜欢直接插入图片. 感觉上这部分是由 Hexo 来处理的, 与主题无关, 所以还是可以换个主题玩玩的, 目前来说, 还是先专注于内容吧.&lt;/p&gt;
&lt;p&gt;有时间也可以试试 Typecho, Jekyll, Pelican, Hugo 等其他博客生成器.&lt;/p&gt;
- https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item></channel></rss>