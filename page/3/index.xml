<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coherence's Blog</title><link>https://blog.coherence.codes/</link><description>Recent content on Coherence's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Thu, 27 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/index.xml" rel="self" type="application/rss+xml"/><item><title>2020年终总结&amp;2021展望</title><link>https://blog.coherence.codes/posts/2021/2020summary_2021plan/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/2020summary_2021plan/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2021/2020summary_2021plan/ -&lt;p>又到了传统艺能&lt;del>年终&lt;/del>年初总结时间, 在一天鸽一天的情况之下, 今天已经是正月十四了..&lt;/p>
&lt;h2 id="2020-总结">2020 总结&lt;/h2>
&lt;p>一句话总结的话, 知识的广度提升了, 深度还不够, 学习状态仍旧不能让自己满意. 以及这一年我始终在担心有没有学上, 找不找得到工作.&lt;/p>
&lt;h3 id="学业">学业&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>由于疫情的爆发, 导致了 2020 春季学期完全在家上课, 更加方便摸鱼了(&lt;/p>
&lt;p>一开始港哥在群里说武汉疫情的时候, 我还不觉得这是什么大事, 后来才发现我错得离谱.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二月底到三月初, 陆续投了几个实习, 被拒了几个, 后来决定考研之后, 又鸽了几个&lt;/p>
&lt;p>&lt;img src="./image-20210225125307219.png" alt="image-20210225125307219">&lt;/p>
&lt;p>说实话我对以后能不能找到工作还是有点怀疑的..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从三月开始, 断断续续地开始准备考研了, 然而实际上还是不够努力吧, 到考试前一天我还没完全搞懂二次型..&lt;/p>
&lt;p>不过从时间上来说, 暑假之后就全力准备考研了..&lt;/p>
&lt;p>我很想说考研让我变得更沉得下心来学习了, 但事实上这并不是真的.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只准备了两三天之后 (因为太晚看到了), 尝试申请了一下 GSoC, 不出意外凉了..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>七月到十月, 参加开源之夏, 也算是赚到了人生的第一桶金吧&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="玩">玩&lt;/h3>
&lt;ul>
&lt;li>一月, 去滑雪+攀岩, 还是挺有意思的&lt;/li>
&lt;li>二月初, 折腾了一下 Windows 10 on Arm for Lumia 1520, 并没有什么用, 于是继续吃灰&lt;/li>
&lt;li>七月, 乘着沪通铁路的开通, 去上海玩了一次, 居然被我碰到了一次高铁延误..&lt;/li>
&lt;/ul>
&lt;h3 id="环境">环境&lt;/h3>
&lt;ul>
&lt;li>二月末, 开始搞 Manjaro, 一开始两个系统都用, 逐渐就只用 Linux 了 (特别是我发现了 proton 和 lutris 之后..)&lt;/li>
&lt;li>三月初, 开始尝试 Typora+第三方云同步&lt;/li>
&lt;li>七月, 从 Onedrive 转向 Syncthing (是不是有一种 Anything can be self-hosted 的趋势呢..&lt;/li>
&lt;/ul>
&lt;h3 id="书">书&lt;/h3>
&lt;p>本年度仍然没有怎么看书..&lt;/p>
&lt;ul>
&lt;li>看完了心理学与生活, 心理学啊, exciting&lt;/li>
&lt;li>看完了 Dark Forest&lt;/li>
&lt;/ul>
&lt;h3 id="代码">代码&lt;/h3>
&lt;p>总的来说, 感觉自己乱七八糟的项目一堆, 却没什么拿得出手的..&lt;/p>
&lt;ul>
&lt;li>zaobot, 基本一整年都在维护 (虽然目前的代码还是挺是💩的, 打算再次重构&lt;/li>
&lt;li>云盘在年初把后端重构了一下, 后来就鸽了 (事实上我这是重复造轮子, seafile 的体验就很好..)&lt;/li>
&lt;li>pip, 四五月吧, 修了一些 bug, 做了点微小的贡献, 主要还是 codebase 没太理解..&lt;/li>
&lt;li>Hackergame, 七到九月, 后端应该基本可用了, 然后答应的前端鸽了.. 当时天天看文档..&lt;/li>
&lt;li>九十月考研的时候, 稍微学了一点 Anki, 为了自己用得顺手, 写了一个小插件.&lt;/li>
&lt;li>建了个&lt;a href="https://github.com/cjc7373/my_scripts">仓库&lt;/a>写一些日常使用的脚本, 然而目前觉得可以全扔 Ansible 里..&lt;/li>
&lt;li>花&lt;del>半个小时&lt;/del>三天写了个课程评价, 然而并没有人用..&lt;/li>
&lt;/ul>
&lt;h3 id="学习">学习&lt;/h3>
&lt;ul>
&lt;li>年中, 学了下小鹤双拼, 虽然似乎打字速度没快多少..&lt;/li>
&lt;li>十一月, 终于把 Learning How To Learn 学完了, 然而我学到了什么呢..&lt;/li>
&lt;/ul>
&lt;h3 id="剁手">剁手&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>一月初, 本来已经买了联想小新 Pro 13, 然而压感触控的体验不是很好, 又碰到了下方向键有概率用不了的问题, 于是退了..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一月, 购置了网件 R7900p, 终于能在电视上用 smb 看电影不卡了.. 然而 ipv6 是个坑..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二月, 捡了个洋垃圾 Surface 3, 虽然电池有坑, 但是 Surface 总体还是可以的. 后来出了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>六月中, 入手了 Surface Pro 7, 除了续航有点差其他都很满意. 18 年开始就种下的草 (指买轻薄本) 终于拔了.&lt;/p>
&lt;p>附一张合照:&lt;/p>
&lt;p>&lt;img src="./image-20210225152027832.png" alt="image-20210225152027832">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>十一月, 由于创新 IE3P 的线老是掉, 我终于买了个无线耳机, Galaxy Bud+.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="财务">财务&lt;/h3>
&lt;p>基金今年还是没怎么动, 看着大盘涨.. 稍微学了点投资的知识.&lt;/p>
&lt;p>记账方面, Spendee 在年中放弃了, 因为感觉意义不大. 后来知道了 Plain Text Accounting, 于是学了点 Beancount, 不过还没应用到实践中.&lt;/p>
&lt;h3 id="其他">其他&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;img src="./image-20210225144517669.png" alt="image-20210225144517669">&lt;/p>
&lt;p>事实证明这是很好的追踪一个问题的工具..&lt;/p>
&lt;p>&lt;img src="./image-20210225150738841.png" alt="image-20210225150738841">&lt;/p>
&lt;p>但是浏览条目还是有些不爽 (比较慢)..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>六月, 开始用 KeePassXC 管理密码.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>暑假里, 看了人类星球, 自然与人文纪录片交汇的佳作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2020 秋季学期运动的次数显著增加了, 经常会去打打羽毛球.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>十月, 和 Moo 在北门合租了, 环境比之前在樱花广场好了很多..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>十二月, 用 rsync 删了一波自己的 home 目录, 血的教训.. 没想到我也有删库的一天..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这一年没怎么管博客, 因为考研, 外加想着迁移 Pelican, 结果又挖了一个大坑&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2021-计划">2021 计划&lt;/h2>
&lt;p>还有两天考研出分了.. 说实话挺害怕的.. 考不上就只能找工作了.&lt;/p>
&lt;ul>
&lt;li>今年还是想尝试一下 GSoC, 到四月中旬申请结束还有一个半月.. 努力去混混脸熟吧.&lt;/li>
&lt;li>事实上, 我还有一堆开的坑, 包括但不限于:
&lt;ul>
&lt;li>给 Wikipedia 贡献一个优良条目的翻译&lt;/li>
&lt;li>写个 (或者找找) 各板块指数的 PB 中值温度计.&lt;/li>
&lt;li>所有 VPS 都使用 Ansible 维护&lt;/li>
&lt;li>写一个 Pelican 的主题, 类似 &lt;a href="https://github.com/amazingrise/hugo-theme-diary">diary&lt;/a>.&lt;/li>
&lt;li>学习 CSAPP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>毕设, 写一个第三方网易云, 毕竟是自己提的项目, 还是要好好写的.. 这又是一大堆不熟悉的技术栈..&lt;/li>
&lt;li>还是要多看点书..&lt;/li>
&lt;/ul>
&lt;p>不管怎么样, 我还是要以更加积极的心态去迎接未来. 冲!&lt;/p>
- https://blog.coherence.codes/posts/2021/2020summary_2021plan/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Anki 工作流</title><link>https://blog.coherence.codes/posts/2021/anki_workflow/</link><pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/anki_workflow/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2021/anki_workflow/ -&lt;p>&lt;a href="https://apps.ankiweb.net/">Anki&lt;/a> 是一个间隔式重复的&amp;quot;闪卡 (flashcard)&amp;ldquo;记忆软件. 下面来谈谈我考研及日常生活中的 Anki 工作流.&lt;/p>
&lt;h2 id="为什么选择-anki">为什么选择 Anki&lt;/h2>
&lt;p>和市面上其他的记忆软件一样, Anki 也是基于遗忘曲线, 基于间隔式重复这一原理的. 最大的不同在于它是高度自定义的. 自己制作卡组, 设计模板, 甚至编写自己的插件. 还有很多特性例如 Notes 和 Cards 相分离我其实并没有用到.&lt;/p>
&lt;p>其次 Anki 是一款开源软件, 在我希望所有软件都用自由软件替换的如今, 这无疑是一个重要的理由.&lt;/p>
&lt;p>最后它在 Windows, Linux, Android 上都有客户端, 并支持同步. 虽然内置的同步服务器是由 Ankiweb 提供的 (我至今不知道 Ankiweb 和 Anki 的关系以及它是如何运作的), 然而也能够用自建的替换.&lt;/p>
&lt;p>虽然网上能够找到很多已制作好的卡组, 然而这些卡组并不一定适合自己. 以记单词而言, 卡组中的许多卡片都是自己已经熟知的. 况且制卡这个过程本身能够帮助自己记忆. 所以我还是选择了自己构建卡组的方式.&lt;/p>
&lt;h2 id="基础卡片">基础卡片&lt;/h2>
&lt;p>对于一般的记忆来说, 基础的 Note type 就够用了.. 比如我一开始用 Anki 来提醒我复习新概念英语, 用的是以下的 Note type:&lt;/p>
&lt;p>&lt;img src="./image-20210224200941341.png" alt="image-20210224200941341">&lt;/p>
&lt;p>十分简单.&lt;/p>
&lt;h2 id="考研">考研&lt;/h2>
&lt;p>考研的时候打算用 Anki 背单词, 于是我做真题的时候碰到不认识的单词记录下来, 然后用 Anki 制卡.&lt;/p>
&lt;p>卡片字段设计和工作流受到了&lt;a href="https://ankiweb.net/shared/info/934622764">考研英语真题生词&lt;/a>这个卡组的启发.&lt;/p>
&lt;p>其中最主要的问题是音标, 发音和释义. 一开始想的办法是发音用 TTS, 于是找到了 Azure 的 API, 然而一个缺点是每次制卡要等很久 (请求 API), 而且 Azure 的 API 很贵.. 我给一个几百张卡的卡组加发音花了我五块钱..&lt;/p>
&lt;p>于是我就想到了从词典中导入, 我平时主要使用的词典是 OALD8 (很久之前从 &lt;a href="https://www.pdawiki.com/forum/">pdawiki&lt;/a> 下的), 于是我就自己糊了个&lt;a href="https://ankiweb.net/shared/info/738556640">插件&lt;/a>.. 功能很简单, 根据单词字段从词典 mdx 文件里查询音标和发音, 并填充到相应字段中.&lt;/p>
&lt;p>最后的成品卡片是这样的:&lt;/p>
&lt;p>&lt;img src="./image-20210224201415659.png" alt="image-20210224201415659">&lt;/p>
&lt;p>制卡的时候首先手打单词和例句, 然后从词典里选一个释义复制过来就行了. 个人感觉也不是很麻烦..&lt;/p>
&lt;p>看一下成果:&lt;/p>
&lt;p>&lt;img src="./image-20210224202958005.png" alt="image-20210224202958005">&lt;/p>
&lt;p>考研的那一百多天里我总共背了 364 个单词.. 其实挺少的..&lt;/p>
&lt;p>之后的卡组中我优化了一下 Note 的字段, 于是现在变成了这样:&lt;/p>
&lt;p>&lt;img src="./image-20210224201845315.png" alt="image-20210224201845315">&lt;/p>
&lt;h2 id="咕咕咕时间">咕咕咕时间&lt;/h2>
&lt;ul>
&lt;li>释义的导入我肯定也想自动化的. 而选择释义势必要做一个弹窗, 那么这就涉及到 Qt 的知识了, 于是目前搁置了&lt;/li>
&lt;li>有的单词不同的词性有不同的发音, 这个也没有处理..&lt;/li>
&lt;li>有一个 &lt;a href="https://github.com/ninja33/ODH">chrome 插件&lt;/a>已经基本上把我想做的都实现了, 可以借鉴一下..&lt;/li>
&lt;/ul>
- https://blog.coherence.codes/posts/2021/anki_workflow/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Codeforces Round 634 (Div. 3) 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/</link><pubDate>Sun, 19 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/ -&lt;h2 id="1335a---candies-and-two-sisters">&lt;a href="https://codeforces.com/contest/1335/problem/A">1335A - Candies and Two Sisters&lt;/a>&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>快乐签到。&lt;/p>
&lt;h2 id="1335b---construct-the-string">&lt;a href="https://codeforces.com/contest/1335/problem/B">1335B - Construct the String&lt;/a>&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>先构造长度为 $a$ 的字符串，然后第 $i+a$ 个字母为第 $i$ 个字母，输出即可。&lt;/p>
&lt;h2 id="1335c---two-teams-composing">&lt;a href="https://codeforces.com/contest/1335/problem/C">1335C - Two Teams Composing&lt;/a>&lt;/h2>
&lt;p>&lt;code>2/1 Accepted&lt;/code>&lt;/p>
&lt;p>给 $n$ 个数，每个数有一个值，要求把它们分成数量相同的两组，一组所有的值相等，一组所有的值不等。&lt;/p>
&lt;p>先统计每个值的数量，得出最大个数 $m$，和不同值的数的个数 $l$，&lt;/p>
&lt;p>&lt;code>ans = min(l, m) if m &amp;lt; l + 2 else ans = min(l, m) + 1&lt;/code>&lt;/p>
&lt;h2 id="1335d---anti-sudoku">&lt;a href="https://codeforces.com/contest/1335/problem/D">1335D - Anti-Sudoku&lt;/a>&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>给一个求解好的数独，求改动不超过 9 个数，使其每行、列、区块内皆有两个相同的数。&lt;/p>
&lt;p>想了两分钟，发现将所有的 1 替换为 2 即可。&lt;/p>
&lt;h2 id="1335e---three-blocks-palindrome">&lt;a href="https://codeforces.com/contest/1335/problem/E2">1335E - Three Blocks Palindrome&lt;/a>&lt;/h2>
&lt;p>&lt;code>Not Attempted&lt;/code>&lt;/p>
&lt;p>给一个含有$n$个数的序列，定义三区块的回文数为：$[\underbrace{a, a, \dots, a}&lt;em>{x}, \underbrace{b, b, \dots, b}&lt;/em>{y}, \underbrace{a, a, \dots, a}_{x}]$，$x, y$是大于等于0的整数，a可以等于b。求一个最长子序列使它为三区块的回文数。输出长度。&lt;/p>
&lt;p>又是一道需要神奇的优化的题。。&lt;/p>
&lt;p>&lt;img src="./image-20200416163610781.png" alt="image-20200416163610781">&lt;/p>
&lt;p>按官方题解的思路是这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>stdin&lt;span style="color:#f92672">.&lt;/span>readline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(t):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev &lt;span style="color:#f92672">=&lt;/span> [[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> n &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos &lt;span style="color:#f92672">=&lt;/span> [[] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>: &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev[j][i] &lt;span style="color:#f92672">=&lt;/span> prev[j][i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev[s[i]][i] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos[s[i]]&lt;span style="color:#f92672">.&lt;/span>append(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># if x == 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> max(ans, len(pos[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># if x != 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, (len(pos[i]) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> max(m, prev[k][pos[i][&lt;span style="color:#f92672">-&lt;/span>j]&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> prev[k][pos[i][j&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> max(ans, m &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> j)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(ans)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是超时了。翻别人的代码发现创建prev数组还能优化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>stdin&lt;span style="color:#f92672">.&lt;/span>readline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(t):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev &lt;span style="color:#f92672">=&lt;/span> [[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">201&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos &lt;span style="color:#f92672">=&lt;/span> [[] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev[i] &lt;span style="color:#f92672">=&lt;/span> prev[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>copy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev[i][s[i]] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos[s[i]]&lt;span style="color:#f92672">.&lt;/span>append(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># if x == 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> max(ans, len(pos[i]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># if x != 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, (len(pos[i]) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">201&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> max(m, prev[pos[i][&lt;span style="color:#f92672">-&lt;/span>j]&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][k] &lt;span style="color:#f92672">-&lt;/span> prev[pos[i][j&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]][k])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> max(ans, m &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> j)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(ans)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>700多ms过了。。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Codeforces Round 629 (Div. 3) 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/</link><pubDate>Sun, 12 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/ -&lt;p>快乐划水。&lt;/p>
&lt;h2 id="1328a---divisibility-problem">&lt;a href="https://codeforces.com/contest/1328/problem/A">1328A - Divisibility Problem&lt;/a>&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>快乐签到。&lt;/p>
&lt;h2 id="1328b---k-th-beautiful-string">&lt;a href="https://codeforces.com/contest/1328/problem/B">1328B - K-th Beautiful String&lt;/a>&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>给一个数n，要求构造一个字符串，包含n-2个a，2个b，且在这个字符串的按字典序的全排列中排在第k个。&lt;/p>
&lt;p>找b的位置即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(t):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n, k &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> range(max(n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,k&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> p &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> k:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos1 &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos2 &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> (k &lt;span style="color:#f92672">-&lt;/span> int(((p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> pos1 &lt;span style="color:#f92672">or&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> pos2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1328c---ternary-xor">&lt;a href="https://codeforces.com/contest/1328/problem/C">1328C - Ternary XOR&lt;/a>&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>给一个三进制数x，求两个数a，b，使这两个数的异或为x，且max(a, b)最小。&lt;/p>
&lt;p>从左往右对每一位考虑最优解，若是0或2，则平均分配，若为1，则分配到0的那方获得接下来所有的数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(t):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(x)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x[i] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">or&lt;/span> x[i] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans1 &lt;span style="color:#f92672">+=&lt;/span> str(int(x[i]) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans2 &lt;span style="color:#f92672">+=&lt;/span> str(int(x[i]) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans1 &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans2 &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, len(x)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans1 &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans2 &lt;span style="color:#f92672">+=&lt;/span> x[j]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(ans1, ans2, sep&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1328d---carousel">&lt;a href="https://codeforces.com/contest/1328/problem/D">1328D - Carousel&lt;/a>&lt;/h2>
&lt;p>&lt;code>Not Attempted&lt;/code>&lt;/p>
&lt;p>大概是能做的，只是到了十二点太困了。。就睡觉去了。&lt;/p>
&lt;p>n个动物围成一圈，相邻的不同动物要有不同的颜色，求最少的颜色和对应的颜色序列。&lt;/p>
&lt;p>考虑几种情况：所有动物都相同，总数为偶数，总数为奇数但存在相邻的相同动物，总数为奇数且不存在相邻的相同动物。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(t):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> figure &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> figure&lt;span style="color:#f92672">.&lt;/span>count(figure[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">==&lt;/span> n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;1 &amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> n &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> figure[i] &lt;span style="color:#f92672">==&lt;/span> figure[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]: &lt;span style="color:#75715e"># -1 即最后一个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flg &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> flg &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> flg:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print((i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1328e---tree-queries">&lt;a href="https://codeforces.com/contest/1328/problem/E">1328E - Tree Queries&lt;/a>&lt;/h2>
&lt;p>&lt;code>Not Attempted&lt;/code>&lt;/p>
&lt;p>给一棵树，有m个查询，每个查询给出树上的一些节点，若有一条从根节点出发的路径，使这些节点属于这条路径或和这条路径上某个点的距离为一，输出 YES，否则为 NO。&lt;/p>
&lt;p>补题的时候都是泪。按题解写了个 dfs 序，然后对每个查询去它的父节点，对每个节点检查其是否为最深的那个节点的祖先。&lt;/p>
&lt;p>然后上来一个 CE：&lt;/p>
&lt;p>&lt;img src="./image-20200406110417718.png" alt="image-20200406110417718">&lt;/p>
&lt;p>我就奇怪了你为什么不用 utf-8，而且之前交过带中文注释的正常啊。于是把注释改回英文。&lt;/p>
&lt;p>之后是无尽的 RE 和 TLE。分析了一波复杂度没毛病啊，只能是优化的锅了。&lt;/p>
&lt;p>&lt;img src="./image-20200406110610535.png" alt="image-20200406110610535">&lt;/p>
&lt;p>看了别人的代码，主要是两点：用栈模拟 dfs 和输入使用&lt;code>input = sys.stdin.readline&lt;/code>。试了一下确实，直接 dfs 会爆栈空间，不优化输入会 TLE。&lt;/p>
&lt;p>最终结果可以看出，PyPy 和 CPython 差距还是挺大的。&lt;/p>
&lt;p>&lt;img src="./image-20200406110757605.png" alt="image-20200406110757605">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>stdin&lt;span style="color:#f92672">.&lt;/span>readline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n, m &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tree &lt;span style="color:#f92672">=&lt;/span> [[] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u, v &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree[u]&lt;span style="color:#f92672">.&lt;/span>append(v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree[v]&lt;span style="color:#f92672">.&lt;/span>append(u)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>t &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tin &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tout &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>par &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dep &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stack &lt;span style="color:#f92672">=&lt;/span> [(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> stack:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to, parent, depth, state &lt;span style="color:#f92672">=&lt;/span> stack&lt;span style="color:#f92672">.&lt;/span>pop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> state:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> par[to] &lt;span style="color:#f92672">=&lt;/span> parent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dep[to] &lt;span style="color:#f92672">=&lt;/span> depth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tin[to] &lt;span style="color:#f92672">=&lt;/span> t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#f92672">.&lt;/span>append((to, parent, depth, &lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> tree[to]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> parent: &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#f92672">.&lt;/span>append((i, to, depth&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tout[to] &lt;span style="color:#f92672">=&lt;/span> t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># print(f&amp;#34;tin={tin}\ntout={tout}&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># replace every non-root vertex with its parent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query &lt;span style="color:#f92672">=&lt;/span> [par[int(i)] &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">del&lt;/span>(query[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fv &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_dep &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> query:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># search the deepest vertex fv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> dep[i] &lt;span style="color:#f92672">&amp;gt;&lt;/span> max_dep:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_dep &lt;span style="color:#f92672">=&lt;/span> dep[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fv &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># for every vertex, should be fv&amp;#39;s parent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> query:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> (tin[i] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> tin[fv] &lt;span style="color:#f92672">and&lt;/span> tout[fv] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> tout[i]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> flg: print(&lt;span style="color:#e6db74">&amp;#34;NO&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>: print(&lt;span style="color:#e6db74">&amp;#34;YES&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1328f---make-k-equal">&lt;a href="https://codeforces.com/contest/1328/problem/F">1328F - Make k Equal&lt;/a>&lt;/h2>
&lt;p>&lt;code>Not Attempted&lt;/code>&lt;/p>
&lt;p>给 n 个数，给一个数 k &amp;lt;= n，要使得至少 k 个数相等。有两种操作：使一个最小的数 +1，使一个最大的数 -1。求最少的操作数。&lt;/p>
&lt;p>根据&lt;a href="https://www.cnblogs.com/st1vdy/p/12579249.html">这篇题解&lt;/a>，本题一共三种情况，给最大值 -1，给最小值 +1，同时进行两种操作（此时一定有 $a_1=a_n$ ）。（这个解法感觉比官方的还要好）&lt;/p>
&lt;p>第一和第二种情况类似，将最左（右）边的 k 个数变为一致即可。第三种情况下，$\sum_{i=1}^{\frac{n}{2}}(a_{n-i}-a_i)$即将所有数变为相同（但是如果 n 为奇数，中间那个数怎么办？待考虑。。但结果是对的），但我们只需要 k 个，所以减去$n-k$。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#f92672">=&lt;/span> sys&lt;span style="color:#f92672">.&lt;/span>stdin&lt;span style="color:#f92672">.&lt;/span>readline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n, k &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#f92672">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">-&lt;/span>k&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a[i] &lt;span style="color:#f92672">==&lt;/span> a[i&lt;span style="color:#f92672">+&lt;/span>k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sys&lt;span style="color:#f92672">.&lt;/span>exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>l &lt;span style="color:#f92672">=&lt;/span> r &lt;span style="color:#f92672">=&lt;/span> m &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># suppose val is the number where k numbers are the same&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># case 1, turn the leftmost k numbers to val (or val-1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l &lt;span style="color:#f92672">+=&lt;/span> a[k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> a[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>): &lt;span style="color:#75715e"># if a[k-1] have many same numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a[i] &lt;span style="color:#f92672">==&lt;/span> a[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># case 2, turn the rightmost k numbers to val (or val-1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a_reverse &lt;span style="color:#f92672">=&lt;/span> a[::&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>(a_reverse[k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> a_reverse[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(k&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a_reverse[i] &lt;span style="color:#f92672">==&lt;/span> a_reverse[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># case 3, all the numbers are val or val-1 or val+1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">+=&lt;/span> a[n&lt;span style="color:#f92672">-&lt;/span>i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> a[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m &lt;span style="color:#f92672">-=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(min(l, r, m))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>- https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>博客图片文件夹迁移</title><link>https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/</link><pubDate>Wed, 01 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/ -&lt;p>我原来的博客文件夹结构是这样的：&lt;/p>
&lt;p>&lt;img src="./image-20200328175914444.png" alt="image-20200328175914444">&lt;/p>
&lt;p>博文数量少的时候，还挺直观，但是数量一多，看着就很杂乱，因此，萌生了重新归类的想法。&lt;/p>
&lt;p>思路大概是这样：按年份归类，然后图片统一放到当前目录下的&lt;code>images&lt;/code>文件夹里。&lt;/p>
&lt;h2 id="实践">实践&lt;/h2>
&lt;p>脚本的逻辑大概是对每一篇博文，寻找其元数据的 date 字段，将其移动到对应的文件夹下，同时对同名的文件夹也进行递归移动。由于图片都是相对引用的，所以不会出问题。（即使出了咱还有 git）&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Kickstart 2020 Round A 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/</link><pubDate>Thu, 26 Mar 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/ -&lt;p>第一次打Kickstart，体验还是很不错的。&lt;/p>
&lt;p>&lt;a href="https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7">比赛链接&lt;/a>&lt;/p>
&lt;p>迟了几分钟进比赛，发现前十已经两题AC了。&lt;/p>
&lt;h2 id="allocation">Allocation&lt;/h2>
&lt;p>&lt;code>1/0 Accepted&lt;/code>&lt;/p>
&lt;p>签到题，排序后从大到小输出即可。&lt;/p>
&lt;h2 id="plates">Plates&lt;/h2>
&lt;p>&lt;code>2/0 TLE, WA&lt;/code>&lt;/p>
&lt;p>N叠盘子，每叠K个，每个盘子有一个beauty值，从中取P个，但对于每叠只能从上到下取，求beauty值最大为多少。&lt;/p>
&lt;p>先写了一个每次取最大的，WA，发现不对，然后去做第三题了。后又写了个dfs，TLE了。当时心态有点崩，因为TOP 10基本是两分钟AC，想到DP，但没有深入想。&lt;/p>
&lt;p>官方题解是对于每一叠盘子，先预处理前n个的beauty值和sum，然后对于每一个状态&lt;code>dp[i][j]&lt;/code>，即在前i叠盘子和取j个盘子时能取到的最大值，有状态转移方程&lt;code>dp[i][j] = max(dp[i][j], sum[i][x]+dp[i-1][j-x])&lt;/code>。循环求dp即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, t&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Case #&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">: &amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n, k, p &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a&lt;span style="color:#f92672">.&lt;/span>append([int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum&lt;span style="color:#f92672">.&lt;/span>append([&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> a[i]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">+=&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum[i]&lt;span style="color:#f92672">.&lt;/span>append(s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#f92672">=&lt;/span> [[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> (p&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> sum[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> (p&lt;span style="color:#f92672">-&lt;/span>k)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, p&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(min(j&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, k&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#f92672">=&lt;/span> max(dp[i][j], sum[i][x] &lt;span style="color:#f92672">+&lt;/span> dp[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>][j&lt;span style="color:#f92672">-&lt;/span>x])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ans &lt;span style="color:#f92672">=&lt;/span> max(ans, dp[i][p])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">+=&lt;/span> str(ans)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(out)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="workout">Workout&lt;/h2>
&lt;p>&lt;code>2/1 Accepted&lt;/code>&lt;/p>
&lt;p>给一个递增的数列，插入K个值，求每两个值的差的最小值。&lt;/p>
&lt;p>这道题和我校2017新生赛的一题类似，对结果二分即可。&lt;/p>
&lt;h2 id="bundling">Bundling&lt;/h2>
&lt;p>&lt;code>Not Attempted&lt;/code>&lt;/p>
&lt;p>把N个字符串分成K组，每组的分数为最长公共前缀的长度，求全局最高分。&lt;/p>
&lt;p>直接进行分组比较困难，我们可以考虑每组的分数同时也是共同前缀的个数。那么对于每个前缀，若有p个单词拥有这个前缀，则这个前缀会给结果贡献&lt;code>p // K&lt;/code>分。由此求字符串中的每个前缀和拥有这个前缀的字符串数即可。&lt;/p>
&lt;p>使用前缀树可很容易求得。一开始我的做法是递归这棵树，用了两种写法都RE了，Google了一圈找到测试数据会导致爆栈，故采用了list来模拟栈遍历。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, t&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Case #&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">: &amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n, k &lt;span style="color:#f92672">=&lt;/span> [int(i) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#39;pre_num&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> word &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur &lt;span style="color:#f92672">=&lt;/span> tree
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> word:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur &lt;span style="color:#f92672">=&lt;/span> cur&lt;span style="color:#f92672">.&lt;/span>setdefault(c, {&lt;span style="color:#e6db74">&amp;#39;pre_num&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cur[&lt;span style="color:#e6db74">&amp;#39;pre_num&amp;#39;&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack &lt;span style="color:#f92672">=&lt;/span> [tree]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> len(stack):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node &lt;span style="color:#f92672">=&lt;/span> stack&lt;span style="color:#f92672">.&lt;/span>pop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">+=&lt;/span> node[&lt;span style="color:#e6db74">&amp;#39;pre_num&amp;#39;&lt;/span>] &lt;span style="color:#f92672">//&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> node:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pre_num&amp;#39;&lt;/span>: &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#f92672">.&lt;/span>append(node[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">+=&lt;/span> str(s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(out)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>- https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>2019年终总结&amp;2020展望</title><link>https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/</link><pubDate>Sat, 01 Feb 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/ -&lt;p>又是一年一度的年终总结时间了，进入二十一世纪的第二个十年，我的心情十分激动……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>好吧，激动是假的。时空是连续的，进入2020和平常的一天没有任何区别。转眼间已经来到了庚子鼠年的大年初八，我恍然记得我的年终总结还没有写，于是准备把这个传统艺能发扬下去，也看一看2019定的目标完成了多少。&lt;/p>
&lt;h2 id="2019-总结">2019 总结&lt;/h2>
&lt;p>时间及事件依据：印象笔记、Google 相册、我的记忆、Telegram。&lt;/p>
&lt;p>事件尽量归类，未归类的大致以时间顺序排列。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>找到了一个&lt;del>记录生活&lt;/del>吐槽的平台。&lt;/p>
&lt;p>&lt;img src="./image-20200201201451074.png" alt="image-20200201201451074">&lt;/p>
&lt;p>这个channel的内容输入延续至今。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一月，金工实习和数学建模美赛，虽然没学到什么，还是挺有意思的。&lt;/p>
&lt;p>&lt;img src="./image-20200201202345974.png" alt="image-20200201202345974">&lt;/p>
&lt;p>图为某数控机床。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三月上旬，重新开始在印象笔记写日记。三月末更换至纸质方式。&lt;/p>
&lt;p>之后觉得日记意义不大，更换为每日计划，但是没有坚持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三月，在外租房居住。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三月和十二月，分别安排了我校ACM的校赛和新生赛。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;img src="./image-20200201215603263.png" alt="image-20200201215603263">&lt;/p>
&lt;p>请记住我这句话，都是泪。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寒假里把N1刷了一遍OMV，但存储只有一个U盘。暑假刷回了无灯的固件，买了个硬盘盒+320G机械，勉强能当NAS来用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ingress，从入坑到弃坑，大概是二月到五月的事。&lt;del>（其实以前玩过&lt;/del>&lt;/p>
&lt;p>因为这个游戏还出去玩了挺多次的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三月末，开始入坑Arch Linux。&lt;/p>
&lt;p>然后发现这是个巨坑。（折腾万岁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>投资方面。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>和去年没多大变化吧。看的还是那两个人，还是没有系统地学经济学。只不过跟着大盘走盈利了一些罢了。&lt;/p>
&lt;p>&lt;img src="./image-20200222105649825.png" alt="image-20200222105649825">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>英语方面。自我感觉英语能力有了较大提升。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>年度英美刷剧（和去年总结对比了一下）：Friends二刷，The Newsroom，Person of Interest 两季，The IT Crowd一季多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>十月份想去考一考托福，大概也学了一段时间，后来无限期搁置了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用Kindle读原著方面，把三体一看完了，又开了个哈利波特的坑，也看完了第一部。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>我看了多少书？&lt;/p>
&lt;ul>
&lt;li>买了好多书。&lt;del>（然而都没有看&lt;/del>&lt;/li>
&lt;li>Linux&amp;amp;Unix大学教程基本看完了。后来又买了本鸟哥的，还没看。&lt;/li>
&lt;li>Head First with HTML&amp;amp;CSS 还剩最后两章没看。&lt;/li>
&lt;li>Computer Networking: A Top-down Approach，18年7月在图书馆里借了第五版影印版，一年基本没看，大三上由于要学计算机网络，好歹看了点，后又从淘宝打印了第七版英文版，看了三分之二左右。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>四月初，启用了Digital Wellbeing，但是并没有起到限制玩手机时间的作用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>四月末，参加了一次西安GDG活动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>剁手记录。&lt;/p>
&lt;ul>
&lt;li>二月初，给家中置换了一个新的显示器，淘汰了老AOC 21&amp;rsquo; 1680*1050 服役十二年的历史。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./image-20200201203042582.png" alt="image-20200201203042582">&lt;/p>
&lt;p>图为 AOC 27&amp;rsquo; 4K 某型号。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>二月，给笔记本加了根8G的内存。年末的时候这个价钱可以买到16G的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>四月末，出售 Bose Sleepbuds。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>八月末，入手人生中第一台相机，Sony α7m2，带28-70镜头。于是周末又有很多次出去拍照。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本年度还是没有换笔记本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>十月末，在宿舍购置了显示器，同样是AOC（因为便宜），27&amp;rsquo; 2K 带Type-C接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>双十一期间，购置了东芝RC500 500G固态。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>陆续参加了天文协会的几次活动。知识竞赛，航天厂科普，石门山野观。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大三上开学初，想加入一个实验室，后未果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>整个一年曾多次试图维护QOJ项目，未果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我学了些什么？&lt;/p>
&lt;ul>
&lt;li>五月，参加了微信小程序开发大赛。学了一点JS。&lt;/li>
&lt;li>七月初，软通实训。快乐划水半个月。学了点前端，学了点HTTP。&lt;/li>
&lt;li>暑假里，学了点前端（HTML+CSS），帮我爸写了个小软件。&lt;/li>
&lt;li>暑假及大三上的前半学期，在Coursera学完了吴恩达机器学习课。&lt;/li>
&lt;li>同样在Coursera，Learning how to learn 看了一年了还没看完。&lt;/li>
&lt;li>七月末，开始学Vue。&lt;/li>
&lt;li>九月开始，做一个访客认证的项目，学了些认证相关的协议。&lt;/li>
&lt;li>十一月，学了一点正则。&lt;/li>
&lt;li>十一月中旬，学了一点AutoHotkey，自己写了一个简单的脚本，用着还挺舒服的。&lt;/li>
&lt;li>十二月，因软件测试的课程作业学了一点CI/CD和Github Actions。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>我写了多少代码？&lt;/p>
&lt;p>​ &lt;img src="./image-20200202132048404.png" alt="image-20200202132048404">&lt;/p>
&lt;ul>
&lt;li>五月，微信小程序，一个相册。&lt;/li>
&lt;li>十一月开始，作为项目管理课程的大作业，也是我希望我校有的，和同学写了个西大云盘。Vue+Django。&lt;/li>
&lt;li>十一月，Python 课程作业，用Tkinter写了个小软件，调用了一下Bing Map的API显示了个地图。&lt;/li>
&lt;li>十一月末，根据TUNA群的经验写了个zaobot。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>记账。这个习惯保持下来了，不过从Excel转移到了Spendee。有好处也有坏处吧。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>系统上，从Windows到Win+Arch双系统到Windows+WSL，折腾了很多，却感觉没有深入多少东西。&lt;/p>
&lt;p>重装了好多次系统.. 一开始换专业版重装了一次，换硬盘又重装了一次。配置环境什么就很麻烦。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>入门了维基百科的一些原则及基础的编辑方式。但离一个合格的编辑还很远。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>国庆借舍友的Switch打了七天的塞尔达，Switch好感+++&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="去年的年初计划">去年的年初计划&lt;/h2>
&lt;p>大部分都实现了。&lt;/p>
&lt;h2 id="2020-年初计划">2020 年初计划&lt;/h2>
&lt;ul>
&lt;li>参与一个开源项目。&lt;/li>
&lt;li>找一个实习。&lt;/li>
&lt;li>考研。&lt;/li>
&lt;li>继续寻找方向。&lt;/li>
&lt;li>多写一些博客，输出自己的知识，同时也提高自己的能力。&lt;/li>
&lt;/ul>
- https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>WSL使用体验</title><link>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Sun, 08 Dec 2019 19:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/ -&lt;p>首先，WSL真香！&lt;/p>
&lt;h2 id="开启wsl">开启WSL&lt;/h2>
&lt;p>最简单的方式是使用管理员权限运行Powershell，然后输入：&lt;/p>
&lt;p>&lt;code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/code>&lt;/p>
&lt;p>重启电脑，然后在应用商店中安装WSL发行版。&lt;/p>
&lt;h2 id="arch">Arch&lt;/h2>
&lt;p>注意到WSL是没有Arch Linux发行版的（以前有一个非官方的，很快被下架了），但是我们有办法添加Arch发行版。去&lt;a href="https://github.com/yuk7/ArchWSL">这个仓库&lt;/a>下载打包好的appx文件和证书，首先将证书导入至受信任的根证书颁发机构，然后安装appx即可。&lt;/p>
&lt;h2 id="体验">体验&lt;/h2>
&lt;h3 id="坑">坑&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>默认WSL不会读取&lt;code>~/.bashrc&lt;/code>而会读取&lt;code>~/.bash_profile&lt;/code>，所以需要在&lt;code>~/.bash_profile&lt;/code>中写入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -f ~/.bashrc &lt;span style="color:#f92672">]]&lt;/span> ; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>才能够正常读取bash配置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="netcat">Netcat&lt;/h3>
&lt;p>首先我Google到的是&lt;code>gnu-netcat&lt;/code>。但是运行时报错&lt;code>nc: core.c:372: core_tcp_connect: Assertion ret == 0' failed.&lt;/code>搜索了&lt;a href="https://github.com/msys2/MSYS2-packages/issues/1030">相关Issus&lt;/a>之后，我更换成了&lt;a href="https://www.archlinux.org/packages/community/x86_64/openbsd-netcat/">openbsd-netcat&lt;/a>，问题解决。&lt;/p>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ul>
&lt;li>WSL下无法使用Docker等涉及内核的操作，该缺陷在WSL2中被解决。&lt;/li>
&lt;li>默认无图形界面，使用GUI需自己安装X Server，较为麻烦。&lt;/li>
&lt;/ul>
&lt;h2 id="windows-terminal">Windows Terminal&lt;/h2>
&lt;p>注意，截至目前，Windows Terminal仍处于预览阶段，正式发布预计要到2020年4月。&lt;/p>
&lt;p>&lt;img src="./image-20191115231943950.png" alt="image-20191115231943950">&lt;/p>
&lt;p>安装WSL后，Windows Terminal能够自动识别WSL并添加至可用Terminal列表中。&lt;/p>
&lt;h3 id="bug">Bug&lt;/h3>
&lt;ul>
&lt;li>启动Shell后的工作目录为Windows当前用户的Home目录，而非Linux的用户Home目录。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./image-20191115232130240.png" alt="image-20191115232130240">&lt;/p>
&lt;p>​ 可以通过在配置文件中加入&lt;code>&amp;quot;commandline&amp;quot; : &amp;quot;wsl ~&amp;quot;&lt;/code>来解决，不过这个方案只适用于默认WSL发行版，对于其他发行版无效，可以通过在&lt;code>.bashrc&lt;/code>中添加一条判断语句来解决。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Windows Terminal目前暂无法自动添加至右键菜单上下文，需手动添加注册表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>往Terminal中粘贴内容是会自动在行间加空格。（更新：这个bug是由于\r\n与\n的处理问题，在0.7中被解决）&lt;/p>
&lt;p>&lt;img src="./image-20191115233340872.png" alt="image-20191115233340872">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="wsl2">WSL2&lt;/h2>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;p>可喜可贺，WSL终于能用Docker了。&lt;/p>
&lt;p>配置镜像源（无systemd）：&lt;/p>
&lt;blockquote>
&lt;p>在配置文件 &lt;code>/etc/default/docker&lt;/code> 中的 &lt;code>DOCKER_OPTS&lt;/code> 中配置Hub地址：&lt;/p>
&lt;pre tabindex="0">&lt;code>DOCKER_OPTS=&amp;#34;--registry-mirror=https://docker.mirrors.ustc.edu.cn/&amp;#34;
&lt;/code>&lt;/pre>&lt;p>重新启动服务:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo service docker restart
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;h3 id="坑-1">坑&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>官方宣称在18945之后的版本中Windows访问WSL提供的网络服务只需使用localhost即可（服务需绑定之0.0.0.0而不是127.0.0.1，因为实际上这些连接被认为是局域网中的连接）。&lt;/p>
&lt;p>尝试在Docker中使用。&lt;/p>
&lt;p>&lt;img src="./image-20191116233838273.png" alt="image-20191116233838273">&lt;/p>
&lt;p>使用&lt;code>netstat -ano&lt;/code>如下：&lt;/p>
&lt;p>&lt;img src="./image-20191116233912110.png" alt="image-20191116233912110">&lt;/p>
&lt;p>然而在Windows下只能使用IPv6地址访问：&lt;/p>
&lt;p>&lt;img src="./image-20191116233953189.png" alt="image-20191116233953189">b&lt;/p>
&lt;p>而不能使用IPv4：&lt;/p>
&lt;p>&lt;img src="./image-20191116234023402.png" alt="image-20191116234023402">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法使用systemd。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="pycharm">Pycharm&lt;/h2>
&lt;p>Pycharm能够将Python解释器设置为WSL中的Python。&lt;/p>
&lt;p>&lt;img src="./image-20191119150317595.png" alt="image-20191119150317595">&lt;/p>
&lt;p>同时能够将terminal设置为WSL：&lt;/p>
&lt;p>&lt;img src="./image-20191119150135830.png" alt="image-20191119150135830">&lt;/p>
&lt;p>只需要将Shell path设置成&lt;code>bash.exe&lt;/code>即可。注意设置为&lt;code>arch.exe&lt;/code>等自定义的发行版名称时，无法将当前工作目录传递给Shell。&lt;/p>
&lt;p>注意到由于WSL没有图形界面，无法在Python中运行GUI程序。&lt;/p>
&lt;h3 id="bug-1">Bug&lt;/h3>
&lt;p>&lt;del>在WSL中安装的包无法被识别：&lt;/del>&lt;/p>
&lt;p>&lt;img src="./image-20191119150405724.png" alt="image-20191119150405724">&lt;/p>
&lt;p>&lt;del>因此也无法使用这个包的自动补全、查看定义等一系列功能。&lt;/del>&lt;/p>
&lt;p>&lt;a href="https://www.jetbrains.com/help/pycharm/using-wsl-as-a-remote-interpreter.html">文档里&lt;/a>写得清清楚楚：&lt;/p>
&lt;p>&lt;img src="./image-20191208194351006.png" alt="image-20191208194351006">&lt;/p>
&lt;p>我错了，我应该看文档的。安装rsync之后问题解决。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
- https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>重新安装 Hexo</title><link>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</link><pubDate>Wed, 07 Aug 2019 16:03:29 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/ -&lt;h2 id="缘由">缘由&lt;/h2>
&lt;p>直接原因是 Github 的一个假装很贴心的功能：&lt;/p>
&lt;p>&lt;img src="./1565183420437.png" alt="1565183420437">&lt;/p>
&lt;p>由于我的 Hexo 已年代久远，所以有了一堆漏洞，在尝试 Github 的自动修复未果之后，同时也因为当初搞 Hexo 的时候不是很懂，文档也没写好，就决定重新装一遍。&lt;/p>
&lt;h2 id="过程">过程&lt;/h2>
&lt;h3 id="环境">环境&lt;/h3>
&lt;p>node.js 6.4.1&lt;/p>
&lt;p>hexo 3.9.0&lt;/p>
&lt;p>hexo-cli 2.0.0&lt;/p>
&lt;p>&lt;img src="./1565186395227.png" alt="1565186395227">&lt;/p>
&lt;p>官方文档上写需要 node.js 6.9+，然而我是 6.4，不知道会不会锅。&lt;/p>
&lt;h3 id="hexo-安装">Hexo 安装&lt;/h3>
&lt;p>首先，把仓库 clone 下来后，备份一份源文件。然后找一个空文件夹，按照官方文档的指引，执行：&lt;/p>
&lt;pre tabindex="0">&lt;code>hexo init
npm install
&lt;/code>&lt;/pre>&lt;p>（我发现现在 &lt;code>hexo init&lt;/code> 会同时自动执行 &lt;code>npm install&lt;/code>命令了）&lt;/p>
&lt;p>&lt;img src="./1565185528852.png" alt="1565185528852">&lt;/p>
&lt;p>然而还是有一个漏洞，不管了。&lt;/p>
&lt;p>然后删除原文件夹中文件（保留.git），把新的文件复制过去。同时把备份文件夹中的&lt;code>source&lt;/code>文件夹覆盖过去。（自动创建 .gitignore 好评）&lt;/p>
&lt;p>这时候基本的安装就完成了，接下来打开 Github Desktop 开始对比差异。&lt;/p>
&lt;p>在全局配置&lt;code>_config.yml&lt;/code>中，&lt;/p>
&lt;p>&lt;img src="./1565184499949.png" alt="1565184499949">&lt;/p>
&lt;p>这个配置是为每篇博文创建一个单独的资源文件夹。&lt;/p>
&lt;p>基本不用变，直接 discard changes 即可。&lt;/p>
&lt;p>&lt;code>.travis.yml&lt;/code> 和 &lt;code>deploy.sh&lt;/code> 也直接还原。&lt;/p>
&lt;p>&lt;a href="https://cjc7373.github.io/2018/10/13/Hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/#Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%8C%87%E5%BC%95">图片的问题&lt;/a>先不管，有问题再说。&lt;/p>
&lt;h3 id="主题安装">主题安装&lt;/h3>
&lt;p>剩下的差异全是主题文件。既然都重新搞了，那就换一个主题吧。在自己的 stars 里找了个主题 &lt;a href="https://github.com/yscoder/hexo-theme-indigo">hexo-theme-indigo&lt;/a>，看了下也支持 Analysis、Disqus，就决定用它了。&lt;/p>
&lt;p>接下来就开始按照&lt;a href="https://github.com/yscoder/hexo-theme-indigo/wiki">主题文档&lt;/a>来安装。首先 clone 仓库，我选择 card 分支，感觉比较好看（其实也没有对比）。&lt;/p>
&lt;p>在 hexo 根目录执行&lt;code>git clone -b card https://github.com/yscoder/hexo-theme-indigo.git themes/indigo&lt;/code>，下载主题文件。安装插件&lt;code>hexo-renderer-less hexo-generator-feed hexo-generator-json-content hexo-helper-qrcode&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;h2 id="开启标签页">开启标签页&lt;/h2>
&lt;pre tabindex="0">&lt;code>hexo new page tags
&lt;/code>&lt;/pre>&lt;p>修改 &lt;code>hexo/source/tags/index.md&lt;/code> 的元数据&lt;/p>
&lt;pre tabindex="0">&lt;code>layout: tags
comments: false
---
&lt;/code>&lt;/pre>&lt;h2 id="开启分类页">开启分类页&lt;/h2>
&lt;p>仅 card theme 支持。&lt;/p>
&lt;pre tabindex="0">&lt;code>hexo new page categories
&lt;/code>&lt;/pre>&lt;p>修改 &lt;code>hexo/source/categories/index.md&lt;/code> 的元数据&lt;/p>
&lt;pre tabindex="0">&lt;code>layout: categories
comments: false
---
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>话说用 Github Desktop commit 的时候因为主题文件夹也是一个 git 仓库，所以报错了，在命令行中 add，提示&lt;/p>
&lt;p>&lt;img src="./1565227855897.png" alt="1565227855897">&lt;/p>
&lt;p>于是我去 Google 了下&lt;a href="%5Bhttps://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97%5D(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)">子模块&lt;/a>，感觉这会让问题变复杂，同时这个主题已经很久没更新过了，干脆把主题的版本库删了吧。删除 &lt;code>.git&lt;/code>文件夹后，提交成功。&lt;/p>
&lt;h3 id="主题配置">主题配置&lt;/h3>
&lt;p>编辑站点配置文件。启用主题&lt;code>theme: indigo&lt;/code>。feed 是用来 rss 的，不管。jsonContent 用来搜索，如下：&lt;/p>
&lt;blockquote>
&lt;h3 id="jsoncontent配置">jsonContent配置&lt;/h3>
&lt;p>为了节约资源，可以对 jsonContent 插件生成的数据字段进行配置，减少数据文件大小。参考 &lt;a href="https://github.com/alexbruno/hexo-generator-json-content">hexo-generator-json-content&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>jsonContent:
meta: false
pages: false
posts:
title: true
date: true
path: true
text: true
raw: false
content: false
slug: false
updated: false
comments: false
link: false
permalink: false
excerpt: false
categories: false
tags: true
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>编辑主题配置文件，&lt;code>themes/indigo/_config.yml&lt;/code>。&lt;/p>
&lt;p>左侧菜单：&lt;/p>
&lt;blockquote>
&lt;p>添加新菜单项时，在 menu 下增加子属性即可。属性说明如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>menu:
link: # fontawesome图标，省略前缀，本主题前缀为 icon-，必须
text: About # 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写
url: /about # 链接，绝对或相对路径，必须
target: _blank # 是否跳出，省略则在当前页面打开
&lt;/code>&lt;/pre>&lt;p>fontawesome 图标已集成到主题中，你可以到 &lt;a href="http://fontawesome.io/icons/">这个页面&lt;/a> 挑选合适的图标。&lt;/p>&lt;/blockquote>
&lt;p>我修改为如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>menu:
home:
text: 主页
url: /
archives:
url: /archives
tags:
url: /tags
th-list:
text: Categories
url: /categories
github:
url: https://github.com/cjc7373
target: _blank
user:
text: 关于
url: /about
&lt;/code>&lt;/pre>&lt;p>其余改动略。&lt;/p>
&lt;p>由于这个主题为国人制作，配置文件都带有中文注释，还是很友好的。&lt;/p>
&lt;h2 id="修锅">修锅&lt;/h2>
&lt;p>图片不出意外地崩了。。而且不止首页图片，是所有。。装插件试试。&lt;code>npm install hexo-asset-image --save&lt;/code>。装完又多了两个漏洞，这插件是有多久没更新了。。自动修复试试。&lt;/p>
&lt;p>&lt;img src="./1565232540544.png" alt="1565232540544">&lt;/p>
&lt;p>GG。&lt;/p>
&lt;p>语言是错的。hexo 配置文件改成 zh-cn 试试。&lt;/p>
&lt;p>头像好丑。改成猫头鹰了。&lt;/p>
&lt;hr>
&lt;p>坑爹啊，img不说清楚在哪里。。我在根目录下创建了img，结果找了一下发现是在&lt;code>themes\indigo\source\img&lt;/code>下，图片还是炸。待修。暂时回滚至以前的版本。&lt;/p>
&lt;h2 id="回滚">回滚&lt;/h2>
&lt;p>Updated in 2019/10/7&lt;/p>
&lt;p>&lt;img src="./1570428603861.png" alt="1570428603861">&lt;/p>
&lt;p>时隔两个月,重新拾回了我的博客..&lt;/p>
&lt;p>这个主题的锅不想修了..&lt;/p>
&lt;p>又看了几个主题之后,看看似乎原主题也挺好的..&lt;/p>
&lt;p>所以我又用回了 Next..&lt;/p>
&lt;p>看了一下 Next 换维护者了..&lt;/p>
&lt;p>&lt;img src="./1570429427612.png" alt="1570429427612">&lt;/p>
&lt;p>仓库地址从&lt;a href="https://github.com/iissnan/hexo-theme-next">这个&lt;/a>变为&lt;a href="https://github.com/theme-next/hexo-theme-next">这个&lt;/a>(话说居然不是 fork 过去的)&lt;/p>
&lt;p>大致过程是&lt;del>重来一遍上述过程&lt;/del>回退到某一个提交即可.&lt;/p>
&lt;p>不过我把 node.js 的版本更新到了 v12.11.1&lt;/p>
&lt;p>首先这四个 commit 记录不需要了,我建了个新的分支 theme-indigo 扔着..&lt;/p>
&lt;p>然后,先fetch一下,因为我在远程仓库上回滚了之前的更改..然后发现记错了,回滚的是 master 分支..&lt;/p>
&lt;p>然后看一下 log, 回退到 2939aa 这个 commit.&lt;/p>
&lt;p>&lt;img src="./1570429889982.png" alt="1570429889982">&lt;/p>
&lt;p>&lt;code>git reset --hard 2939aa&lt;/code>&lt;/p>
&lt;p>此时本地分支已经落后于远程分支了,需要强制推送一遍.&lt;code>git push --force&lt;/code>&lt;/p>
&lt;p>&lt;img src="./1570430098775.png" alt="1570430098775">&lt;/p>
&lt;p>看了一下这个提交是 [Hexo 安装](#Hexo 安装) 完成之后.&lt;/p>
&lt;p>接下来安装主题, 先从 Github 下载一个 release. 目前是 v7.4.1&lt;/p>
&lt;p>看了一眼&lt;a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md">从5.x升级&lt;/a>文档, 全局配置中 language 要从 zh-Hans 变为 zh-CN&lt;/p>
&lt;p>&lt;del>然后并没有发现其他配置文档&lt;/del> 是有的, 只不过是英文, 在&lt;a href="https://theme-next.org/docs/getting-started/">这里&lt;/a>, 只能一行一行看 &lt;code>_config.yml&lt;/code> 了.&lt;/p>
&lt;p>用 sublimerge 对比一下新旧配置文件的差异..&lt;/p>
&lt;p>&lt;img src="./1570431870938.png" alt="1570431870938">&lt;/p>
&lt;p>瞎改了一点.&lt;/p>
&lt;p>ok. 测试一下, 果然图片又崩了. 原因引用的图片地址多了一级. 把多余的地址删掉是能够正常显示的.&lt;/p>
&lt;p>&lt;img src="./1570432899620.png" alt="1570432899620">&lt;/p>
&lt;p>然而原来那个插件 &lt;code>hexo-asset-image&lt;/code> 没用了. 无奈继续 Google, 找到了一篇&lt;a href="https://liolok.github.io/en/How-to-Add-Image-to-Hexo-Blog-Post/">英文博文&lt;/a>, 指出了另一个插件&lt;a href="https://github.com/liolok/hexo-asset-link">hexo-asset-link&lt;/a>, 尝试之, 发现能完美在首页及内容页显示图片.&lt;/p>
&lt;p>至此, 我的博客算是修好了. (这篇博客写得不成样子,大雾,希望没人看到吧&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>两次修锅的过程, 让我看到了 Hexo 的插入图片的巨坑. 用图床能够避免这个问题, 然而图床也有缺点, 我还是更喜欢直接插入图片. 感觉上这部分是由 Hexo 来处理的, 与主题无关, 所以还是可以换个主题玩玩的, 目前来说, 还是先专注于内容吧.&lt;/p>
&lt;p>有时间也可以试试 Typecho, Jekyll, Pelican, Hugo 等其他博客生成器.&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>大二下学期期末复习</title><link>https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/ -&lt;h2 id="软件工程试卷">软件工程试卷&lt;/h2>
&lt;p>来源： &lt;a href="https://tellyouwhat.cn/p/northwest-university-software-engineering-review-materials/">Harbor Zeng&lt;/a>&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8lnllsj20rt112adk.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8izobuj22eo37kb29.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8p7mccj20rt112adg.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8t4qtvj20rt11241p.jpg" alt="img">&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item></channel></rss>