<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coherence's Blog</title><link>https://blog.coherence.codes/</link><description>Recent content on Coherence's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Tue, 05 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/index.xml" rel="self" type="application/rss+xml"/><item><title>WSL使用体验</title><link>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Sun, 08 Dec 2019 19:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/ -&lt;p>首先，WSL真香！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="开启wsl">开启WSL&lt;/h2>
&lt;p>最简单的方式是使用管理员权限运行Powershell，然后输入：&lt;/p>
&lt;p>&lt;code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/code>&lt;/p>
&lt;p>重启电脑，然后在应用商店中安装WSL发行版。&lt;/p>
&lt;h2 id="arch">Arch&lt;/h2>
&lt;p>注意到WSL是没有Arch Linux发行版的（以前有一个非官方的，很快被下架了），但是我们有办法添加Arch发行版。去&lt;a href="https://github.com/yuk7/ArchWSL">这个仓库&lt;/a>下载打包好的appx文件和证书，首先将证书导入至受信任的根证书颁发机构，然后安装appx即可。&lt;/p>
&lt;h2 id="体验">体验&lt;/h2>
&lt;h3 id="坑">坑&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>默认WSL不会读取&lt;code>~/.bashrc&lt;/code>而会读取&lt;code>~/.bash_profile&lt;/code>，所以需要在&lt;code>~/.bash_profile&lt;/code>中写入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -f ~/.bashrc &lt;span style="color:#f92672">]]&lt;/span> ; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>才能够正常读取bash配置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="netcat">Netcat&lt;/h3>
&lt;p>首先我Google到的是&lt;code>gnu-netcat&lt;/code>。但是运行时报错&lt;code>nc: core.c:372: core_tcp_connect: Assertion ret == 0' failed.&lt;/code>搜索了&lt;a href="https://github.com/msys2/MSYS2-packages/issues/1030">相关Issus&lt;/a>之后，我更换成了&lt;a href="https://www.archlinux.org/packages/community/x86_64/openbsd-netcat/">openbsd-netcat&lt;/a>，问题解决。&lt;/p>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ul>
&lt;li>WSL下无法使用Docker等涉及内核的操作，该缺陷在WSL2中被解决。&lt;/li>
&lt;li>默认无图形界面，使用GUI需自己安装X Server，较为麻烦。&lt;/li>
&lt;/ul>
&lt;h2 id="windows-terminal">Windows Terminal&lt;/h2>
&lt;p>注意，截至目前，Windows Terminal仍处于预览阶段，正式发布预计要到2020年4月。&lt;/p>
&lt;p>&lt;img src="./image-20191115231943950.png" alt="image-20191115231943950">&lt;/p>
&lt;p>安装WSL后，Windows Terminal能够自动识别WSL并添加至可用Terminal列表中。&lt;/p>
&lt;h3 id="bug">Bug&lt;/h3>
&lt;ul>
&lt;li>启动Shell后的工作目录为Windows当前用户的Home目录，而非Linux的用户Home目录。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./image-20191115232130240.png" alt="image-20191115232130240">&lt;/p>
&lt;p>​ 可以通过在配置文件中加入&lt;code>&amp;quot;commandline&amp;quot; : &amp;quot;wsl ~&amp;quot;&lt;/code>来解决，不过这个方案只适用于默认WSL发行版，对于其他发行版无效，可以通过在&lt;code>.bashrc&lt;/code>中添加一条判断语句来解决。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Windows Terminal目前暂无法自动添加至右键菜单上下文，需手动添加注册表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>往Terminal中粘贴内容是会自动在行间加空格。（更新：这个bug是由于\r\n与\n的处理问题，在0.7中被解决）&lt;/p>
&lt;p>&lt;img src="./image-20191115233340872.png" alt="image-20191115233340872">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="wsl2">WSL2&lt;/h2>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;p>可喜可贺，WSL终于能用Docker了。&lt;/p>
&lt;p>配置镜像源（无systemd）：&lt;/p>
&lt;blockquote>
&lt;p>在配置文件 &lt;code>/etc/default/docker&lt;/code> 中的 &lt;code>DOCKER_OPTS&lt;/code> 中配置Hub地址：&lt;/p>
&lt;pre tabindex="0">&lt;code>DOCKER_OPTS=&amp;#34;--registry-mirror=https://docker.mirrors.ustc.edu.cn/&amp;#34;
&lt;/code>&lt;/pre>&lt;p>重新启动服务:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo service docker restart
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;h3 id="坑-1">坑&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>官方宣称在18945之后的版本中Windows访问WSL提供的网络服务只需使用localhost即可（服务需绑定之0.0.0.0而不是127.0.0.1，因为实际上这些连接被认为是局域网中的连接）。&lt;/p>
&lt;p>尝试在Docker中使用。&lt;/p>
&lt;p>&lt;img src="./image-20191116233838273.png" alt="image-20191116233838273">&lt;/p>
&lt;p>使用&lt;code>netstat -ano&lt;/code>如下：&lt;/p>
&lt;p>&lt;img src="./image-20191116233912110.png" alt="image-20191116233912110">&lt;/p>
&lt;p>然而在Windows下只能使用IPv6地址访问：&lt;/p>
&lt;p>&lt;img src="./image-20191116233953189.png" alt="image-20191116233953189">b&lt;/p>
&lt;p>而不能使用IPv4：&lt;/p>
&lt;p>&lt;img src="./image-20191116234023402.png" alt="image-20191116234023402">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法使用systemd。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="pycharm">Pycharm&lt;/h2>
&lt;p>Pycharm能够将Python解释器设置为WSL中的Python。&lt;/p>
&lt;p>&lt;img src="./image-20191119150317595.png" alt="image-20191119150317595">&lt;/p>
&lt;p>同时能够将terminal设置为WSL：&lt;/p>
&lt;p>&lt;img src="./image-20191119150135830.png" alt="image-20191119150135830">&lt;/p>
&lt;p>只需要将Shell path设置成&lt;code>bash.exe&lt;/code>即可。注意设置为&lt;code>arch.exe&lt;/code>等自定义的发行版名称时，无法将当前工作目录传递给Shell。&lt;/p>
&lt;p>注意到由于WSL没有图形界面，无法在Python中运行GUI程序。&lt;/p>
&lt;h3 id="bug-1">Bug&lt;/h3>
&lt;p>&lt;del>在WSL中安装的包无法被识别：&lt;/del>&lt;/p>
&lt;p>&lt;img src="./image-20191119150405724.png" alt="image-20191119150405724">&lt;/p>
&lt;p>&lt;del>因此也无法使用这个包的自动补全、查看定义等一系列功能。&lt;/del>&lt;/p>
&lt;p>&lt;a href="https://www.jetbrains.com/help/pycharm/using-wsl-as-a-remote-interpreter.html">文档里&lt;/a>写得清清楚楚：&lt;/p>
&lt;p>&lt;img src="./image-20191208194351006.png" alt="image-20191208194351006">&lt;/p>
&lt;p>我错了，我应该看文档的。安装rsync之后问题解决。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
- https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>重新安装 Hexo</title><link>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</link><pubDate>Wed, 07 Aug 2019 16:03:29 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/ -&lt;h2 id="缘由">缘由&lt;/h2>
&lt;p>直接原因是 Github 的一个假装很贴心的功能：&lt;/p>
&lt;p>&lt;img src="./1565183420437.png" alt="1565183420437">&lt;/p>
&lt;p>由于我的 Hexo 已年代久远，所以有了一堆漏洞，在尝试 Github 的自动修复未果之后，同时也因为当初搞 Hexo 的时候不是很懂，文档也没写好，就决定重新装一遍。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="过程">过程&lt;/h2>
&lt;h3 id="环境">环境&lt;/h3>
&lt;p>node.js 6.4.1&lt;/p>
&lt;p>hexo 3.9.0&lt;/p>
&lt;p>hexo-cli 2.0.0&lt;/p>
&lt;p>&lt;img src="./1565186395227.png" alt="1565186395227">&lt;/p>
&lt;p>官方文档上写需要 node.js 6.9+，然而我是 6.4，不知道会不会锅。&lt;/p>
&lt;h3 id="hexo-安装">Hexo 安装&lt;/h3>
&lt;p>首先，把仓库 clone 下来后，备份一份源文件。然后找一个空文件夹，按照官方文档的指引，执行：&lt;/p>
&lt;pre tabindex="0">&lt;code>hexo init
npm install
&lt;/code>&lt;/pre>&lt;p>（我发现现在 &lt;code>hexo init&lt;/code> 会同时自动执行 &lt;code>npm install&lt;/code>命令了）&lt;/p>
&lt;p>&lt;img src="./1565185528852.png" alt="1565185528852">&lt;/p>
&lt;p>然而还是有一个漏洞，不管了。&lt;/p>
&lt;p>然后删除原文件夹中文件（保留.git），把新的文件复制过去。同时把备份文件夹中的&lt;code>source&lt;/code>文件夹覆盖过去。（自动创建 .gitignore 好评）&lt;/p>
&lt;p>这时候基本的安装就完成了，接下来打开 Github Desktop 开始对比差异。&lt;/p>
&lt;p>在全局配置&lt;code>_config.yml&lt;/code>中，&lt;/p>
&lt;p>&lt;img src="./1565184499949.png" alt="1565184499949">&lt;/p>
&lt;p>这个配置是为每篇博文创建一个单独的资源文件夹。&lt;/p>
&lt;p>基本不用变，直接 discard changes 即可。&lt;/p>
&lt;p>&lt;code>.travis.yml&lt;/code> 和 &lt;code>deploy.sh&lt;/code> 也直接还原。&lt;/p>
&lt;p>&lt;a href="https://cjc7373.github.io/2018/10/13/Hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/#Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%8C%87%E5%BC%95">图片的问题&lt;/a>先不管，有问题再说。&lt;/p>
&lt;h3 id="主题安装">主题安装&lt;/h3>
&lt;p>剩下的差异全是主题文件。既然都重新搞了，那就换一个主题吧。在自己的 stars 里找了个主题 &lt;a href="https://github.com/yscoder/hexo-theme-indigo">hexo-theme-indigo&lt;/a>，看了下也支持 Analysis、Disqus，就决定用它了。&lt;/p>
&lt;p>接下来就开始按照&lt;a href="https://github.com/yscoder/hexo-theme-indigo/wiki">主题文档&lt;/a>来安装。首先 clone 仓库，我选择 card 分支，感觉比较好看（其实也没有对比）。&lt;/p>
&lt;p>在 hexo 根目录执行&lt;code>git clone -b card https://github.com/yscoder/hexo-theme-indigo.git themes/indigo&lt;/code>，下载主题文件。安装插件&lt;code>hexo-renderer-less hexo-generator-feed hexo-generator-json-content hexo-helper-qrcode&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;h2 id="开启标签页">开启标签页&lt;/h2>
&lt;pre tabindex="0">&lt;code>hexo new page tags
&lt;/code>&lt;/pre>&lt;p>修改 &lt;code>hexo/source/tags/index.md&lt;/code> 的元数据&lt;/p>
&lt;pre tabindex="0">&lt;code>layout: tags
comments: false
---
&lt;/code>&lt;/pre>&lt;h2 id="开启分类页">开启分类页&lt;/h2>
&lt;p>仅 card theme 支持。&lt;/p>
&lt;pre tabindex="0">&lt;code>hexo new page categories
&lt;/code>&lt;/pre>&lt;p>修改 &lt;code>hexo/source/categories/index.md&lt;/code> 的元数据&lt;/p>
&lt;pre tabindex="0">&lt;code>layout: categories
comments: false
---
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>话说用 Github Desktop commit 的时候因为主题文件夹也是一个 git 仓库，所以报错了，在命令行中 add，提示&lt;/p>
&lt;p>&lt;img src="./1565227855897.png" alt="1565227855897">&lt;/p>
&lt;p>于是我去 Google 了下&lt;a href="%5Bhttps://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97%5D(https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)">子模块&lt;/a>，感觉这会让问题变复杂，同时这个主题已经很久没更新过了，干脆把主题的版本库删了吧。删除 &lt;code>.git&lt;/code>文件夹后，提交成功。&lt;/p>
&lt;h3 id="主题配置">主题配置&lt;/h3>
&lt;p>编辑站点配置文件。启用主题&lt;code>theme: indigo&lt;/code>。feed 是用来 rss 的，不管。jsonContent 用来搜索，如下：&lt;/p>
&lt;blockquote>
&lt;h3 id="jsoncontent配置">jsonContent配置&lt;/h3>
&lt;p>为了节约资源，可以对 jsonContent 插件生成的数据字段进行配置，减少数据文件大小。参考 &lt;a href="https://github.com/alexbruno/hexo-generator-json-content">hexo-generator-json-content&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>jsonContent:
meta: false
pages: false
posts:
title: true
date: true
path: true
text: true
raw: false
content: false
slug: false
updated: false
comments: false
link: false
permalink: false
excerpt: false
categories: false
tags: true
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>编辑主题配置文件，&lt;code>themes/indigo/_config.yml&lt;/code>。&lt;/p>
&lt;p>左侧菜单：&lt;/p>
&lt;blockquote>
&lt;p>添加新菜单项时，在 menu 下增加子属性即可。属性说明如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>menu:
link: # fontawesome图标，省略前缀，本主题前缀为 icon-，必须
text: About # 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写
url: /about # 链接，绝对或相对路径，必须
target: _blank # 是否跳出，省略则在当前页面打开
&lt;/code>&lt;/pre>&lt;p>fontawesome 图标已集成到主题中，你可以到 &lt;a href="http://fontawesome.io/icons/">这个页面&lt;/a> 挑选合适的图标。&lt;/p>
&lt;/blockquote>
&lt;p>我修改为如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>menu:
home:
text: 主页
url: /
archives:
url: /archives
tags:
url: /tags
th-list:
text: Categories
url: /categories
github:
url: https://github.com/cjc7373
target: _blank
user:
text: 关于
url: /about
&lt;/code>&lt;/pre>&lt;p>其余改动略。&lt;/p>
&lt;p>由于这个主题为国人制作，配置文件都带有中文注释，还是很友好的。&lt;/p>
&lt;h2 id="修锅">修锅&lt;/h2>
&lt;p>图片不出意外地崩了。。而且不止首页图片，是所有。。装插件试试。&lt;code>npm install hexo-asset-image --save&lt;/code>。装完又多了两个漏洞，这插件是有多久没更新了。。自动修复试试。&lt;/p>
&lt;p>&lt;img src="./1565232540544.png" alt="1565232540544">&lt;/p>
&lt;p>GG。&lt;/p>
&lt;p>语言是错的。hexo 配置文件改成 zh-cn 试试。&lt;/p>
&lt;p>头像好丑。改成猫头鹰了。&lt;/p>
&lt;hr>
&lt;p>坑爹啊，img不说清楚在哪里。。我在根目录下创建了img，结果找了一下发现是在&lt;code>themes\indigo\source\img&lt;/code>下，图片还是炸。待修。暂时回滚至以前的版本。&lt;/p>
&lt;h2 id="回滚">回滚&lt;/h2>
&lt;p>Updated in 2019/10/7&lt;/p>
&lt;p>&lt;img src="./1570428603861.png" alt="1570428603861">&lt;/p>
&lt;p>时隔两个月,重新拾回了我的博客..&lt;/p>
&lt;p>这个主题的锅不想修了..&lt;/p>
&lt;p>又看了几个主题之后,看看似乎原主题也挺好的..&lt;/p>
&lt;p>所以我又用回了 Next..&lt;/p>
&lt;p>看了一下 Next 换维护者了..&lt;/p>
&lt;p>&lt;img src="./1570429427612.png" alt="1570429427612">&lt;/p>
&lt;p>仓库地址从&lt;a href="https://github.com/iissnan/hexo-theme-next">这个&lt;/a>变为&lt;a href="https://github.com/theme-next/hexo-theme-next">这个&lt;/a>(话说居然不是 fork 过去的)&lt;/p>
&lt;p>大致过程是&lt;del>重来一遍上述过程&lt;/del>回退到某一个提交即可.&lt;/p>
&lt;p>不过我把 node.js 的版本更新到了 v12.11.1&lt;/p>
&lt;p>首先这四个 commit 记录不需要了,我建了个新的分支 theme-indigo 扔着..&lt;/p>
&lt;p>然后,先fetch一下,因为我在远程仓库上回滚了之前的更改..然后发现记错了,回滚的是 master 分支..&lt;/p>
&lt;p>然后看一下 log, 回退到 2939aa 这个 commit.&lt;/p>
&lt;p>&lt;img src="./1570429889982.png" alt="1570429889982">&lt;/p>
&lt;p>&lt;code>git reset --hard 2939aa&lt;/code>&lt;/p>
&lt;p>此时本地分支已经落后于远程分支了,需要强制推送一遍.&lt;code>git push --force&lt;/code>&lt;/p>
&lt;p>&lt;img src="./1570430098775.png" alt="1570430098775">&lt;/p>
&lt;p>看了一下这个提交是 [Hexo 安装](#Hexo 安装) 完成之后.&lt;/p>
&lt;p>接下来安装主题, 先从 Github 下载一个 release. 目前是 v7.4.1&lt;/p>
&lt;p>看了一眼&lt;a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md">从5.x升级&lt;/a>文档, 全局配置中 language 要从 zh-Hans 变为 zh-CN&lt;/p>
&lt;p>&lt;del>然后并没有发现其他配置文档&lt;/del> 是有的, 只不过是英文, 在&lt;a href="https://theme-next.org/docs/getting-started/">这里&lt;/a>, 只能一行一行看 &lt;code>_config.yml&lt;/code> 了.&lt;/p>
&lt;p>用 sublimerge 对比一下新旧配置文件的差异..&lt;/p>
&lt;p>&lt;img src="./1570431870938.png" alt="1570431870938">&lt;/p>
&lt;p>瞎改了一点.&lt;/p>
&lt;p>ok. 测试一下, 果然图片又崩了. 原因引用的图片地址多了一级. 把多余的地址删掉是能够正常显示的.&lt;/p>
&lt;p>&lt;img src="./1570432899620.png" alt="1570432899620">&lt;/p>
&lt;p>然而原来那个插件 &lt;code>hexo-asset-image&lt;/code> 没用了. 无奈继续 Google, 找到了一篇&lt;a href="https://liolok.github.io/en/How-to-Add-Image-to-Hexo-Blog-Post/">英文博文&lt;/a>, 指出了另一个插件&lt;a href="https://github.com/liolok/hexo-asset-link">hexo-asset-link&lt;/a>, 尝试之, 发现能完美在首页及内容页显示图片.&lt;/p>
&lt;p>至此, 我的博客算是修好了. (这篇博客写得不成样子,大雾,希望没人看到吧&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>两次修锅的过程, 让我看到了 Hexo 的插入图片的巨坑. 用图床能够避免这个问题, 然而图床也有缺点, 我还是更喜欢直接插入图片. 感觉上这部分是由 Hexo 来处理的, 与主题无关, 所以还是可以换个主题玩玩的, 目前来说, 还是先专注于内容吧.&lt;/p>
&lt;p>有时间也可以试试 Typecho, Jekyll, Pelican, Hugo 等其他博客生成器.&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>大二下学期期末复习</title><link>https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/ -&lt;h2 id="软件工程试卷">软件工程试卷&lt;/h2>
&lt;p>来源： &lt;a href="https://tellyouwhat.cn/p/northwest-university-software-engineering-review-materials/">Harbor Zeng&lt;/a>&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8lnllsj20rt112adk.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8izobuj22eo37kb29.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8p7mccj20rt112adg.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="./bd61005egy1g0cx8t4qtvj20rt11241p.jpg" alt="img">&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>软通实习</title><link>https://blog.coherence.codes/posts/2020_and_before/isoftstone-practice/</link><pubDate>Wed, 17 Jul 2019 15:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/isoftstone-practice/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/isoftstone-practice/ -&lt;h2 id="序">序&lt;/h2>
&lt;p>二年级下学期期末，有一个两周的实习，学校给了我们三个选项，其中软通算是知名度最高的一家公司了。
&lt;img src="./isoftstone.png" alt="“isoftstone”的图片搜索结果">&lt;/p>
&lt;p>然而网上这家公司的风评很差，不过其他两家似乎更差，于是我们班大概四分之三的人都来了软通。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="经历">经历&lt;/h2>
&lt;p>实习第一天，上午讲的开发流程，团队角色，每日例行项目好似我们已经接手了一个实际项目，然而到了下午瞬间变成培训班，开始教我们配置环境。看下发的文档是用 Java Spring Boot 框架来开发。第二天又开始复习 Java。然后到了第三天，负责我们的老师（就叫他项目经理好了）突然说，你们想用什么技术就用什么技术吧。终于不用写 Java 了（逃&lt;/p>
&lt;p>我们大概使用的是 Scrum 敏捷开发方法，最有特色的一点大概就是每日站会了。还有 Story 列表其实也挺不错的，只是没有贴在公告板上感觉失去了灵魂。&lt;/p>
&lt;p>可能是时间短的原因，从一开始需求包括 Story 列表就已经确定了，我认为如果只是说做一个什么系统而不说具体需求会让大家的产品更有差异化，亮点也会更多。&lt;/p>
&lt;h2 id="技术栈">技术栈&lt;/h2>
&lt;p>由于我很倾向 Python，加上青岛大学的开源 OJ 采用的就是 Django+Vue 前后端分离的开发模式，于是我便也想采用这个模式。&lt;/p>
&lt;p>最终我们决定采用前后端完全分离，前后端之间使用 HTTP 协议通信。前端采用：HTML+CSS+JavaScript（JQuery+AJAX），后端采用：Django，数据库采用：PostgreSQL&lt;/p>
&lt;h2 id="版本管理">版本管理&lt;/h2>
&lt;p>我有一些 Git 的知识，然而软通提供的版本管理工具是 SVN。用了一段时间后发现，两个工具没有本质的区别，最大的大概是 SVN 需要中心服务器，权限控制似乎也比较强大，所以像在公司内部比较好用，而 Git 分布式，分支创建极为方便，在开源社区中被广泛使用。&lt;/p>
&lt;p>&lt;img src="./1563352303687.png" alt="1563352303687">&lt;/p>
&lt;p>然而我们甚至没有用到分支这个功能，总体上还是没有利用好版本管理。&lt;/p>
&lt;h2 id="前端三剑客">前端：三剑客&lt;/h2>
&lt;p>zpc 第一天就不知道在哪找了个模板网站，然后冲了十块钱下了个模板。接下来就开始改改改。&lt;/p>
&lt;h3 id="调试">调试&lt;/h3>
&lt;p>一个问题是，后端的代码如何给前端调试。我们选择：&lt;/p>
&lt;ol>
&lt;li>后端首先使用 Django 的本地服务器，用 Postman 进行测试，测试通过后上传代码。&lt;/li>
&lt;li>不定期部署至服务器上&lt;/li>
&lt;li>前端从服务器调用接口调试&lt;/li>
&lt;/ol>
&lt;p>然而，在其他组答辩的时候，我们才知道有个东西叫 &lt;a href="http://mockjs.com/">mock&lt;/a>，能够简化调试难度。&lt;/p>
&lt;h2 id="后端django">后端：Django&lt;/h2>
&lt;p>很早就听说了 Python Web 一些有名的框架，后来又知道了青岛大学的开源 OJ 后端使用的就是 Django，所以很想尝试一下。曾经看过几节慕课，也看了一些官方文档（一开始是真的看不懂）。在做微信小程序的时候，我就想用 Django，奈何技术不够，放弃了。&lt;/p>
&lt;p>实习前，我去找 zjb 两小时速成了一下 Django，发现 Django 虽然是 MTV（Model——Template——View）三级结构，但是前后端分离的话就没有模板了，同时我们用了 REST Framework，在函数名中直接声明要调用的方法，大大简化了开发。REST Framework 也提供了&lt;a href="https://q1mi.github.io/Django-REST-framework-documentation/">官方中文文档&lt;/a>，不过感觉写得不是很好。&lt;/p>
&lt;p>后端代码非常简单，我们先用&lt;code>token = request.COOKIES.get(&amp;quot;token&amp;quot;)&lt;/code>获取token，查询&lt;code>user = User.objects.get(userToken=token)&lt;/code>，若 token 无效则会抛出&lt;code>User.DoesNotExist&lt;/code>错误，查询操作之后调用一个序列化方法&lt;code>users = serializers.serialize(&amp;quot;json&amp;quot;, allMessage, fields=(&amp;quot;userID&amp;quot;))&lt;/code>，但是如果直接这样返回会有问题，所以需要把它转化成字典类型&lt;code>rtn['data']=json.loads(users)&lt;/code>，然后调用&lt;code>JsonResponse&lt;/code>返回。&lt;/p>
&lt;p>Django 查询数据库返回的是一个 &lt;a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/">QuerySet&lt;/a> 对象，我们能对它进行很多操作，但是其实我们都没用到..&lt;/p>
&lt;h3 id="cookies">Cookies&lt;/h3>
&lt;p>我一开始以为 Cookies 是前端负责维护的，后来发现这只是浏览器的工作。所以实际上 Cookies 是后端维护的。在登陆时设置 Cookie，调用 API 时获取 Cookie，退出时删除 Cookie 即可。&lt;/p>
&lt;h3 id="测试">测试&lt;/h3>
&lt;p>我们用了 Postman 模拟 HTTP 请求进行测试，很可惜的是没有用到 Django 的自动化测试。&lt;/p>
&lt;h3 id="几个坑">几个坑&lt;/h3>
&lt;p>Django 的文档宣称：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>会自动重新加载的服务器 &lt;a href="https://docs.djangoproject.com/zh-hans/2.2/ref/django-admin/#django-admin-runserver">&lt;code>runserver&lt;/code>&lt;/a>&lt;/strong>&lt;/p>
&lt;p>用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。所以你不需要为了让修改的代码生效而频繁的重新启动服务器。然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。&lt;/p>
&lt;/blockquote>
&lt;p>然而有时候重新载入并不会生效（可能是 PyCharm 的问题？），这种时候就很烦..&lt;/p>
&lt;p>数据库中的&lt;code>DateTimeField&lt;/code>字段存储的时间总是 UTC 时间，在&lt;code>settings.py&lt;/code>中设置：&lt;/p>
&lt;pre tabindex="0">&lt;code>TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39;
USE_TZ = False
&lt;/code>&lt;/pre>&lt;p>这样返回的时间是正常的，虽然数据库里的时间还是 UTC 时间，不过不影响了。&lt;/p>
&lt;h2 id="数据库postgresql">数据库：&lt;strong>PostgreSQL&lt;/strong>&lt;/h2>
&lt;p>据说 PostgreSQL 和 MySQL 的区别是..&lt;/p>
&lt;p>&lt;img src="./1563367521827.png" alt="1563367521827">&lt;/p>
&lt;p>&lt;img src="./1563367537890.png" alt="1563367537890">&lt;/p>
&lt;p>虽说 Django 官方支持 PostgreSQL，而且我们的数据库部署在服务器上，但是本地还是要一个中间件&lt;code>psycopg2 &lt;/code>，在 Windows 下安装无问题，在 Linux 下需要一个额外的包 &lt;code>libpq-dev&lt;/code>，而在 Mac 下需要先安装 PostgreSQL。这也是一个坑点。&lt;/p>
&lt;p>图形化管理界面方面，我使用了 pgadmin，一开始我以为这是个客户端，还奇怪为什么它提供 Docker 镜像，下完才发现它是网页端。果断卸载然后 docker pull..&lt;/p>
&lt;p>数据库由于我们的设计问题，改了一万次。&lt;/p>
&lt;p>&lt;img src="./1563368286617.png" alt="1563368286617">&lt;/p>
&lt;p>七次其实还是我们重置过一次数据库的结果，真实改动可能有十一二次吧。虽然 Django 提供了方便的 migrate 功能，但是这功能锅很多，能不改还是尽量不改。&lt;/p>
&lt;ul>
&lt;li>在自己设置主键然后又取消使用自动主键时，Django 会报没有默认值的错。？？？AutoField 你要什么默认值。网上也有同样的情况，应该是 Django 的 Bug。&lt;/li>
&lt;li>在改某张表的时候一直碰到报错一个不存在的列不存在，这张表就似乎坏了。我们的解决方案是重建一张新的表2333&lt;/li>
&lt;/ul>
&lt;h2 id="接口">接口&lt;/h2>
&lt;h3 id="文档">文档&lt;/h3>
&lt;p>我们的接口文档直接写在 Story 列表后面。主要写明了接口地址，方法（GET，POST，PUT，DELETE，我是想 RESTful 的，可是其他人基本随缘了），请求字段，响应字段，以及相应的解释和示例。&lt;/p>
&lt;h3 id="跨域">跨域&lt;/h3>
&lt;p>前端调试接口的时候产生了跨域的问题。Cookie，Ajax 请求都会遭到浏览器&lt;a href="https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html">同源策略&lt;/a>的限制。临时的解决方案是，在 Django 上装一个插件 &lt;a href="https://github.com/ottoyiu/django-cors-headers">&lt;code>django-cors-headers&lt;/code>&lt;/a>，并且修改&lt;code>settings.py&lt;/code>，在&lt;code>INSTALLED_APPS&lt;/code>中加入&lt;code>corsheaders&lt;/code>，在&lt;code>MIDDLEWARE&lt;/code>中加入&lt;code>corsheaders.middleware.CorsMiddleware&lt;/code>（位置尽量靠前），并设置字段：&lt;/p>
&lt;pre tabindex="0">&lt;code>CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
&lt;/code>&lt;/pre>&lt;p>而在前端每个 Ajax 请求中加上：&lt;/p>
&lt;p>&lt;img src="./1563353270812.png" alt="1563353270812">&lt;/p>
&lt;p>而在生产环境中由于同源，所以不存在跨域的问题。&lt;/p>
&lt;p>然而，一个新的问题是，本地浏览器并不能够成功地存储 Cookie，当时的解决办法是，每改动一个页面就部署至服务器上进行调试，然而这个方法效率极低。后来我发现其实这只是 Chrome 浏览器的问题，其他浏览器则没有这个问题。&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>在开发中，采取的方案是前端静态网页由 Nginx 部署，而后端 Django 代码则使用 Django 自带的服务器部署，而显然，这绝不能用于生产环境。&lt;/p>
&lt;blockquote>
&lt;p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests.&lt;/p>
&lt;/blockquote>
&lt;p>（不过我还是用了，甚至都没关 DEBUG 选项）&lt;/p>
&lt;p>因为 Django 服务器使用 &lt;code>python3 manage.py runserver&lt;/code>运行的， SSH 断开后进程就被中断了，所以需要让它能够后台运行，尝试了 nohup，子 shell 等方法后（都不好用），最终选择了 screen。主要命令有：&lt;/p>
&lt;pre tabindex="0">&lt;code>screen -S [NAME] 创建一个新 shell
screen -ls 查看后台 shell
screen -r [ID] 进入某个 shell
Ctrl+A,D 把当前 shell 切换至后台
&lt;/code>&lt;/pre>&lt;p>Nginx 配置我就直接改默认配置了，路径在&lt;code>/etc/nginx/sites-enabled/default&lt;/code>下。除了静态页面外，还需配置后端请求转发：&lt;/p>
&lt;pre tabindex="0">&lt;code>location /api {
proxy_pass http://127.0.0.1:8000;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header Host $http_host;
client_max_body_size 200M;
}
&lt;/code>&lt;/pre>&lt;p>（这个配置我是抄青岛大学 OJ 的）&lt;/p>
&lt;h3 id="https">HTTPS&lt;/h3>
&lt;p>尝试把域名解析至阿里云的服务器，发现不管是 HTTP 还是 HTTPS 请求都会被拦截，并被劫持到一个备案页面。&lt;/p>
&lt;p>&lt;img src="./1563512996274.png" alt="1563512996274">&lt;/p>
&lt;p>于是换用 GCP，一切顺利。使用 Let&amp;rsquo;s Encrypt 的证书以及官方推荐的 &lt;a href="https://certbot.eff.org/">certbot&lt;/a> 工具。简单几步即可签发证书并自动配置 Nginx。&lt;/p>
&lt;p>&lt;img src="./1563513130043.png" alt="1563513130043">&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/summer2day/article/details/81358815">前后端分离的django项目服务器跨域&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://harttle.land/2016/12/28/cors-with-cookie.html">CORS 跨域发送 Cookie&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html">使用uWSGI和nginx来设置Django和你的web服务器&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/lhj588/archive/2011/10/27/2226976.html">django web Cookie 和 Sessions 应用&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/15af33d2c2c4">从零开始建立单元测试-以Django项目为例&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.liujiangblog.com/course/django/129">查询操作&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.runoob.com/django/django-model.html">Django 模型&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/zhu_free/article/details/48176779">django DateTimeField 时区问题解决&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/isoftstone-practice/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>使用 Travis CI 自动部署 Hexo 博客</title><link>https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/</link><pubDate>Sun, 21 Apr 2019 20:16:56 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/ -&lt;p>&lt;img src="./bg2017121901.png" alt="bg2017121901">&lt;/p>
&lt;h2 id="缘由">缘由&lt;/h2>
&lt;p>其实我想用 CI 来自动化部署博客很久了，只是因为懒，CI 又有很多新知识，担心自己的知识储备不够，于是一直咕咕咕。&lt;/p>
&lt;p>前段时间装了 Arch 之后，我很想在两个系统之间同步写作进度，但是 Windows 的休眠和快速启动会导致在 Arch 下我只能以只读方式挂载 Windows 分区（我日常关机用休眠，所以拒绝关休眠）。原来设想的&lt;code>ln -s&lt;/code>大法行不通了。&lt;/p>
&lt;p>于是我想到了 CI。仔细一想其实也不复杂，无非是&lt;code>git push&lt;/code>， &lt;code>git pull&lt;/code>两下罢了。那么，Let&amp;rsquo;s do it!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="需求">需求&lt;/h2>
&lt;p>我原来设想是博客同时部署在 Github Pages 和我的 VPS 上，而由于某些不可抗力~~（懒）~~后者并没有实现。所以需求就变得十分简单，commit 博客内容，CI 自动构建然后部署。&lt;/p>
&lt;ul>
&lt;li>我更新博客之后，commit 然后 push 至 Github repo&lt;/li>
&lt;li>CI 自动构建博客&lt;/li>
&lt;li>CI 将构建完成的静态文件 push 至 Github repo&lt;/li>
&lt;/ul>
&lt;p>我原先使用的是&lt;code>hexo-deployer-git&lt;/code>插件，通过&lt;code>hexo g -d&lt;/code>部署，现在这个插件可以丢弃了。同时我的 Hexo 的很多配置都被我瞎改了，同时还有许多奇奇怪怪的模块可能需要清理（不如重新来一遍（大雾）），这些先不谈。&lt;/p>
&lt;h2 id="配置-github-repo">配置 Github Repo&lt;/h2>
&lt;p>在这个 Repo 中需要两个分支：&lt;/p>
&lt;ul>
&lt;li>master 用于存放构建完成的静态文件&lt;/li>
&lt;li>source 用于存放 Hexo 生成的博客源文件&lt;/li>
&lt;/ul>
&lt;p>对 Hexo 文件夹的操作如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>git init
git remote add origin git@github.com:cjc7373/cjc7373.github.io.git
git checkout -b source
git add .
git commit -m &amp;#34;To use CI to automated deploy&amp;#34;
git push origin source:source
&lt;/code>&lt;/pre>&lt;p>本来以为这个仓库会很大（整个文件夹大概 100M），突然发现它自带&lt;code>.gitignore&lt;/code>文件，所以实际大小并没有多少。&lt;/p>
&lt;p>&lt;img src="./1555835090941.png" alt="1555835090941">&lt;/p>
&lt;p>然后在 Github 上将主分支切换为&lt;code>source&lt;/code>分支。&lt;/p>
&lt;h2 id="配置-travis-ci">配置 Travis CI&lt;/h2>
&lt;p>CI 访问仓库需要权限，可选择 Access Token 或者单独的 Deploy key，后者似乎有些麻烦，我选择了前者。当前需求应该只需要 repo 权限，然后在 Travis CI 的 Environment Variables 中加入这个 Token，注意不要勾选 Display value in build log。&lt;/p>
&lt;p>然后就是编写&lt;code>.travis.yml&lt;/code>了。 &lt;del>正当我准备抄大佬们的配置的时候，忽然看到 Travis CI 官方提供了&lt;a href="https://docs.travis-ci.com/user/deployment/pages/">轮子&lt;/a>，那就用吧QAQ（其实也没简单多少）&lt;/del>，然后翻车了。&lt;/p>
&lt;p>&lt;img src="./1555837683039.png" alt="1555837683039">&lt;/p>
&lt;p>看了下文档，我也没搞懂每个字段的意思。所以还是自己来吧。&lt;/p>
&lt;p>为了在 commit 记录中显示更新日期，我把 push 部分单独写成了 sh脚本。&lt;/p>
&lt;p>&lt;code>.travis.yml&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>language: node_js
node_js: stable
# 只监听 source 分支的改动
branches:
only:
- source
# 缓存依赖，节省持续集成时间
cache:
directories:
- node_modules
install:
- npm install
script:
- hexo clean
- hexo g
after_script:
- chmod +x ./deploy.sh # 添加可执行权限
- ./deploy.sh
&lt;/code>&lt;/pre>&lt;p>&lt;code>deploy.sh&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>#!/bin/bash
set -ev
export TZ=&amp;#39;Asia/Shanghai&amp;#39;
git config --global user.name &amp;#34;cjc7373&amp;#34;
git config --global user.email &amp;#34;niuchangcun@163.com&amp;#34;
# 获取以前的 commit 记录
git clone -b master https://github.com/cjc7373/cjc7373.github.io.git .deploy
# 这么移动是为了确保不受之前文件的影响
mv .deploy/.git/ public/
cd public
git checkout master
git add .
git commit -m &amp;#34;Site updated: `date +&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;`&amp;#34;
# 我也不知道 token 怎么用。。抄大佬的代码
git push &amp;#34;https://${token}@github.com/cjc7373/cjc7373.github.io.git&amp;#34; master:master --quiet
&lt;/code>&lt;/pre>&lt;p>一开始忘了给&lt;code>deploy.sh&lt;/code>可执行权限，CI 啥都没报错就退出了。。后来 token 又忘了写。。反正出了好多锅。。&lt;/p>
&lt;p>&lt;img src="./1555840082905.png" alt="1555840082905">&lt;/p>
&lt;p>（看着都是成功其实都是失败。。）&lt;/p>
&lt;p>同时本地配合一下批处理，真正一键发布（滑稽&lt;/p>
&lt;pre tabindex="0">&lt;code>cd C:\Users\niuch\Documents\GitHub\blog\
git add .
git commit
git push
pause
&lt;/code>&lt;/pre>&lt;h2 id="后记">后记&lt;/h2>
&lt;p>历经两个多小时，终于把 CI 弄好了。虽然对 CI 还是一知半解，不过总算开了个头，也基本实现了需求。&lt;/p>
&lt;p>Travis CI 官方的文档很全，但是以我的英文水平看得很吃力（懒得看），中文资料的质量又参差不齐。所以还是要锻炼自己的英语水平啊。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a href="https://docs.travis-ci.com">https://docs.travis-ci.com&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>Arch Linux 安装&amp;配置全过程</title><link>https://blog.coherence.codes/posts/2020_and_before/arch-linux-install/</link><pubDate>Sun, 24 Mar 2019 20:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/arch-linux-install/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/arch-linux-install/ -&lt;h2 id="前言">前言&lt;/h2>
&lt;p>以前我也装过双系统，很遗憾，可能是知识水平不够的缘故，也有笔记本坑爹的原因，装过 Ubuntu，Manjaro，Deepin，Fedora 等众多发行版，要么启动时候卡死，要么根本无法引导，于是作罢。如今开始学习 Linux，便有了重拾双系统的念头。&lt;/p>
&lt;p>这篇博客将记录 Arch 安装与配置全过程。最终目标是 Arch 能成为我的主力系统替代 Windows。&lt;/p>
&lt;p>&lt;img src="./1554536417517.png" alt="1554536417517">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>下面列出笔记本的配置，以供参考。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>部件&lt;/th>
&lt;th>型号&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CPU&lt;/td>
&lt;td>Intel i5-7300HQ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>内存&lt;/td>
&lt;td>16G&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>硬盘&lt;/td>
&lt;td>128G NVME SSD + 1T 机械&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>显卡&lt;/td>
&lt;td>GeForce GTX 1050 Ti + Intel HD Graphics 630&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无线网卡&lt;/td>
&lt;td>Reltek RTL8822BE&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>触摸板&lt;/td>
&lt;td>Synaptics&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="为什么选择-arch">为什么选择 Arch&lt;/h2>
&lt;p>滚动更新天下第一！（误&lt;/p>
&lt;p>听说社区非常友好（然而我还没感受到&lt;/p>
&lt;h2 id="基本安装">基本安装&lt;/h2>
&lt;p>安装参考了 &lt;a href="https://www.viseator.com/2017/05/17/arch_install/">以官方Wiki的方式安装ArchLinux&lt;/a> 和 官方Wiki的 &lt;a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Installation Guide&lt;/a>。在未安装图形界面前，基本一切顺利。&lt;/p>
&lt;p>题外话：说起无线网卡，之前装 Ubuntu 的时候，没有驱动，需要手动安装。不过内核从 4.x 某个版本之后，加入了对我这个网卡的驱动，现在无需配置即可使用了。&lt;/p>
&lt;p>由于固态的空间不足，故没有分配交换文件（感觉也用不掉 16G 内存）。&lt;/p>
&lt;p>在配置&lt;code>sudo&lt;/code>时，使用&lt;code>visudo&lt;/code>命令编辑配置文件，然而这个 vi编辑器有毒，许多操作都无法执行，感觉是个 bug。（Update：原来 vi 和 vim 是有挺大的区别的&amp;hellip;）&lt;/p>
&lt;h2 id="图形界面">图形界面&lt;/h2>
&lt;p>&lt;del>众所周知&lt;/del>，Linux社区似乎对于 Nvidia+Intel 双显卡不怎么友好，在我安装过的数个发行版中（包括 Ubuntu, Debian, Manjaro, Deepin），基本都出现了启动黑屏/在Logo处冻结的情况，本次安装 Arch Linux，同样遇到了此问题。&lt;/p>
&lt;p>由于我准备使用双系统，所以并不准备安装 Nvidia 驱动，仅安装了 Intel 的显卡驱动。&lt;/p>
&lt;p>在装完 Xorg，KDE，sddm 之后，我尝试启动图形界面，成功卡在了 KDE 加载的地方。在随后的尝试中，我发现连 &lt;code>screenfetch&lt;/code>, &lt;code>lspci&lt;/code> 这样的命令都会导致系统/虚拟控制台（tty）无响应。一开始觉得是内核的问题，因为 Arch 默认安装了 5.0 内核，遂降级至 4.20，问题依旧。&lt;/p>
&lt;p>搜索发现问题可能与N卡的开源驱动 &lt;code>Nouveau&lt;/code>有关，（我寻思我也没装nouveau啊），于是创建 &lt;code>/etc/modprobe.d/blacklist.conf&lt;/code>，并在文件中写入&lt;code>blacklist nouveau&lt;/code>，执行 &lt;code>update-initramfs -u&lt;/code>（大概是更新内核配置？）。顺便安装&lt;code>bbswitch&lt;/code>把N卡给禁了，具体配置按照&lt;a href="https://coolrc.me/2016/11/28/28115748/">这篇文章&lt;/a>。&lt;/p>
&lt;p>重启问题解决，于是又把内核升到 5.0.2，重启卡在命令行界面（甚至没有见到 sddm）。于是进 live cd，回滚 4.20，重启问题解决。&lt;/p>
&lt;p>话说以后可以试试 Wayland？&lt;/p>
&lt;h3 id="问题解决">问题解决&lt;/h3>
&lt;p>发现开机时有一行报错，&lt;code>Failed to load Linux Kernel Modules&lt;/code>，用&lt;code>systemctl status systemd-modules-load.service&lt;/code>查看发现是&lt;code>bbswitch&lt;/code>加载失败了。所有东西似乎有着千丝万缕的联系&amp;hellip;&lt;/p>
&lt;p>对比发现 5.x 内核启动时并没有报错，于是删除 &lt;code>bbswtich&lt;/code>，再升级 5.0 内核，成功启动&lt;code>sddm&lt;/code>，问题解决（终于可以愉快地滚系统啦）。&lt;/p>
&lt;p>&lt;img src="./1554535852814.png" alt="1554535852814">&lt;/p>
&lt;p>原因可能是 &lt;code>bbswitch&lt;/code> 配置不当，具体原因不明。此时开始仍然会报&lt;code>Failed to load Linux Kernel Modules&lt;/code>，需要手动将&lt;code>/etc/modprobe.d/bbswitch.conf&lt;/code>及&lt;code>/etc/modprobe.d/&lt;/code>中某个文件中（我忘了）的&lt;code>bbswitch&lt;/code>删除。&lt;/p>
&lt;h2 id="必要软件">必要软件&lt;/h2>
&lt;ul>
&lt;li>Arch Linux CN 源，包含了许多 AUR 中的软件。第一次加入源的时候不知道要安装 keyring，导致安装包时卡在了 GPG 签名校验那一步。我还寻思为什么 Arch 的签名老出锅。。（BTW：为什么需要 keyring？）&lt;/li>
&lt;li>Shadowsocks，装完命令行版的 Shadowsocks，根据 Wiki 描述，应用 &lt;code>ss-local&lt;/code>启动，然而&lt;code>commend not found&lt;/code>，未能解决，于是又装了 Shadowsocks-qt5。&lt;/li>
&lt;li>&lt;del>Chrome，ArchCN 源中有（话说什么时候试试 Chromium）。&lt;/del> Chrome 不支持硬件加速，现已更换 Chromium。同步等功能一切正常。&lt;/li>
&lt;li>字体，不安装中文字体许多中文字是框框（然而为什么不是所有呢），我选择了&lt;code>wqy-microhei&lt;/code>，然而系统自带的英文字体也很丑。按照&lt;a href="https://wiki.archlinux.org/index.php/Microsoft_fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">官方Wiki&lt;/a>把Windows中的字体复制了过来，然而发现英文字体的间距变得非常小。中文字体看着挺舒服（应该是雅黑？）。&lt;/li>
&lt;li>中文输入法，装了谷歌拼音发现打出来的字是繁体，还找不到相关选项（Update：把简繁转换关了就好了）。现在在用 Rime。&lt;/li>
&lt;li>印象笔记，在 Linux 有开源的客户端 Tusk。然而 Tusk 不支持 Markdown&amp;hellip;.&lt;/li>
&lt;li>Tim/QQ，ArchCN 源包含。本质上是魔改过配置的 Wine 容器。&lt;/li>
&lt;/ul>
&lt;h2 id="省电">省电&lt;/h2>
&lt;p>在用 Linux 之前，我一直认为 Linux 会比 Windows 更加省电，没想到刚好相反。所以为了省电，我不得不做许多额外的配置。&lt;/p>
&lt;p>首先，耗电的大头还是在 CPU，我们请出&lt;code>cpupower&lt;/code>，启用&lt;code>powersave&lt;/code>调度，风扇安静了，掉电也少了不少。&lt;/p>
&lt;p>除了 CPU，其他部件也耗电呐。好在有个包能够统一地管理电源消耗，那就是&lt;code>laptop-mode-tools&lt;/code>，然而这玩意似乎用处不大。。&lt;/p>
&lt;h2 id="折腾">折腾&lt;/h2>
&lt;h3 id="瞎改配置">瞎改配置&lt;/h3>
&lt;p>Linux Mode Setting 可以提前启动？虽然不知道有什么用。&lt;/p>
&lt;p>编辑&lt;code>/etc/mkinitcpio.conf&lt;/code>，修改&lt;code>MODULES&lt;/code>一行，改为&lt;code>MODULES=(i915)&lt;/code>（Intel 显卡）。&lt;/p>
&lt;h3 id="目前遇到的问题">目前遇到的问题&lt;/h3>
&lt;ul>
&lt;li>为什么任务栏有两个音量图标？（一个是 Audio Volume，一个是 KMix，然而这不都是 KDE 自带的么..）&lt;/li>
&lt;li>触摸板无法使用手势&lt;/li>
&lt;li>还是想禁用独显，参考资料&lt;a href="https://xuchen.wang/archives/archbbswitch.html">https://xuchen.wang/archives/archbbswitch.html&lt;/a>&lt;/li>
&lt;li>Tim 字体发虚，&lt;a href="https://github.com/countstarlight/deepin-wine-tim-arch">官方仓库&lt;/a>似乎给出了解决方案。&lt;/li>
&lt;li>风扇调度误我，只要CPU占用率高个那么几秒，风扇就像起飞了一样&lt;/li>
&lt;li>Typora 打开时不能恢复上次打开的文件夹&lt;/li>
&lt;/ul>
&lt;h2 id="实用技巧">实用技巧&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>显示桌面：在 Panel Option 中添加 Show Desktop 小工具，然后设置快捷键为 Win+D。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Clipboard 能够生成二维码。（方便多设备发送网址什么的？然而我有 Chrome 同步了..）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开机时打开 Num Lock：根据 Wiki，KDE 自带了这个选项，在&lt;code>Hardware/Input Devices/Keyboard&lt;/code>中。不过我转念一想，不是先启动&lt;code>sddm&lt;/code>么？试了一下果然在&lt;code>sddm&lt;/code>界面小键盘是关着的。于是在&lt;code>/etc/sddm.conf&lt;/code>加入&lt;/p>
&lt;pre tabindex="0">&lt;code>[General]
Numlock=on
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>pacman 能够在升级前对比版本信息，对于我这种强迫症非常有用。&lt;/p>
&lt;p>&lt;img src="./1555419677545.png" alt="1555419677545">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改 &lt;code>/etc/fstab&lt;/code>，加入以下内容，使得开机时能够自动以只读模式挂载 Windows 分区。&lt;/p>
&lt;p>&lt;img src="./1556519535880.png" alt="1556519535880">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志相关。由于&lt;code>systemd&lt;/code>这个神奇的存在，似乎所有日志都可以通过&lt;code>systemd&lt;/code>带的&lt;code>journalctl&lt;/code>查看。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>查看启动时&lt;code>tty1&lt;/code>的滚过去的那一大堆日志：&lt;code>journalctl /usr/lib/systemd/systemd -b&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看加载失败的 unit：&lt;code>systemctl --failed&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看某个 unit 的日志：&lt;code>journalctl -u nginx.service --since today&lt;/code>&lt;/p>
&lt;p>（另外&lt;code>systemctl status&lt;/code>也能显示最新的大概十行日志）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>增强 Bash 的自动补全：&lt;code>pacman -S bash-completion&lt;/code>，重启终端即可。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="trouble-shooting">Trouble Shooting&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>今天打开tusk发现闪退。。用终端运行报&lt;code>tusk: error while loading shared libraries: libnode.so: cannot open shared object file: No such file or directory&lt;/code>，我干什么了我？我啥都没干啊。。重新安装未解决问题。重启同样未解决。&lt;/p>
&lt;p>于是 Google，StackOverflow 上有一个帖子建议我先找找有没有这个库。&lt;/p>
&lt;p>&lt;img src="./1555419245819.png" alt="1555419245819">&lt;/p>
&lt;p>发现是有的，ls 看下。&lt;/p>
&lt;p>&lt;img src="./1555419316125.png" alt="1555419316125">&lt;/p>
&lt;p>然而链接到了另一个文件，一看，果然那个文件没了。。（推测和包更新了有关？）但是 Typora 有这个库呀，于是尝试链接到 Typora 带的那个库，然后问题解决了。。。我被我这波操作惊呆了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>觉得字体不好看，然后似乎改崩了&amp;hellip;目前把 Windows 的字体扔了，重新安装的字体列表有：&lt;/p>
&lt;ul>
&lt;li>wqy-zenhei&lt;/li>
&lt;li>wqy-microhei&lt;/li>
&lt;li>adobe-source-han-sans-cn-fonts&lt;/li>
&lt;li>adobe-source-han-serif-cn-fonts&lt;/li>
&lt;/ul>
&lt;p>然后把终端的字体改成了 Consolas（AUR），感觉还是这个字体好看，不过中文字体好像变丑了。。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尝试安装 Tim。&lt;/p>
&lt;p>&lt;img src="./1555420630345.png" alt="1555420630345">&lt;/p>
&lt;p>？？？说好的自动解决依赖关系呢？&lt;/p>
&lt;p>直接构建发现会报一堆依赖的错，查看 Github 项目发现：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>deepin-wine-tim&lt;/code>依赖&lt;code>Multilib&lt;/code>仓库中的&lt;code>wine&lt;/code>，&lt;code>wine_gecko&lt;/code>和&lt;code>wine-mono&lt;/code>，Archlinux默认没有开启&lt;code>Multilib&lt;/code>仓库，需要编辑&lt;code>/etc/pacman.conf&lt;/code>，取消对应行前面的注释(&lt;a href="https://wiki.archlinux.org/index.php/Official_repositories#multilib">Archlinux wiki&lt;/a>)&lt;/p>
&lt;/blockquote>
&lt;p>懂了，我以后一定先 RTFM（&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Windows 分区在 Windows 启用了快速启动或者处于休眠状态时只能以只读方式挂载。什么傻吊设计。（因为我想把博客文件夹 &lt;code>ln&lt;/code> 到 Arch 下，使得双系统能够同步写作）&lt;/p>
&lt;p>解决方案：使用 Travis CI 自动部署 Hexo。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入法在终端和 Telegram，Kate 下（以及更多）不能使用。&lt;/p>
&lt;p>根据&lt;a href="http://www.towdium.me/2017/04/11/manjaro-config-diary/">某大佬的博客&lt;/a>：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>安装完输入法，你需要把输入法添加到环境变量里才能让他生效。我目前的配置是在 &lt;code>~/.xprofile&lt;/code>这个文件里加上下面几行：&lt;/p>
&lt;pre tabindex="0">&lt;code>export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>​ 成功解决。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>改完&lt;code>fstab&lt;/code>之后，开机发现闪过一行[FAILED]，查看日志发现&lt;code>sys-fs-fuse-connections.mount&lt;/code>这个服务（mount）失败了。日志为：&lt;/p>
&lt;blockquote>
&lt;p>May 02 14:19:10 Coherence systemd[1]: Condition check resulted in FUSE Control File System being skipped.
May 02 14:19:11 Coherence systemd[1]: sys-fs-fuse-connections.mount: Start request repeated too quickly.
May 02 14:19:11 Coherence systemd[1]: sys-fs-fuse-connections.mount: Failed with result &amp;lsquo;start-limit-hit&amp;rsquo;.
May 02 14:19:11 Coherence systemd[1]: Failed to mount FUSE Control File System.&lt;/p>
&lt;/blockquote>
&lt;p>Google 了下，没找到原因，尝试 restart，成功了。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>active (mounted)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>有待进一步观察。。（未复现&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="to-do">TO DO&lt;/h2>
&lt;ul>
&lt;li>zsh&lt;/li>
&lt;/ul>
&lt;h2 id="吐槽">吐槽&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>在 Linux 下，什么东西装好不用折腾就能用我反而觉得不正常&amp;hellip;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>附一段不太恰当的比喻：&lt;/p>
&lt;blockquote>
&lt;p>Windows 是人妻，啥都有，啥都会，啥都包玩的舒服，就是经常还往家里带一些你不想要的
MacOS 是女朋友，带出去在人前倍有feel，但是只能按照她的规则玩不然一脚踹下床
Linux 是小萝莉，懵懂无知，你怎么调教就怎么跟你玩，但是调教过猛经常会把腰闪了，萝莉也玩坏了。。。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
- https://blog.coherence.codes/posts/2020_and_before/arch-linux-install/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>中国电信 HG2543C1 光猫获取超级管理员密码</title><link>https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/</link><pubDate>Sat, 16 Feb 2019 16:32:47 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/ -&lt;p>寒假回家，欣闻家中宽带升级成了 200M，然而坑爹的是一直以来的桥接模式被改成路由模式。由于想公网访问本地的 NAS，且想看看 IPV6 是否已在我家区域部署，所以想破解光猫获取管理员密码。&lt;/p>
&lt;p>Google 该设备的型号，发现网上并没有相关的教程，可能是型号比较新的缘故。致电中国电信，被告知无法透露管理员密码，派人上门调试则需额外花费。本着自己折腾的原则，遂在某宝购入 CH340G USB转TTL板，准备拆机 TTL 破解光猫。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="0x01-拆机">0x01 拆机&lt;/h2>
&lt;p>拆机后发现 PCB 板上有 TTL 插针，用万用表测得倒数第二根为 GND（接地pin），然后剩余四根随机组合，测得 RX（接收数据pin）和 TX（发送数据pin）。用杜邦线连接 USB转TTL板和 TTL 插针。&lt;/p>
&lt;p>&lt;img src="./IMG_20190219_113847.jpg" alt="IMG_20190219_113847">&lt;/p>
&lt;h2 id="0x02-串口调试">0x02 串口调试&lt;/h2>
&lt;p>电脑安装好 USB转TTL板的驱动，USB端连接上电脑。网上的教程一般使用 SecureCRT， 然而我后来发现 Xshell 也能连接串口，遂用 Xshell 进行调试。&lt;/p>
&lt;p>&lt;img src="./1550548463370.png" alt="1550548463370">&lt;/p>
&lt;p>如图设置参数，port 按照自己的情况设置。&lt;/p>
&lt;p>然后连接。接通电源后等待。大概等待两分钟后，按回车，出现 &lt;code>Login:&lt;/code> 字样，用 &lt;code>root/hg2x0&lt;/code> 登陆。&lt;/p>
&lt;p>用 &lt;code>cat /proc/cpuinfo&lt;/code> 看一下 CPU 信息，居然是 MIPS&amp;hellip;&lt;/p>
&lt;p>&lt;img src="./1550306022384.png" alt="1550306022384">&lt;/p>
&lt;p>超级密码在&lt;code>/flash/cfg/agentconf/factory.conf &lt;/code>文件中。文件前两行即为管理员账户和密码。至此，光猫破解完成。&lt;/p>
&lt;h2 id="0x03-参考资料">0x03 参考资料&lt;/h2>
&lt;p>&lt;a href="https://paper.seebug.org/506/#0x03">如何通过TTL调试光猫&lt;/a>
&lt;a href="https://m2.zhugh.com:26800/po-jie-dian-xin-guang-mao/">破解电信光猫&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>2018年终总结&amp;2019展望</title><link>https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/</link><pubDate>Mon, 11 Feb 2019 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/ -&lt;p>今天是己亥猪年的大年初七，很惭愧到今天我才想起寒假前就想写的年终总结还没有写。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="2018-总结">2018 总结&lt;/h2>
&lt;p>时间及事件依据：印象笔记、Google 相册、我的记忆。&lt;/p>
&lt;p>事件大致以时间顺序排列。&lt;/p>
&lt;ul>
&lt;li>一月初，经历了在西安的第一场雪。&lt;/li>
&lt;li>（时间未知）使用了 Windows 运行来快速启动程序，&lt;del>（感觉上）大大提高了效率&lt;/del>（不（感觉装逼才是真的&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1549962279010.png" alt="1549962279010">&lt;/p>
&lt;ul>
&lt;li>从 1.13 开始寒假训练， 3.24 校赛，3.31 天梯赛，5.17 左右 ACM省赛，7.19 开始暑假多校训练，10.26 徐州区域赛， 11.23 深圳 CCPC 总决赛，整个一年我算是比较积极地参与 ACM-ICPC 竞赛（虽然下半年逐渐开始划水&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1550032126921.png" alt="1550032126921">
（六张照片依次为 CCPC、寒假训练、省赛、校赛、天梯赛、徐州区域赛）&lt;/p>
&lt;ul>
&lt;li>一月末，开始种草轻薄本，并寻求把游戏本卖了，未果。&lt;/li>
&lt;li>从年初开始，用空闲资金进行投资，并开始学习相关知识。一月末我第一次买入了一个基金，入坑。一开始赚了点钱很高兴，后来贸易战开始就亏了。七月初买了一本金融方面的书然而并没有看多少。八月开始跟投某大V的投资计划，九月末把主要账户转移到且慢。回想起一开始什么都不懂就冲着某个行业买基金，现在慢慢有些了解但知识仍然很浅薄。时刻要提醒自己：不要盲从。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1550032359691.png" alt="1550032359691">&lt;/p>
&lt;ul>
&lt;li>定下（并践行）了在美（英）剧中学英语的目标，然后每当我看剧时总是自我安慰同时我也在&lt;del>学习&lt;/del>（并没有）。&lt;/li>
&lt;/ul>
&lt;p>到目前为止看过的剧有（不限于18年）：Friends，Sherlock，Black Mirror 一季， The IT Crowd 两季，Monday Mornings，Greys Anatomy 一季， Person of Interest 三季，Modern Family 半季多&lt;/p>
&lt;ul>
&lt;li>从3月份开始，我开始撸 DigitalOcean 的 Github 学生优惠，到现在为止服务器运维的相关知识增长地挺快&amp;hellip;应该是从大学开始吧，我开始用VPS自建SS，一开始是 Cloudcone 还是 Vultr 后来撸到了 DO，再后来19年年初的时候知道了一个超便宜的深港专线，后来又撸了阿里云的学生机。&lt;/li>
&lt;li>四月中旬看了死亡诗社，Seize the day 成了我的座右铭，虽然我一直没有做到这一点。&lt;/li>
&lt;li>整个一年我总有一种感觉，学习不在状态，有时候一直陷入一种昏昏沉沉的状态，那种状态下，犯困，没有学习的心思，干其他事也提不起兴趣。仿佛就在虚度光阴。从那个寒假开始我就（似乎）养成了不良的生活习惯。&lt;/li>
&lt;li>四五月份入了创新IE3P 和 iPad 2018，拔草成功，却没有对我的学习质量有多大的改善。后来又开始种草蓝牙降噪耳机&amp;hellip;&lt;/li>
&lt;li>六月末，转专业考试。一年中最重要的一件事，从环境科学与工程转到了软件工程专业，进入了理想的专业。&lt;/li>
&lt;li>然而同时打算换宿舍的（非常不喜欢我们宿舍的氛围和作息），最终没有成功。后来也尝试过 Bose Sleepbuds 这个方案，效果不佳。遂产生了租房的想法。&lt;/li>
&lt;li>尝试读英文原著，从大一上开始读星际穿越的剧本，读到18年年中读完了。然后开始看三体的英文版，到现在看了一半多。&lt;/li>
&lt;li>九月中旬开始用 Excel 记账，对日常消费进行记录和管理，持续至今。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./1550035065769.png" alt="1550035065769">&lt;/p>
&lt;ul>
&lt;li>九月中旬，在学校有了一辆自己的自行车。&lt;/li>
&lt;li>大二上是忙碌的一学期。首先课就很多，粗略统计之下每周有38个学时，作为对比，大一上是27学时，大一下是33学时。然后学期初的时候偶然间看到网络中心招学生助理，于是去了。（&lt;del>并没有学什么东西&lt;/del>好歹还是学了点的）然后是计协（主要）和其他社团的活动。&lt;/li>
&lt;li>学习成绩仍然不尽如人意，而且有着每学期逐步下滑的趋势&amp;hellip;&lt;/li>
&lt;li>记不清某个时间了，折腾过Ubuntu，碰到了N+I卡驱动的问题，卡启动Logo，最后也没解决。后来就弃疗了，平时就瞎搞搞虚拟机和 WSL 了。&lt;/li>
&lt;li>十二月下旬，我校ACM新生赛，我负责了评测环境的搭建，这大概是我一年来做过的最有意义的一件事。&lt;/li>
&lt;li>好多书都只读到一半，然后处于半弃坑状态，比如未来简史，值得反思&amp;hellip;&lt;/li>
&lt;li>下半年的印象笔记笔记数量似乎少了很多&amp;hellip;&lt;/li>
&lt;li>更加怀念高中时候的生活了&amp;hellip;或许到了工作之后我也会更加怀念大学的生活吧。&lt;/li>
&lt;/ul>
&lt;h2 id="2019-年初计划">2019 年初计划&lt;/h2>
&lt;ul>
&lt;li>学习 Linux，参考书目《Linux&amp;amp;Unix 大学教程》&lt;/li>
&lt;li>学习 Git，参考书目 《Pro Git》&lt;/li>
&lt;li>学习计算机网络，参考书目《Computer Networking:A Top-down Approach》（这本书TM还是去年七月下旬借的）&lt;/li>
&lt;li>学习使用 Anki （去年九月初就知道了这个软件并一直想学 emmm..)&lt;/li>
&lt;li>写一篇关于 Lumia 的博客（同样是去年鸽到现在了&amp;hellip;）&lt;/li>
&lt;li>用 AutoHotkey 把 Markdown 编辑器打造地更顺手一点&lt;/li>
&lt;li>在豆瓣建立起我的书单，并写书评&lt;/li>
&lt;li>买轻薄本（从去年年初我就开始有这个想法了QAQ），目前种草 LG Gram，等一个19款&lt;/li>
&lt;li>多运动，多出去骑车&lt;/li>
&lt;li>实现本博客的 Todo（虽然大半都是在瞎搞&lt;/li>
&lt;li>搬出去！&lt;/li>
&lt;li>做好未来的打算，考研 OR 出国，是否找个实验室去做项目，未来的方向等等&lt;/li>
&lt;li>记录生活&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>这篇文章写了三天才写完，写的也比较杂乱。事实上在一开始我就没有一个整体的构思。&lt;/p>
&lt;p>2019年已经快过去了两个月，我才堪堪写完年初计划。这些计划（或者说我未来的目标）虽有个模糊的大方向，却又不甚明了，或许我还需要更深层次的思考吧。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>DOMjudge 配置/踩坑指南</title><link>https://blog.coherence.codes/posts/2020_and_before/domjudge-config/</link><pubDate>Wed, 19 Dec 2018 20:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/domjudge-config/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/domjudge-config/ -&lt;p>我校新生赛也能用上 World Final 同款评测系统啦~&lt;/p>
&lt;p>DOMjudge 提供了详尽的&lt;a href="https://www.domjudge.org/documentation">官方文档&lt;/a>，然而对于博主这种英文弱鸡来说读的很痛苦。前前后后折腾了有两个星期吧，以此文作为避（踩）坑指南。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>DOMjudge，作为一款开源的 CCS(&lt;a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System">Contest Control System&lt;/a>)，现已被ICPC钦定为官方的比赛评测系统。比 pc^2 这种闭源而含有诸多 Bug 的 CCS 高到不知道哪里去了啊。&lt;/p>
&lt;p>&lt;img src="./1545218741334.png" alt="1545218741334">&lt;/p>
&lt;p>根据官方文档的描述，DOMjudge 的主要特性有：&lt;/p>
&lt;ul>
&lt;li>分布式且自动评测的 judge host&lt;/li>
&lt;li>Web 用户界面&lt;/li>
&lt;li>模块化的系统，方面添加不同的语言/编译器&lt;/li>
&lt;/ul>
&lt;p>整个 DOMjudge 主要分为两个部分，Domserver 和 Judgehost，据其名字即可得出它们的功能。需要注意的是，DOMjudge 使用数据库来存放几乎一切数据，所以我们还需配置 MySQL 或者 MariaDB。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>DOMjudge 只能运行在 Linux 环境下。博主的运行环境是 Ubuntu Server 18.04 LTS，以及 DOMjudge 7.1.1。&lt;/p>
&lt;p>除了传统的安装方式外，DOMjudge 还提供了 Docker 镜像以供安装，这样就大大简化了安装的困难程度。&lt;/p>
&lt;p>关于 Docker 的使用这里不作详细描述。（其实是博主也一知半解）&lt;/p>
&lt;p>然而&lt;a href="https://hub.docker.com/r/domjudge/domserver">官方的 Docker 文档中&lt;/a>仅使用了命令来启动容器，为了进一步简化安装，也为了方便修改配置，我决定采用 Docker Compose 。以下是 &lt;code>docker-compose.yml &lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mariadb&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">dj-mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_ROOT_PASSWORD=rootpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_USER=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_PASSWORD=djpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_DATABASE=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">$PWD/data:/var/lib/mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">13306&lt;/span>:&lt;span style="color:#ae81ff">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">command&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">max-connections=1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --&lt;span style="color:#ae81ff">innodb-log-file-size=480M&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">domserver&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">domjudge/domserver:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">domserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_HOST=mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_USER=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_DATABASE=domjudge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_PASSWORD=djpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">MYSQL_ROOT_PASSWORD=rootpw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">CONTAINER_TIMEZONE=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">phpmyadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">80&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">links&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">judgehost&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">domjudge/judgehost:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">judgedaemon-0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">privileged&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">CONTAINER_TIMEZONE=Asia/Shanghai&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">DAEMON_ID=0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">JUDGEDAEMON_PASSWORD=whatthehell&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">depends_on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">domserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">links&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">domserver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">restart&lt;/span>: &lt;span style="color:#ae81ff">always&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/sys/fs/cgroup:/sys/fs/cgroup:ro&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">phpmyadmin&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">phpmyadmin/phpmyadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">container_name&lt;/span>: &lt;span style="color:#ae81ff">myadmin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">8080&lt;/span>:&lt;span style="color:#ae81ff">80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">environment&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">PMA_HOST=mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">links&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">mariadb:mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行 &lt;code>docker-compose up -d&lt;/code> 即可完成部署。&lt;/p>
&lt;p>Judgehost 利用了 Linux 内核的 Cgroup 特性，所以需进行一步额外设置（似乎部分内核较新的系统不需要）。编辑 &lt;code>/etc/default/grub&lt;/code> 文件，将默认的命令改为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>GRUB_CMDLINE_LINUX_DEFAULT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;quiet cgroup_enable=memory swapaccount=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GRUB_CMDLINE_LINUX&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;quiet cgroup_enable=memory swapaccount=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后运行 &lt;code>update-grub&lt;/code> 并重启。&lt;/p>
&lt;p>需要多核判题的话创建多个 Judgehost 容器并修改 DAEMON_ID 为不同的值即可。&lt;/p>
&lt;p>目前存在的问题：&lt;/p>
&lt;ul>
&lt;li>judgehost 用户的初始密码不定，需要手动去 web 端更改并添加 &lt;code>JUDGEDAEMON_PASSWORD&lt;/code> 的环境变量。（默认环境变量的密码是 &lt;code>password&lt;/code>）&lt;/li>
&lt;li>整个系统对我来说是个黑盒&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>除了 MariaDB , DOMserver , Judgehost 这三个必要的容器外，我还使用了 phpMyAdmin 来进行图形化的数据库管理（备份)。数据库（即 &lt;code>mariadb&lt;/code> 容器的数据卷）创建在了当前目录的&lt;code>data&lt;/code>文件夹下，方便备份。&lt;/p>
&lt;p>其中，Domserver 映射到了主机的 80 端口， phpMyAdmin 映射到了 8080 端口。由于是内网环境，故不准备采用 HTTPS 加密。&lt;/p>
&lt;p>需要注意的是，DOMjudge 提供的 Judgehost 镜像中仅包含 C, C++, Java 三种语言的运行环境。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>Domserver 部署成功后，即可通过 Web 端来访问了。默认的管理员账号用户名 &lt;code>admin&lt;/code> ，默认密码被打印在domserver启动时的日志中，同时也可以用&lt;code>docker exec -it domserver cat /opt/domjudge/domserver/etc/initial_admin_password.secret&lt;/code>来获取 。&lt;/p>
&lt;p>可以在 Config Checker 中进行配置检查。&lt;/p>
&lt;p>C++ 的默认编译选项没有 C++11， 需手动添加。&lt;/p>
&lt;h3 id="题目导入">题目导入&lt;/h3>
&lt;p>DOMjudge 支持用 zip 格式的压缩包导入/导出题目。&lt;/p>
&lt;p>具体的文件结构是：&lt;/p>
&lt;pre tabindex="0">&lt;code>│ domjudge-problem.ini
│
├─data
│ ├─sample
│ └─secret
│
└─problem_statement
problem.{pdf,html,txt}
&lt;/code>&lt;/pre>&lt;p>在 &lt;code>domjudge-problem.ini&lt;/code> 中定义了如下信息：&lt;/p>
&lt;p>&lt;img src="./1545219324330.png" alt="1545219324330">&lt;/p>
&lt;p>（懒得翻译了，有时间再补）&lt;/p>
&lt;p>在 secret 文件夹中存放测试数据，在 sample 文件夹中存放样例数据， 在 problem_statement 存放题面。&lt;/p>
&lt;p>（不知道为什么博主在压缩包内上传题面没有成功过，只能通过 Web 端来上传）&lt;/p>
&lt;p>测试数据的扩展名为 &lt;code>.in&lt;/code> 和 &lt;code>.ans&lt;/code>。&lt;/p>
&lt;h3 id="队伍导入">队伍导入&lt;/h3>
&lt;p>队伍及用户导入采用 tsv(&lt;em>tab-separated values&lt;/em>) 格式，即信息之间采用制表符（TAB）分隔。事实上，文件的扩展名并不需要采用&lt;code>.tsv&lt;/code>。我们可以直接在Excel中创建一个表格然后将其后复制至一个文本文件中。&lt;/p>
&lt;p>格式由&lt;a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System_Requirements#Appendix:_File_formats"> ICPC 官方定义&lt;/a>。&lt;/p>
&lt;p>teams 格式：&lt;/p>
&lt;pre tabindex="0">&lt;code>teams 1
team_id external_ID group_id team_name institution_name institution_short_name country_code
&lt;/code>&lt;/pre>&lt;p>参考&lt;a href="https://cubercsl.cn/notes/DOMjudge-Note.html">CSL的博客&lt;/a>发现：&lt;/p>
&lt;blockquote>
&lt;p>在导入teams表的时候，在&lt;code>Country Code&lt;/code>后追加一列，填写&lt;code>Institution External ID&lt;/code>。
这步是阅读&lt;a href="https://github.com/DOMjudge/domjudge/blob/master/lib/lib.impexp.php#L108">源代码&lt;/a>后猜测的，当时的实际操作是直接在数据库中的&lt;code>team_affiliation&lt;/code>用SQL语句更新&lt;code>ExternalID&lt;/code>的。&lt;/p>
&lt;/blockquote>
&lt;p>博主采用了这种方式，并在导入队伍后通过 Web 界面手动添加 Affiliation 信息。&lt;/p>
&lt;p>事实上，institution_name institution_short_name country_code这三个字段都不是必要的，只需要有External ID就可以。而如果没有External ID的话，会创建和队伍数量一样多的Affiliation。&lt;/p>
&lt;p>accounts 格式：&lt;/p>
&lt;pre tabindex="0">&lt;code>accounts 1
account_type fullname username password
&lt;/code>&lt;/pre>&lt;p>一种（可能）简单的方式是先导入队伍再导入用户，并且用户 username 的后缀数字与 team_id 相同。不需要的字段可以直接留空。（不能缺少分隔符）&lt;/p>
&lt;p>tsv 文件可以采用 Excel 生成。在 Excel 中输入完数据后选择另存为文本文件（制表符分隔）即可。&lt;/p>
&lt;p>如需使用&lt;code>institution_name institution_short_name country_code&lt;/code> 三项需在 Team Affiliations 中提前创建相应的条目。&lt;/p>
&lt;h3 id="api">API&lt;/h3>
&lt;p>参考官方的 API 说明，DOMjudge 包含&lt;a href="https://clics.ecs.baylor.edu/index.php/Contest_API"> ICPC 定义的 API &lt;/a>和&lt;a href="https://www.domjudge.org/demoweb/api/doc">自有的 API&lt;/a>。&lt;/p>
&lt;p>&lt;img src="./1545220336183.png" alt="1545220336183">&lt;/p>
&lt;h3 id="滚榜">滚榜&lt;/h3>
&lt;p>尝试使用官方的 &lt;a href="https://icpc.baylor.edu/icpctools/">ICPC tools&lt;/a>，发现总是提示比赛未结束，查阅日志认为是 DOMjudge 的 event feed 格式与 ICPC tools 提供的 resolver 工具的格式不兼容。&lt;/p>
&lt;p>尝试 DOMjura 发现同样不能正确读取 event-feed 。&lt;/p>
&lt;hr>
&lt;p>2019年校赛补充：滚榜采用了 Github 上的&lt;a href="https://github.com/hex539/scoreboard">这个项目&lt;/a>。这比官方的滚榜工具好用多了，但是也有坑。&lt;/p>
&lt;p>首先它使用bazel作为构建工具，但是bazel对于Windows很不友好（至少对于这个项目而言），会有奇怪的报错。所以我使用了Ubuntu。其次，由于构建过程中大部分源都在国外，对于国内的网络环境来说很不友好。我的解决办法是使用proxychains代理bazel，实测无需任何配置即可支持Domjudge 7.1.1（2019/12/7）。&lt;/p>
&lt;h2 id="2018冬季新生赛概况">2018冬季新生赛概况&lt;/h2>
&lt;p>闲扯几句。&lt;/p>
&lt;p>热身赛一切良好。出题人数据出锅，被批判了一个多小时2333。&lt;/p>
&lt;p>正式赛赛前比赛账号导入的时候，有个人是后来添加的，和之前的版本没有对应上，导致部分队伍登录到了后一个队伍的账号，重新导入 team 后发现无法登录，还需导入 accounts。这导致比赛推迟了 5 分钟。&lt;/p>
&lt;p>由于 Submission 的输出数据是保留的，而赛前我的服务器硬盘空间本来就不多了，比赛时当服务器的硬盘占用达到 90% 时，所有 judgehost 就都被关了。我只能胡乱删几个软件包腾出空间。还好没有造成大的影响。&lt;/p>
&lt;p>然后直到最后还是没有搞出滚榜。&lt;/p>
&lt;p>GG。总体来说还是挺顺利的，服务器没有崩，甚至平均 CPU load 只有 1.0 左右，就是感觉比较吃 I/O，还好我用的是固态（&lt;del>先见之明&lt;/del>）。&lt;/p>
&lt;p>总结一下，DOMjudge 体验极佳，可以在校赛再推广一波。&lt;/p>
&lt;h2 id="2019冬季新生赛概况">2019冬季新生赛概况&lt;/h2>
&lt;p>由于今年懒得去嫖学校的服务器了，所以打算用公网服务器。本来在GCP和阿里云之间纠结用哪个，给我恰好滑稽给我提供了他在镇江的独服，于是建了一个16C，16G内存的虚拟机用作评测服务器（顺带送了个域名）。&lt;/p>
&lt;p>这台服务器的网络结构比较复杂，首先，他是Windows Server，通过一个软件把某些端口的流量转发至一台Debian虚拟机中（为了方便管理证书等），然后由Debian上的Nginx反代至Domjudge的虚拟机中。这样我自己就不用配置证书也能有HTTPS。&lt;/p>
&lt;p>但是Windows有一个老生常谈的坑：时间问题。Windows的硬件时钟是本地时间，而Linux为UTC时间，这导致了一开始Domjudge里的时间是假的，需要手动设置。&lt;/p>
&lt;p>本次Domjudge的配置基本与之前相同，用Docker-compose一键部署。&lt;/p>
&lt;p>之前一直没有做过压力测试一直是我的遗憾，这次在研究了Domjudge的&lt;a href="https://www.domjudge.org/demoweb/api/doc">API文档&lt;/a>之后，写了一个&lt;a href="Domjudge-config/submit.py">自动交题的脚本&lt;/a>，并且用Locust辅助做压力测试，然后评测机不负众望炸了。。&lt;/p>
&lt;p>&lt;img src="./image-20191208184458561.png" alt="image-20191208184458561">&lt;/p>
&lt;p>其实还不止这个错，还有各种奇怪的错误。幸好在正式比赛中评测机表现得很稳健，并没有出锅，应该是压力还不够大。。&lt;/p>
&lt;p>比赛时还碰到一个bug，在一道题重测后这道题的一血变更了，但是榜单上的一血是错的，重新刷新榜单也未解决。查看数据库表发现有一张叫&lt;code>scorecache&lt;/code>的表，推测该表即为榜单的缓存，于是更改&lt;code>is_first_solved&lt;/code>字段后，成功解决。&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/domjudge-config/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item><item><title>使用KMS激活Visio</title><link>https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/</link><pubDate>Sat, 01 Dec 2018 23:11:38 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/</guid><description>Coherence's Blog https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/ -&lt;h2 id="题记">题记&lt;/h2>
&lt;p>如果你懒的话当然可以用KMSpico等工具一键激活，但博主不想电脑里多个启动项，并且博主的电脑预装了Office2013家庭与学生版，用此类工具可能出现不可预知的后果，所以打算自己动手激活Visio。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="转换visio版本">转换Visio版本&lt;/h2>
&lt;p>我在&lt;a href="http://msdn.itellyou.cn/?lang=zh-cn">MSDN我告诉你&lt;/a>和某非著名PT站上并没有找到Visio的VL（批量授权）版本，然而KMS激活需要VL版，所以第一步是转换Visio的版本。&lt;/p>
&lt;p>复制以下代码，保存为.bat文件并用管理员身份运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> exist &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&amp;#34;&lt;/span> cd /d &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles%\Microsoft Office\Office16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> exist &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&amp;#34;&lt;/span> cd /d &lt;span style="color:#e6db74">&amp;#34;%ProgramFiles(x86)%\Microsoft Office\Office16&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /rearm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> /f %%x in &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dir /b ..\root\Licenses16\visio???vl_kms*.xrm-ms&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> cscript ospp.vbs /inslic:&lt;span style="color:#e6db74">&amp;#34;..\root\Licenses16\%%x&amp;#34;&lt;/span> &amp;gt;nul
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> /f %%x in &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;dir /b ..\root\Licenses16\visio???vl_mak*.xrm-ms&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span> cscript ospp.vbs /inslic:&lt;span style="color:#e6db74">&amp;#34;..\root\Licenses16\%%x&amp;#34;&lt;/span> &amp;gt;nul
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令的作用分别为：&lt;/p>
&lt;ul>
&lt;li>打开Office的安装目录（Visio也属于Office的一部分）&lt;/li>
&lt;li>重置零售激活&lt;/li>
&lt;li>安装KMS和MAK许可证（转换版本）&lt;/li>
&lt;/ul>
&lt;p>题外话：转换Office和Project版本同理。&lt;/p>
&lt;p>Office：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /rearm
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
&lt;/code>&lt;/pre>&lt;p>Project：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /rearm
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\project???vl_kms*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\project???vl_mak*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
&lt;/code>&lt;/pre>&lt;p>再跑下题，为什么要用批处理呢，因为这段命令直接在cmd里执行会出错，博主没学过Shell无法理解。（留下了没有知识的泪水）&lt;/p>
&lt;h2 id="设置kms密钥及服务器">设置KMS密钥及服务器&lt;/h2>
&lt;p>打开Office的安装目录，也就是代码里的&lt;code>%ProgramFiles%\Microsoft Office\Office16\&lt;/code>（64位）或者&lt;code>%ProgramFiles(x86)%\Microsoft Office\Office16\&lt;/code>（32位）。&lt;/p>
&lt;p>按住Shift+右键，选择在此处打开PowerShell，输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>cscript ospp.vbs /inpkey&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>PD3PC-RHNGV-FXJ29-8JK7D-RJRJK
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来安装KMS密钥。注意以上命令中的KMS密钥只适用与Visio2016，其他版本可到&lt;a href="https://docs.microsoft.com/zh-cn/DeployOffice/vlactivation/gvlks">微软官方文档&lt;/a>中查询。&lt;/p>
&lt;p>然后设置KMS服务器，博主用的是网上找的，以后尝试一下自己搭一个：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /sethst:xxx.xxx
&lt;/code>&lt;/pre>&lt;p>由于不保证可用性，服务器名称已略去。&lt;/p>
&lt;p>指令Office立即连接KMS服务器进行激活：&lt;/p>
&lt;pre tabindex="0">&lt;code>cscript ospp.vbs /act
&lt;/code>&lt;/pre>&lt;p>完成！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a href="https://03k.org/kms.html">https://03k.org/kms.htm&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000015697457">https://segmentfault.com/a/1190000015697457&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/ywd1992/article/details/79412991">https://blog.csdn.net/ywd1992/article/details/79412991&lt;/a>&lt;/p>
- https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/ - Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</description></item></channel></rss>