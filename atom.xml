<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coherence</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cjc7373.github.io/"/>
  <updated>2019-07-20T00:00:00.000Z</updated>
  <id>https://cjc7373.github.io/</id>
  
  <author>
    <name>Coherence</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软通实习</title>
    <link href="https://cjc7373.github.io/2019/07/17/isoftstone-practice/"/>
    <id>https://cjc7373.github.io/2019/07/17/isoftstone-practice/</id>
    <published>2019-07-17T15:12:51.000Z</published>
    <updated>2019-07-20T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>二年级下学期期末，有一个两周的实习，学校给了我们三个选项，其中软通算是知名度最高的一家公司了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/isoftstone.png" alt="“isoftstone”的图片搜索结果" title>                </div>                <div class="image-caption">“isoftstone”的图片搜索结果</div>            </figure><p>然而网上这家公司的风评很差，不过其他两家似乎更差，于是我们班大概四分之三的人都来了软通。</p><a id="more"></a><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>实习第一天，上午讲的开发流程，团队角色，每日例行项目好似我们已经接手了一个实际项目，然而到了下午瞬间变成培训班，开始教我们配置环境。看下发的文档是用 Java Spring Boot 框架来开发。第二天又开始复习 Java。然后到了第三天，负责我们的老师（就叫他项目经理好了）突然说，你们想用什么技术就用什么技术吧。终于不用写 Java 了（逃</p><p>我们大概使用的是 Scrum 敏捷开发方法，最有特色的一点大概就是每日站会了。还有 Story 列表其实也挺不错的，只是没有贴在公告板上感觉失去了灵魂。</p><p>可能是时间短的原因，从一开始需求包括 Story 列表就已经确定了，我认为如果只是说做一个什么系统而不说具体需求会让大家的产品更有差异化，亮点也会更多。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>由于我很倾向 Python，加上青岛大学的开源 OJ 采用的就是 Django+Vue 前后端分离的开发模式，于是我便也想采用这个模式。</p><p>最终我们决定采用前后端完全分离，前后端之间使用 HTTP 协议通信。前端采用：HTML+CSS+JavaScript（JQuery+AJAX），后端采用：Django，数据库采用：PostgreSQL</p><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>我有一些 Git 的知识，然而软通提供的版本管理工具是 SVN。用了一段时间后发现，两个工具没有本质的区别，最大的大概是 SVN 需要中心服务器，权限控制似乎也比较强大，所以像在公司内部比较好用，而 Git 分布式，分支创建极为方便，在开源社区中被广泛使用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/1563352303687.png" alt="1563352303687" title>                </div>                <div class="image-caption">1563352303687</div>            </figure><p>然而我们甚至没有用到分支这个功能，总体上还是没有利用好版本管理。</p><h2 id="前端：三剑客"><a href="#前端：三剑客" class="headerlink" title="前端：三剑客"></a>前端：三剑客</h2><p>zpc 第一天就不知道在哪找了个模板网站，然后冲了十块钱下了个模板。接下来就开始改改改。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>一个问题是，后端的代码如何给前端调试。我们选择：</p><ol><li>后端首先使用 Django 的本地服务器，用 Postman 进行测试，测试通过后上传代码。</li><li>不定期部署至服务器上</li><li>前端从服务器调用接口调试</li></ol><p>然而，在其他组答辩的时候，我们才知道有个东西叫 <a href="http://mockjs.com/" target="_blank" rel="noopener">mock</a>，能够简化调试难度。</p><h2 id="后端：Django"><a href="#后端：Django" class="headerlink" title="后端：Django"></a>后端：Django</h2><p>很早就听说了 Python Web 一些有名的框架，后来又知道了青岛大学的开源 OJ 后端使用的就是 Django，所以很想尝试一下。曾经看过几节慕课，也看了一些官方文档（一开始是真的看不懂）。在做微信小程序的时候，我就想用 Django，奈何技术不够，放弃了。</p><p>实习前，我去找 zjb 两小时速成了一下 Django，发现 Django 虽然是 MTV（Model——Template——View）三级结构，但是前后端分离的话就没有模板了，同时我们用了 REST Framework，在函数名中直接声明要调用的方法，大大简化了开发。REST Framework 也提供了<a href="https://q1mi.github.io/Django-REST-framework-documentation/" target="_blank" rel="noopener">官方中文文档</a>，不过感觉写得不是很好。</p><p>后端代码非常简单，我们先用<code>token = request.COOKIES.get(&quot;token&quot;)</code>获取token，查询<code>user = User.objects.get(userToken=token)</code>，若 token 无效则会抛出<code>User.DoesNotExist</code>错误，查询操作之后调用一个序列化方法<code>users = serializers.serialize(&quot;json&quot;, allMessage, fields=(&quot;userID&quot;))</code>，但是如果直接这样返回会有问题，所以需要把它转化成字典类型<code>rtn[&#39;data&#39;]=json.loads(users)</code>，然后调用<code>JsonResponse</code>返回。</p><p>Django 查询数据库返回的是一个 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/" target="_blank" rel="noopener">QuerySet</a> 对象，我们能对它进行很多操作，但是其实我们都没用到..</p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>我一开始以为 Cookies 是前端负责维护的，后来发现这只是浏览器的工作。所以实际上 Cookies 是后端维护的。在登陆时设置 Cookie，调用 API 时获取 Cookie，退出时删除 Cookie 即可。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们用了 Postman 模拟 HTTP 请求进行测试，很可惜的是没有用到 Django 的自动化测试。</p><h3 id="几个坑"><a href="#几个坑" class="headerlink" title="几个坑"></a>几个坑</h3><p>Django 的文档宣称：</p><blockquote><p><strong>会自动重新加载的服务器 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/django-admin/#django-admin-runserver" target="_blank" rel="noopener"><code>runserver</code></a></strong></p><p>用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。所以你不需要为了让修改的代码生效而频繁的重新启动服务器。然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。</p></blockquote><p>然而有时候重新载入并不会生效（可能是 PyCharm 的问题？），这种时候就很烦..</p><p>数据库中的<code>DateTimeField</code>字段存储的时间总是 UTC 时间，在<code>settings.py</code>中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure><p>这样返回的时间是正常的，虽然数据库里的时间还是 UTC 时间，不过不影响了。</p><h2 id="数据库：PostgreSQL"><a href="#数据库：PostgreSQL" class="headerlink" title="数据库：PostgreSQL"></a>数据库：<strong>PostgreSQL</strong></h2><p>据说 PostgreSQL 和 MySQL 的区别是..</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/1563367521827.png" alt="1563367521827" title>                </div>                <div class="image-caption">1563367521827</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/1563367537890.png" alt="1563367537890" title>                </div>                <div class="image-caption">1563367537890</div>            </figure><p>虽说 Django 官方支持 PostgreSQL，而且我们的数据库部署在服务器上，但是本地还是要一个中间件<code>psycopg2</code>，在 Windows 下安装无问题，在 Linux 下需要一个额外的包 <code>libpq-dev</code>，而在 Mac 下需要先安装 PostgreSQL。这也是一个坑点。</p><p>图形化管理界面方面，我使用了 pgadmin，一开始我以为这是个客户端，还奇怪为什么它提供 Docker 镜像，下完才发现它是网页端。果断卸载然后 docker pull..</p><p>数据库由于我们的设计问题，改了一万次。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/1563368286617.png" alt="1563368286617" title>                </div>                <div class="image-caption">1563368286617</div>            </figure><p>七次其实还是我们重置过一次数据库的结果，真实改动可能有十一二次吧。虽然 Django 提供了方便的 migrate 功能，但是这功能锅很多，能不改还是尽量不改。</p><ul><li>在自己设置主键然后又取消使用自动主键时，Django 会报没有默认值的错。？？？AutoField 你要什么默认值。网上也有同样的情况，应该是 Django 的 Bug。</li><li>在改某张表的时候一直碰到报错一个不存在的列不存在，这张表就似乎坏了。我们的解决方案是重建一张新的表2333</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>我们的接口文档直接写在 Story 列表后面。主要写明了接口地址，方法（GET，POST，PUT，DELETE，我是想 RESTful 的，可是其他人基本随缘了），请求字段，响应字段，以及相应的解释和示例。</p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>前端调试接口的时候产生了跨域的问题。Cookie，Ajax 请求都会遭到浏览器<a href="https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源策略</a>的限制。临时的解决方案是，在 Django 上装一个插件 <a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="noopener"><code>django-cors-headers</code></a>，并且修改<code>settings.py</code>，在<code>INSTALLED_APPS</code>中加入<code>corsheaders</code>，在<code>MIDDLEWARE</code>中加入<code>corsheaders.middleware.CorsMiddleware</code>（位置尽量靠前），并设置字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br><span class="line">CORS_ALLOW_CREDENTIALS = True</span><br></pre></td></tr></table></figure><p>而在前端每个 Ajax 请求中加上：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/1563353270812.png" alt="1563353270812" title>                </div>                <div class="image-caption">1563353270812</div>            </figure><p>而在生产环境中由于同源，所以不存在跨域的问题。</p><p>然而，一个新的问题是，本地浏览器并不能够成功地存储 Cookie，当时的解决办法是，每改动一个页面就部署至服务器上进行调试，然而这个方法效率极低。后来我发现其实这只是 Chrome 浏览器的问题，其他浏览器则没有这个问题。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在开发中，采取的方案是前端静态网页由 Nginx 部署，而后端 Django 代码则使用 Django 自带的服务器部署，而显然，这绝不能用于生产环境。</p><blockquote><p>DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. </p></blockquote><p>（不过我还是用了，甚至都没关 DEBUG 选项）</p><p>因为 Django 服务器使用 <code>python3 manage.py runserver</code>运行的， SSH 断开后进程就被中断了，所以需要让它能够后台运行，尝试了 nohup，子 shell 等方法后（都不好用），最终选择了 screen。主要命令有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">screen -S [NAME] 创建一个新 shell</span><br><span class="line">screen -ls 查看后台 shell</span><br><span class="line">screen -r [ID] 进入某个 shell</span><br><span class="line">Ctrl+A,D 把当前 shell 切换至后台</span><br></pre></td></tr></table></figure><p>Nginx 配置我就直接改默认配置了，路径在<code>/etc/nginx/sites-enabled/default</code>下。除了静态页面外，还需配置后端请求转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8000;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            client_max_body_size 200M;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>（这个配置我是抄青岛大学 OJ 的）</p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>尝试把域名解析至阿里云的服务器，发现不管是 HTTP 还是 HTTPS 请求都会被拦截，并被劫持到一个备案页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="isoftstone-practice/1563512996274.png" alt="1563512996274" title>                </div>                <div class="image-caption">1563512996274</div>            </figure><p>于是换用 GCP，一切顺利。使用 Let’s Encrypt 的证书以及官方推荐的 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot</a> 工具。简单几步即可签发证书并自动配置 Nginx。</p><p> <img src="isoftstone-practice/1563513130043.png" alt="1563513130043"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/summer2day/article/details/81358815" target="_blank" rel="noopener">前后端分离的django项目服务器跨域</a></p><p><a href="https://harttle.land/2016/12/28/cors-with-cookie.html" target="_blank" rel="noopener">CORS 跨域发送 Cookie</a></p><p><a href="https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html" target="_blank" rel="noopener">使用uWSGI和nginx来设置Django和你的web服务器</a></p><p><a href="https://www.cnblogs.com/lhj588/archive/2011/10/27/2226976.html" target="_blank" rel="noopener">django web Cookie 和 Sessions 应用</a></p><p><a href="https://www.jianshu.com/p/15af33d2c2c4" target="_blank" rel="noopener">从零开始建立单元测试-以Django项目为例</a></p><p><a href="http://www.liujiangblog.com/course/django/129" target="_blank" rel="noopener">查询操作</a></p><p><a href="https://www.runoob.com/django/django-model.html" target="_blank" rel="noopener">Django 模型</a></p><p><a href="https://blog.csdn.net/zhu_free/article/details/48176779" target="_blank" rel="noopener">django DateTimeField 时区问题解决</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;二年级下学期期末，有一个两周的实习，学校给了我们三个选项，其中软通算是知名度最高的一家公司了。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;isoftstone-practice/isoftstone.png&quot; alt=&quot;“isoftstone”的图片搜索结果&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;“isoftstone”的图片搜索结果&lt;/div&gt;
            &lt;/figure&gt;

&lt;p&gt;然而网上这家公司的风评很差，不过其他两家似乎更差，于是我们班大概四分之三的人都来了软通。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://cjc7373.github.io/tags/Python/"/>
    
      <category term="Nginx" scheme="https://cjc7373.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis CI 自动部署 Hexo 博客</title>
    <link href="https://cjc7373.github.io/2019/04/21/use-ci-auto-deploy-blog/"/>
    <id>https://cjc7373.github.io/2019/04/21/use-ci-auto-deploy-blog/</id>
    <published>2019-04-21T20:16:56.000Z</published>
    <updated>2019-04-21T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="use-ci-auto-deploy-blog/bg2017121901.png" alt="bg2017121901" title>                </div>                <div class="image-caption">bg2017121901</div>            </figure><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>其实我想用 CI 来自动化部署博客很久了，只是因为懒，CI 又有很多新知识，担心自己的知识储备不够，于是一直咕咕咕。</p><p>前段时间装了 Arch 之后，我很想在两个系统之间同步写作进度，但是 Windows 的休眠和快速启动会导致在 Arch 下我只能以只读方式挂载 Windows 分区（我日常关机用休眠，所以拒绝关休眠）。原来设想的<code>ln -s</code>大法行不通了。</p><p>于是我想到了 CI。仔细一想其实也不复杂，无非是<code>git push</code>， <code>git pull</code>两下罢了。那么，Let’s do it!</p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>我原来设想是博客同时部署在 Github Pages 和我的 VPS 上，而由于某些不可抗力<del>（懒）</del>后者并没有实现。所以需求就变得十分简单，commit 博客内容，CI 自动构建然后部署。</p><ul><li>我更新博客之后，commit 然后 push 至 Github repo</li><li>CI 自动构建博客</li><li>CI 将构建完成的静态文件 push 至 Github repo</li></ul><p>我原先使用的是<code>hexo-deployer-git</code>插件，通过<code>hexo g -d</code>部署，现在这个插件可以丢弃了。同时我的 Hexo 的很多配置都被我瞎改了，同时还有许多奇奇怪怪的模块可能需要清理（不如重新来一遍（大雾）），这些先不谈。</p><h2 id="配置-Github-Repo"><a href="#配置-Github-Repo" class="headerlink" title="配置 Github Repo"></a>配置 Github Repo</h2><p>在这个 Repo 中需要两个分支：</p><ul><li>master 用于存放构建完成的静态文件</li><li>source 用于存放 Hexo 生成的博客源文件</li></ul><p>对 Hexo 文件夹的操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:cjc7373/cjc7373.github.io.git</span><br><span class="line">git checkout -b source</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;To use CI to automated deploy&quot;</span><br><span class="line">git push origin source:source</span><br></pre></td></tr></table></figure><p>本来以为这个仓库会很大（整个文件夹大概 100M），突然发现它自带<code>.gitignore</code>文件，所以实际大小并没有多少。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="use-ci-auto-deploy-blog/1555835090941.png" alt="1555835090941" title>                </div>                <div class="image-caption">1555835090941</div>            </figure><p>然后在 Github 上将主分支切换为<code>source</code>分支。</p><h2 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h2><p>CI 访问仓库需要权限，可选择 Access Token 或者单独的 Deploy key，后者似乎有些麻烦，我选择了前者。当前需求应该只需要 repo 权限，然后在 Travis CI 的 Environment Variables 中加入这个 Token，注意不要勾选 Display value in build log。</p><p>然后就是编写<code>.travis.yml</code>了。 <del>正当我准备抄大佬们的配置的时候，忽然看到 Travis CI 官方提供了<a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">轮子</a>，那就用吧QAQ（其实也没简单多少）</del>，然后翻车了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="use-ci-auto-deploy-blog/1555837683039.png" alt="1555837683039" title>                </div>                <div class="image-caption">1555837683039</div>            </figure><p>看了下文档，我也没搞懂每个字段的意思。所以还是自己来吧。</p><p>为了在 commit 记录中显示更新日期，我把 push 部分单独写成了 sh脚本。</p><p><code>.travis.yml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line"># 只监听 source 分支的改动</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - source</span><br><span class="line"></span><br><span class="line"># 缓存依赖，节省持续集成时间</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo clean</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - chmod +x ./deploy.sh # 添加可执行权限</span><br><span class="line">  - ./deploy.sh</span><br></pre></td></tr></table></figure><p><code>deploy.sh</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">set -ev</span><br><span class="line">export TZ=&apos;Asia/Shanghai&apos;</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;cjc7373&quot;</span><br><span class="line">git config --global user.email &quot;niuchangcun@163.com&quot;</span><br><span class="line"></span><br><span class="line"># 获取以前的 commit 记录</span><br><span class="line">git clone -b master https://github.com/cjc7373/cjc7373.github.io.git .deploy</span><br><span class="line"># 这么移动是为了确保不受之前文件的影响</span><br><span class="line">mv .deploy/.git/ public/</span><br><span class="line">cd public</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Site updated: `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot;</span><br><span class="line"></span><br><span class="line"># 我也不知道 token 怎么用。。抄大佬的代码</span><br><span class="line">git push &quot;https://$&#123;token&#125;@github.com/cjc7373/cjc7373.github.io.git&quot; master:master --quiet</span><br></pre></td></tr></table></figure><p>一开始忘了给<code>deploy.sh</code>可执行权限，CI 啥都没报错就退出了。。后来 token 又忘了写。。反正出了好多锅。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="use-ci-auto-deploy-blog/1555840082905.png" alt="1555840082905" title>                </div>                <div class="image-caption">1555840082905</div>            </figure><p>（看着都是成功其实都是失败。。）</p><p>同时本地配合一下批处理，真正一键发布（滑稽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\niuch\Documents\GitHub\blog\</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br><span class="line">git push</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>历经两个多小时，终于把 CI 弄好了。虽然对 CI 还是一知半解，不过总算开了个头，也基本实现了需求。</p><p>Travis CI 官方的文档很全，但是以我的英文水平看得很吃力（懒得看），中文资料的质量又参差不齐。所以还是要锻炼自己的英语水平啊。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.travis-ci.com" target="_blank" rel="noopener">https://docs.travis-ci.com</a></p><p><a href="https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html</a></p><p><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/" target="_blank" rel="noopener">https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/</a></p><p><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/" target="_blank" rel="noopener">https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;use-ci-auto-deploy-blog/bg2017121901.png&quot; alt=&quot;bg2017121901&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;bg2017121901&lt;/div&gt;
            &lt;/figure&gt;

&lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h2&gt;&lt;p&gt;其实我想用 CI 来自动化部署博客很久了，只是因为懒，CI 又有很多新知识，担心自己的知识储备不够，于是一直咕咕咕。&lt;/p&gt;
&lt;p&gt;前段时间装了 Arch 之后，我很想在两个系统之间同步写作进度，但是 Windows 的休眠和快速启动会导致在 Arch 下我只能以只读方式挂载 Windows 分区（我日常关机用休眠，所以拒绝关休眠）。原来设想的&lt;code&gt;ln -s&lt;/code&gt;大法行不通了。&lt;/p&gt;
&lt;p&gt;于是我想到了 CI。仔细一想其实也不复杂，无非是&lt;code&gt;git push&lt;/code&gt;， &lt;code&gt;git pull&lt;/code&gt;两下罢了。那么，Let’s do it!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://cjc7373.github.io/tags/Hexo/"/>
    
      <category term="CI" scheme="https://cjc7373.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 安装&amp;配置全过程</title>
    <link href="https://cjc7373.github.io/2019/03/24/Arch-Linux-Install/"/>
    <id>https://cjc7373.github.io/2019/03/24/Arch-Linux-Install/</id>
    <published>2019-03-24T20:12:51.000Z</published>
    <updated>2019-04-24T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前我也装过双系统，很遗憾，可能是知识水平不够的缘故，也有笔记本坑爹的原因，装过 Ubuntu，Manjaro，Deepin，Fedora 等众多发行版，要么启动时候卡死，要么根本无法引导，于是作罢。如今开始学习 Linux，便有了重拾双系统的念头。</p><p>这篇博客将记录 Arch 安装与配置全过程。最终目标是 Arch 能成为我的主力系统替代 Windows。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Arch-Linux-Install/1554536417517.png" alt="1554536417517" title>                </div>                <div class="image-caption">1554536417517</div>            </figure><a id="more"></a><p>下面列出笔记本的配置，以供参考。</p><table><thead><tr><th>部件</th><th>型号</th></tr></thead><tbody><tr><td>CPU</td><td>Intel i5-7300HQ</td></tr><tr><td>内存</td><td>16G</td></tr><tr><td>硬盘</td><td>128G NVME SSD + 1T 机械</td></tr><tr><td>显卡</td><td>GeForce GTX 1050 Ti + Intel HD Graphics 630</td></tr><tr><td>无线网卡</td><td>Reltek RTL8822BE</td></tr><tr><td>触摸板</td><td>Synaptics</td></tr></tbody></table><h2 id="为什么选择-Arch"><a href="#为什么选择-Arch" class="headerlink" title="为什么选择 Arch"></a>为什么选择 Arch</h2><p>滚动更新天下第一！（误</p><p>听说社区非常友好（然而我还没感受到</p><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><p>安装参考了 <a href="https://www.viseator.com/2017/05/17/arch_install/" target="_blank" rel="noopener">以官方Wiki的方式安装ArchLinux</a> 和 官方Wiki的 <a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">Installation Guide</a>。在未安装图形界面前，基本一切顺利。</p><p>题外话：说起无线网卡，之前装 Ubuntu 的时候，没有驱动，需要手动安装。不过内核从 4.x 某个版本之后，加入了对我这个网卡的驱动，现在无需配置即可使用了。</p><p>由于固态的空间不足，故没有分配交换文件（感觉也用不掉 16G 内存）。</p><p>在配置<code>sudo</code>时，使用<code>visudo</code>命令编辑配置文件，然而这个 vi编辑器有毒，许多操作都无法执行，感觉是个 bug。（Update：原来 vi 和 vim 是有挺大的区别的…）</p><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><p><del>众所周知</del>，Linux社区似乎对于 Nvidia+Intel 双显卡不怎么友好，在我安装过的数个发行版中（包括 Ubuntu, Debian, Manjaro, Deepin），基本都出现了启动黑屏/在Logo处冻结的情况，本次安装 Arch Linux，同样遇到了此问题。</p><p>由于我准备使用双系统，所以并不准备安装 Nvidia 驱动，仅安装了 Intel 的显卡驱动。</p><p>在装完 Xorg，KDE，sddm 之后，我尝试启动图形界面，成功卡在了 KDE 加载的地方。在随后的尝试中，我发现连 <code>screenfetch</code>, <code>lspci</code> 这样的命令都会导致系统/虚拟控制台（tty）无响应。一开始觉得是内核的问题，因为 Arch 默认安装了 5.0 内核，遂降级至 4.20，问题依旧。</p><p>搜索发现问题可能与N卡的开源驱动 <code>Nouveau</code>有关，（我寻思我也没装nouveau啊），于是创建 <code>/etc/modprobe.d/blacklist.conf</code>，并在文件中写入<code>blacklist nouveau</code>，执行 <code>update-initramfs -u</code>（大概是更新内核配置？）。顺便安装<code>bbswitch</code>把N卡给禁了，具体配置按照<a href="https://coolrc.me/2016/11/28/28115748/" target="_blank" rel="noopener">这篇文章</a>。</p><p>重启问题解决，于是又把内核升到 5.0.2，重启卡在命令行界面（甚至没有见到 sddm）。于是进 live cd，回滚 4.20，重启问题解决。</p><p>话说以后可以试试 Wayland？</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>发现开机时有一行报错，<code>Failed to load Linux Kernel Modules</code>，用<code>systemctl status systemd-modules-load.service</code>查看发现是<code>bbswitch</code>加载失败了。所有东西似乎有着千丝万缕的联系…</p><p>对比发现 5.x 内核启动时并没有报错，于是删除 <code>bbswtich</code>，再升级 5.0 内核，成功启动<code>sddm</code>，问题解决（终于可以愉快地滚系统啦）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Arch-Linux-Install/1554535852814.png" alt="1554535852814" title>                </div>                <div class="image-caption">1554535852814</div>            </figure><p>原因可能是 <code>bbswitch</code> 配置不当，具体原因不明。此时开始仍然会报<code>Failed to load Linux Kernel Modules</code>，需要手动将<code>/etc/modprobe.d/bbswitch.conf</code>及<code>/etc/modprobe.d/</code>中某个文件中（我忘了）的<code>bbswitch</code>删除。</p><h2 id="必要软件"><a href="#必要软件" class="headerlink" title="必要软件"></a>必要软件</h2><ul><li>Arch Linux CN 源，包含了许多 AUR 中的软件。第一次加入源的时候不知道要安装 keyring，导致安装包时卡在了  GPG 签名校验那一步。我还寻思为什么 Arch 的签名老出锅。。（BTW：为什么需要 keyring？）</li><li>Shadowsocks，装完命令行版的 Shadowsocks，根据 Wiki 描述，应用 <code>ss-local</code>启动，然而<code>commend not found</code>，未能解决，于是又装了 Shadowsocks-qt5。</li><li><del>Chrome，ArchCN 源中有（话说什么时候试试 Chromium）。</del> Chrome 不支持硬件加速，现已更换 Chromium。同步等功能一切正常。</li><li>字体，不安装中文字体许多中文字是框框（然而为什么不是所有呢），我选择了<code>wqy-microhei</code>，然而系统自带的英文字体也很丑。按照<a href="https://wiki.archlinux.org/index.php/Microsoft_fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">官方Wiki</a>把Windows中的字体复制了过来，然而发现英文字体的间距变得非常小。中文字体看着挺舒服（应该是雅黑？）。</li><li>中文输入法，装了谷歌拼音发现打出来的字是繁体，还找不到相关选项（Update：把简繁转换关了就好了）。现在在用 Rime。</li><li>印象笔记，在 Linux 有开源的客户端 Tusk。然而 Tusk 不支持 Markdown….</li><li>Tim/QQ，ArchCN 源包含。本质上是魔改过配置的 Wine 容器。</li></ul><h2 id="省电"><a href="#省电" class="headerlink" title="省电"></a>省电</h2><p>在用 Linux 之前，我一直认为 Linux 会比 Windows 更加省电，没想到刚好相反。所以为了省电，我不得不做许多额外的配置。</p><p>首先，耗电的大头还是在 CPU，我们请出<code>cpupower</code>，启用<code>powersave</code>调度，风扇安静了，掉电也少了不少。</p><p>除了 CPU，其他部件也耗电呐。好在有个包能够统一地管理电源消耗，那就是<code>laptop-mode-tools</code>，然而这玩意似乎用处不大。。</p><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><h3 id="瞎改配置"><a href="#瞎改配置" class="headerlink" title="瞎改配置"></a>瞎改配置</h3><p>Linux Mode Setting 可以提前启动？虽然不知道有什么用。</p><p>编辑<code>/etc/mkinitcpio.conf</code>，修改<code>MODULES</code>一行，改为<code>MODULES=(i915)</code>（Intel 显卡）。</p><h3 id="目前遇到的问题"><a href="#目前遇到的问题" class="headerlink" title="目前遇到的问题"></a>目前遇到的问题</h3><ul><li>为什么任务栏有两个音量图标？（一个是 Audio Volume，一个是 KMix，然而这不都是 KDE 自带的么..）</li><li>触摸板无法使用手势</li><li>还是想禁用独显，参考资料<a href="https://xuchen.wang/archives/archbbswitch.html" target="_blank" rel="noopener">https://xuchen.wang/archives/archbbswitch.html</a></li><li>Tim 字体发虚，<a href="https://github.com/countstarlight/deepin-wine-tim-arch" target="_blank" rel="noopener">官方仓库</a>似乎给出了解决方案。</li><li>风扇调度误我，只要CPU占用率高个那么几秒，风扇就像起飞了一样</li><li>Typora 打开时不能恢复上次打开的文件夹</li></ul><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><ul><li><p>显示桌面：在 Panel Option 中添加 Show Desktop 小工具，然后设置快捷键为 Win+D。</p></li><li><p>Clipboard 能够生成二维码。（方便多设备发送网址什么的？然而我有 Chrome 同步了..）</p></li><li><p>开机时打开 Num Lock：根据 Wiki，KDE 自带了这个选项，在<code>Hardware/Input Devices/Keyboard</code>中。不过我转念一想，不是先启动<code>sddm</code>么？试了一下果然在<code>sddm</code>界面小键盘是关着的。于是在<code>/etc/sddm.conf</code>加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[General]</span><br><span class="line">Numlock=on</span><br></pre></td></tr></table></figure></li><li><p>pacman 能够在升级前对比版本信息，对于我这种强迫症非常有用。</p><p><img src="Arch-Linux-Install/1555419677545.png" alt="1555419677545"></p></li><li><p>修改 <code>/etc/fstab</code>，加入以下内容，使得开机时能够自动以只读模式挂载 Windows 分区。</p><p><img src="Arch-Linux-Install/1556519535880.png" alt="1556519535880"></p></li><li><p>日志相关。由于<code>systemd</code>这个神奇的存在，似乎所有日志都可以通过<code>systemd</code>带的<code>journalctl</code>查看。</p></li></ul><pre><code>* 查看启动时`tty1`的滚过去的那一大堆日志：`journalctl /usr/lib/systemd/systemd -b`* 查看加载失败的 unit：`systemctl --failed`* 查看某个 unit 的日志：`journalctl -u nginx.service --since today`  （另外`systemctl status`也能显示最新的大概十行日志）</code></pre><ul><li>增强 Bash 的自动补全：<code>pacman -S bash-completion</code>，重启终端即可。</li></ul><h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><ul><li><p>今天打开tusk发现闪退。。用终端运行报<code>tusk: error while loading shared libraries: libnode.so: cannot open shared object file: No such file or directory</code>，我干什么了我？我啥都没干啊。。重新安装未解决问题。重启同样未解决。</p><p>于是 Google，StackOverflow 上有一个帖子建议我先找找有没有这个库。</p><p><img src="Arch-Linux-Install/1555419245819.png" alt="1555419245819"></p><p>发现是有的，ls 看下。</p><p><img src="Arch-Linux-Install/1555419316125.png" alt="1555419316125"></p><p>然而链接到了另一个文件，一看，果然那个文件没了。。（推测和包更新了有关？）但是 Typora 有这个库呀，于是尝试链接到 Typora 带的那个库，然后问题解决了。。。我被我这波操作惊呆了。</p></li><li><p>觉得字体不好看，然后似乎改崩了…目前把 Windows 的字体扔了，重新安装的字体列表有：</p><ul><li>wqy-zenhei</li><li>wqy-microhei</li><li>adobe-source-han-sans-cn-fonts</li><li>adobe-source-han-serif-cn-fonts</li></ul><p>然后把终端的字体改成了 Consolas（AUR），感觉还是这个字体好看，不过中文字体好像变丑了。。</p></li><li><p>尝试安装 Tim。</p><p><img src="Arch-Linux-Install/1555420630345.png" alt="1555420630345"></p><p>？？？说好的自动解决依赖关系呢？</p><p>直接构建发现会报一堆依赖的错，查看 Github 项目发现：</p><blockquote><p><code>deepin-wine-tim</code>依赖<code>Multilib</code>仓库中的<code>wine</code>，<code>wine_gecko</code>和<code>wine-mono</code>，Archlinux默认没有开启<code>Multilib</code>仓库，需要编辑<code>/etc/pacman.conf</code>，取消对应行前面的注释(<a href="https://wiki.archlinux.org/index.php/Official_repositories#multilib" target="_blank" rel="noopener">Archlinux wiki</a>)</p></blockquote><p>懂了，我以后一定先 RTFM（</p></li><li><p>Windows 分区在 Windows 启用了快速启动或者处于休眠状态时只能以只读方式挂载。什么傻吊设计。（因为我想把博客文件夹 <code>ln</code> 到 Arch 下，使得双系统能够同步写作）</p><p>解决方案：使用 Travis CI 自动部署 Hexo。</p></li><li><p>输入法在终端和 Telegram，Kate 下（以及更多）不能使用。</p><p>根据<a href="http://www.towdium.me/2017/04/11/manjaro-config-diary/" target="_blank" rel="noopener">某大佬的博客</a>：</p></li></ul><blockquote><p>安装完输入法，你需要把输入法添加到环境变量里才能让他生效。我目前的配置是在 <code>~/.xprofile</code>这个文件里加上下面几行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; export GTK_IM_MODULE=fcitx</span><br><span class="line">&gt; export QT_IM_MODULE=fcitx</span><br><span class="line">&gt; export XMODIFIERS=@im=fcitx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>​        成功解决。</p><ul><li><p>改完<code>fstab</code>之后，开机发现闪过一行[FAILED]，查看日志发现<code>sys-fs-fuse-connections.mount</code>这个服务（mount）失败了。日志为：</p><blockquote><p>May 02 14:19:10 Coherence systemd[1]: Condition check resulted in FUSE Control File System being skipped.<br>May 02 14:19:11 Coherence systemd[1]: sys-fs-fuse-connections.mount: Start request repeated too quickly.<br>May 02 14:19:11 Coherence systemd[1]: sys-fs-fuse-connections.mount: Failed with result ‘start-limit-hit’.<br>May 02 14:19:11 Coherence systemd[1]: Failed to mount FUSE Control File System.</p></blockquote><p>Google 了下，没找到原因，尝试 restart，成功了。</p><blockquote><p><strong>active (mounted)</strong></p></blockquote><p>有待进一步观察。。（未复现</p></li></ul><h2 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h2><ul><li>zsh</li><li>ssh相关帐号导入arch</li><li>可以尝试一下用命令行版替代 ss-qt5 </li></ul><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><ul><li><p>在 Linux 下，什么东西装好不用折腾就能用我反而觉得不正常…</p></li><li><p>附一段不太恰当的比喻：</p><blockquote><p>Windows 是人妻，啥都有，啥都会，啥都包玩的舒服，就是经常还往家里带一些你不想要的<br>MacOS 是女朋友，带出去在人前倍有feel，但是只能按照她的规则玩不然一脚踹下床<br>Linux 是小萝莉，懵懂无知，你怎么调教就怎么跟你玩，但是调教过猛经常会把腰闪了，萝莉也玩坏了。。。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;以前我也装过双系统，很遗憾，可能是知识水平不够的缘故，也有笔记本坑爹的原因，装过 Ubuntu，Manjaro，Deepin，Fedora 等众多发行版，要么启动时候卡死，要么根本无法引导，于是作罢。如今开始学习 Linux，便有了重拾双系统的念头。&lt;/p&gt;
&lt;p&gt;这篇博客将记录 Arch 安装与配置全过程。最终目标是 Arch 能成为我的主力系统替代 Windows。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;Arch-Linux-Install/1554536417517.png&quot; alt=&quot;1554536417517&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;1554536417517&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://cjc7373.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>中国电信 HG2543C1 光猫获取超级管理员密码</title>
    <link href="https://cjc7373.github.io/2019/02/16/fiber-modem-crack/"/>
    <id>https://cjc7373.github.io/2019/02/16/fiber-modem-crack/</id>
    <published>2019-02-16T16:32:47.000Z</published>
    <updated>2019-02-19T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>寒假回家，欣闻家中宽带升级成了 200M，然而坑爹的是一直以来的桥接模式被改成路由模式。由于想公网访问本地的 NAS，且想看看 IPV6 是否已在我家区域部署，所以想破解光猫获取管理员密码。</p><p>Google 该设备的型号，发现网上并没有相关的教程，可能是型号比较新的缘故。致电中国电信，被告知无法透露管理员密码，派人上门调试则需额外花费。本着自己折腾的原则，遂在某宝购入 CH340G USB转TTL板，准备拆机 TTL 破解光猫。</p><a id="more"></a><h2 id="0x01-拆机"><a href="#0x01-拆机" class="headerlink" title="0x01 拆机"></a>0x01 拆机</h2><p>拆机后发现 PCB 板上有 TTL 插针，用万用表测得倒数第二根为 GND（接地pin），然后剩余四根随机组合，测得 RX（接收数据pin）和 TX（发送数据pin）。用杜邦线连接 USB转TTL板和 TTL 插针。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="fiber-modem-crack/IMG_20190219_113847.jpg" alt="IMG_20190219_113847" title>                </div>                <div class="image-caption">IMG_20190219_113847</div>            </figure><h2 id="0x02-串口调试"><a href="#0x02-串口调试" class="headerlink" title="0x02 串口调试"></a>0x02 串口调试</h2><p>电脑安装好 USB转TTL板的驱动，USB端连接上电脑。网上的教程一般使用 SecureCRT， 然而我后来发现 Xshell 也能连接串口，遂用 Xshell 进行调试。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="fiber-modem-crack/1550548463370.png" alt="1550548463370" title>                </div>                <div class="image-caption">1550548463370</div>            </figure><p>如图设置参数，port 按照自己的情况设置。</p><p>然后连接。接通电源后等待。大概等待两分钟后，按回车，出现 <code>Login:</code> 字样，用 <code>root/hg2x0</code> 登陆。</p><p>用 <code>cat /proc/cpuinfo</code> 看一下 CPU 信息，居然是 MIPS…</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="fiber-modem-crack/1550306022384.png" alt="1550306022384" title>                </div>                <div class="image-caption">1550306022384</div>            </figure><p>超级密码在<code>/flash/cfg/agentconf/factory.conf</code>文件中。文件前两行即为管理员账户和密码。至此，光猫破解完成。</p><h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="https://paper.seebug.org/506/#0x03" target="_blank" rel="noopener">如何通过TTL调试光猫</a><br><a href="https://m2.zhugh.com:26800/po-jie-dian-xin-guang-mao/" target="_blank" rel="noopener">破解电信光猫</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寒假回家，欣闻家中宽带升级成了 200M，然而坑爹的是一直以来的桥接模式被改成路由模式。由于想公网访问本地的 NAS，且想看看 IPV6 是否已在我家区域部署，所以想破解光猫获取管理员密码。&lt;/p&gt;
&lt;p&gt;Google 该设备的型号，发现网上并没有相关的教程，可能是型号比较新的缘故。致电中国电信，被告知无法透露管理员密码，派人上门调试则需额外花费。本着自己折腾的原则，遂在某宝购入 CH340G USB转TTL板，准备拆机 TTL 破解光猫。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018年终总结&amp;2019展望</title>
    <link href="https://cjc7373.github.io/2019/02/11/2018Summary_2019Plan/"/>
    <id>https://cjc7373.github.io/2019/02/11/2018Summary_2019Plan/</id>
    <published>2019-02-11T19:00:00.000Z</published>
    <updated>2019-02-14T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是己亥猪年的大年初七，很惭愧到今天我才想起寒假前就想写的年终总结还没有写。</p><a id="more"></a><h2 id="2018-总结"><a href="#2018-总结" class="headerlink" title="2018 总结"></a>2018 总结</h2><p>时间及事件依据：印象笔记、Google 相册、我的记忆。</p><p>事件大致以时间顺序排列。</p><ul><li>一月初，经历了在西安的第一场雪。</li><li>（时间未知）使用了 Windows 运行来快速启动程序，<del>（感觉上）大大提高了效率</del>（不（感觉装逼才是真的</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2018Summary_2019Plan/1549962279010.png" alt="1549962279010" title>                </div>                <div class="image-caption">1549962279010</div>            </figure><ul><li>从 1.13 开始寒假训练， 3.24 校赛，3.31 天梯赛，5.17 左右 ACM省赛，7.19 开始暑假多校训练，10.26 徐州区域赛， 11.23 深圳 CCPC 总决赛，整个一年我算是比较积极地参与 ACM-ICPC 竞赛（虽然下半年逐渐开始划水</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2018Summary_2019Plan/1550032126921.png" alt="1550032126921" title>                </div>                <div class="image-caption">1550032126921</div>            </figure><p>（六张照片依次为 CCPC、寒假训练、省赛、校赛、天梯赛、徐州区域赛）</p><ul><li>一月末，开始种草轻薄本，并寻求把游戏本卖了，未果。</li><li>从年初开始，用空闲资金进行投资，并开始学习相关知识。一月末我第一次买入了一个基金，入坑。一开始赚了点钱很高兴，后来贸易战开始就亏了。七月初买了一本金融方面的书然而并没有看多少。八月开始跟投某大V的投资计划，九月末把主要账户转移到且慢。回想起一开始什么都不懂就冲着某个行业买基金，现在慢慢有些了解但知识仍然很浅薄。时刻要提醒自己：不要盲从。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2018Summary_2019Plan/1550032359691.png" alt="1550032359691" title>                </div>                <div class="image-caption">1550032359691</div>            </figure><ul><li>定下（并践行）了在美（英）剧中学英语的目标，然后每当我看剧时总是自我安慰同时我也在<del>学习</del>（并没有）。</li></ul><p>到目前为止看过的剧有（不限于18年）：Friends，Sherlock，Black Mirror 一季， The IT Crowd 两季，Monday Mornings，Greys Anatomy 一季， Person of Interest 三季，Modern Family 半季多</p><ul><li>从3月份开始，我开始撸 DigitalOcean 的 Github 学生优惠，到现在为止服务器运维的相关知识增长地挺快…应该是从大学开始吧，我开始用VPS自建SS，一开始是 Cloudcone 还是 Vultr 后来撸到了 DO，再后来19年年初的时候知道了一个超便宜的深港专线，后来又撸了阿里云的学生机。</li><li>四月中旬看了死亡诗社，Seize the day 成了我的座右铭，虽然我一直没有做到这一点。</li><li>整个一年我总有一种感觉，学习不在状态，有时候一直陷入一种昏昏沉沉的状态，那种状态下，犯困，没有学习的心思，干其他事也提不起兴趣。仿佛就在虚度光阴。从那个寒假开始我就（似乎）养成了不良的生活习惯。</li><li>四五月份入了创新IE3P 和 iPad 2018，拔草成功，却没有对我的学习质量有多大的改善。后来又开始种草蓝牙降噪耳机…</li><li>六月末，转专业考试。一年中最重要的一件事，从环境科学与工程转到了软件工程专业，进入了理想的专业。</li><li>然而同时打算换宿舍的（非常不喜欢我们宿舍的氛围和作息），最终没有成功。后来也尝试过 Bose Sleepbuds 这个方案，效果不佳。遂产生了租房的想法。</li><li>尝试读英文原著，从大一上开始读星际穿越的剧本，读到18年年中读完了。然后开始看三体的英文版，到现在看了一半多。</li><li>九月中旬开始用 Excel 记账，对日常消费进行记录和管理，持续至今。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="2018Summary_2019Plan/1550035065769.png" alt="1550035065769" title>                </div>                <div class="image-caption">1550035065769</div>            </figure><ul><li>九月中旬，在学校有了一辆自己的自行车。</li><li>大二上是忙碌的一学期。首先课就很多，粗略统计之下每周有38个学时，作为对比，大一上是27学时，大一下是33学时。然后学期初的时候偶然间看到网络中心招学生助理，于是去了。（<del>并没有学什么东西</del>好歹还是学了点的）然后是计协（主要）和其他社团的活动。</li><li>学习成绩仍然不尽如人意，而且有着每学期逐步下滑的趋势…</li><li>记不清某个时间了，折腾过Ubuntu，碰到了N+I卡驱动的问题，卡启动Logo，最后也没解决。后来就弃疗了，平时就瞎搞搞虚拟机和 WSL 了。</li><li>十二月下旬，我校ACM新生赛，我负责了评测环境的搭建，这大概是我一年来做过的最有意义的一件事。</li><li>好多书都只读到一半，然后处于半弃坑状态，比如未来简史，值得反思…</li><li>下半年的印象笔记笔记数量似乎少了很多…</li><li>更加怀念高中时候的生活了…或许到了工作之后我也会更加怀念大学的生活吧。</li></ul><h2 id="2019-年初计划"><a href="#2019-年初计划" class="headerlink" title="2019 年初计划"></a>2019 年初计划</h2><ul><li>学习 Linux，参考书目《Linux&amp;Unix 大学教程》</li><li>学习 Git，参考书目 《Pro Git》</li><li>学习计算机网络，参考书目《Computer Networking:A Top-down Approach》（这本书TM还是去年七月下旬借的）</li><li>学习使用 Anki （去年九月初就知道了这个软件并一直想学 emmm..)</li><li>写一篇关于 Lumia 的博客（同样是去年鸽到现在了…）</li><li>用 AutoHotkey 把 Markdown 编辑器打造地更顺手一点</li><li>在豆瓣建立起我的书单，并写书评</li><li>买轻薄本（从去年年初我就开始有这个想法了QAQ），目前种草 LG Gram，等一个19款</li><li>多运动，多出去骑车</li><li>实现本博客的 Todo（虽然大半都是在瞎搞</li><li>搬出去！</li><li>做好未来的打算，考研 OR 出国，是否找个实验室去做项目，未来的方向等等</li><li>记录生活</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章写了三天才写完，写的也比较杂乱。事实上在一开始我就没有一个整体的构思。</p><p>2019年已经快过去了两个月，我才堪堪写完年初计划。这些计划（或者说我未来的目标）虽有个模糊的大方向，却又不甚明了，或许我还需要更深层次的思考吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是己亥猪年的大年初七，很惭愧到今天我才想起寒假前就想写的年终总结还没有写。&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://cjc7373.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>DOMjudge 配置/踩坑指南</title>
    <link href="https://cjc7373.github.io/2018/12/19/Domjudge-config/"/>
    <id>https://cjc7373.github.io/2018/12/19/Domjudge-config/</id>
    <published>2018-12-19T20:12:51.000Z</published>
    <updated>2019-03-19T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我校新生赛也能用上 World Final 同款评测系统啦~</p><p>DOMjudge 提供了详尽的<a href="https://www.domjudge.org/documentation" target="_blank" rel="noopener">官方文档</a>，然而对于博主这种英文弱鸡来说读的很痛苦。前前后后折腾了有两个星期吧，以此文作为避（踩）坑指南。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>DOMjudge，作为一款开源的 CCS(<a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System" target="_blank" rel="noopener">Contest Control System</a>)，现已被ICPC钦定为官方的比赛评测系统。比 pc^2 这种闭源而含有诸多 Bug 的 CCS 高到不知道哪里去了啊。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Domjudge-config/1545218741334.png" alt="1545218741334" title>                </div>                <div class="image-caption">1545218741334</div>            </figure><p>根据官方文档的描述，DOMjudge 的主要特性有：</p><ul><li>分布式且自动评测的 judge host</li><li>Web 用户界面</li><li>模块化的系统，方面添加不同的语言/编译器</li></ul><p>整个 DOMjudge 主要分为两个部分，Domserver 和 Judgehost，据其名字即可得出它们的功能。需要注意的是，DOMjudge 使用数据库来存放几乎一切数据，所以我们还需配置 MySQL 或者 MariaDB。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>DOMjudge 只能运行在 Linux 环境下。博主的运行环境是 Ubuntu Server 18.04 LTS，以及 DOMjudge 6.0.3。</p><p>除了传统的安装方式外，DOMjudge 还提供了 Docker 镜像以供安装，这样就大大简化了安装的困难程度。</p><p>关于 Docker 的使用这里不作详细描述。（其实是博主也一知半解）</p><p>然而<a href="https://hub.docker.com/r/domjudge/domserver" target="_blank" rel="noopener">官方的 Docker 文档中</a>仅使用了命令来启动容器，为了进一步简化安装，也为了方便修改配置，我决定采用 Docker Compose 。以下是 <code>docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mariadb:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dj-mariadb</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=rootpw</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_USER=domjudge</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_PASSWORD=djpw</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_DATABASE=domjudge</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$PWD/data:/var/lib/mysql</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">13306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    command:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--max-connections=1000</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">--innodb-log-file-size=480M</span></span><br><span class="line"><span class="attr">  domserver:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">domjudge/domserver:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">domserver</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_HOST=mariadb</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_USER=domjudge</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_DATABASE=domjudge</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_PASSWORD=djpw</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=rootpw</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CONTAINER_TIMEZONE=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">phpmyadmin</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    links:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">  judgehost:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">domjudge/judgehost:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">judgedaemon-0</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">CONTAINER_TIMEZONE=Asia/Shanghai</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DAEMON_ID=0</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">JUDGEDAEMON_PASSWORD=whatthehell</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">domserver</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">domserver</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/sys/fs/cgroup:/sys/fs/cgroup:ro</span></span><br><span class="line"><span class="attr">  phpmyadmin:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">phpmyadmin/phpmyadmin</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">myadmin</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">PMA_HOST=mariadb</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - mariadb:</span><span class="string">mariadb</span></span><br></pre></td></tr></table></figure><p>然后运行 <code>docker-compose up -d</code> 即可完成部署。</p><p>Judgehost 利用了 Linux 内核的 Cgroup 特性，所以需进行一步额外设置。编辑 <code>/etc/default/grub</code> 文件，将默认的命令改为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet cgroup_enable=memory swapaccount=1"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">"quiet cgroup_enable=memory swapaccount=1"</span></span><br></pre></td></tr></table></figure><p>然后运行 <code>update-grub</code> 并重启。</p><p>需要多核判题的话创建多个 Judgehost 容器并修改 DAEMON_ID 为不同的值即可。</p><p>目前存在的问题：</p><ul><li>judgehost 用户的初始密码不定，需要手动去 web 端更改并添加 <code>JUDGEDAEMON_PASSWORD</code> 的环境变量。（默认环境变量的密码是 <code>password</code>）</li><li>整个系统对我来说是个黑盒…</li></ul><p>除了 MariaDB , DOMserver , Judgehost 这三个必要的容器外，我还使用了 phpMyAdmin 来进行图形化的数据库管理（备份)。数据库（即 <code>mariadb</code> 容器的数据卷）创建在了当前目录的<code>data</code>文件夹下，方便备份。</p><p>其中，Domserver 映射到了主机的 80 端口， phpMyAdmin 映射到了 8080 端口。由于是内网环境，故不准备采用 HTTPS 加密。</p><p>需要注意的是，DOMjudge 提供的 Judgehost 镜像中仅包含 C, C++, Java 三种语言的运行环境。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Domserver 部署成功后，即可通过 Web 端来访问了。默认的管理员账号用户名 <code>admin</code> 密码 <code>admin</code> 。</p><p>可以在 Config Checker 中进行配置检查。</p><p>C++ 的默认编译选项没有 C++11， 需手动添加。</p><h3 id="题目导入"><a href="#题目导入" class="headerlink" title="题目导入"></a>题目导入</h3><p>DOMjudge 支持用 zip 格式的压缩包导入/导出题目。</p><p>具体的文件结构是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">│  domjudge-problem.ini</span><br><span class="line">│</span><br><span class="line">├─data</span><br><span class="line">│  ├─sample</span><br><span class="line">│  └─secret</span><br><span class="line">│</span><br><span class="line">└─problem_statement</span><br><span class="line">        problem.&#123;pdf,html,txt&#125;</span><br></pre></td></tr></table></figure><p>在 <code>domjudge-problem.ini</code> 中定义了如下信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Domjudge-config/1545219324330.png" alt="1545219324330" title>                </div>                <div class="image-caption">1545219324330</div>            </figure><p>（懒得翻译了，有时间再补）</p><p>在 secret 文件夹中存放测试数据，在 sample 文件夹中存放样例数据， 在 problem_statement 存放题面。</p><p>（不知道为什么博主在压缩包内上传题面没有成功过，只能通过 Web 端来上传）</p><p>测试数据的扩展名为 <code>.in</code> 和 <code>.ans</code>。</p><h3 id="队伍导入"><a href="#队伍导入" class="headerlink" title="队伍导入"></a>队伍导入</h3><p>队伍及用户导入采用 tsv(<em>tab-separated values</em>) 格式，即信息之间采用制表符（TAB）分隔。格式由<a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System_Requirements#Appendix:_File_formats" target="_blank" rel="noopener"> ICPC 官方定义</a>。</p><p>teams 格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teams    1</span><br><span class="line">team_id    external_ID    group_id    team_name    institution_nameinstitution_short_name    country_code</span><br></pre></td></tr></table></figure><p>参考<a href="https://cubercsl.cn/notes/DOMjudge-Note.html" target="_blank" rel="noopener">CSL的博客</a>发现：</p><blockquote><p> 在导入teams表的时候，在<code>Country Code</code>后追加一列，填写<code>Institution External ID</code>。<br>这步是阅读<a href="https://github.com/DOMjudge/domjudge/blob/master/lib/lib.impexp.php#L108" target="_blank" rel="noopener">源代码</a>后猜测的，当时的实际操作是直接在数据库中的<code>team_affiliation</code>用SQL语句更新<code>ExternalID</code>的。</p></blockquote><p>博主采用了这种方式，并在导入队伍后通过 Web 界面手动添加 Affiliation 信息。</p><p>accounts 格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accounts1</span><br><span class="line">account_typefullnameusernamepassword</span><br></pre></td></tr></table></figure><p>一种（可能）简单的方式是先导入队伍再导入用户，并且用户 username 的后缀数字与 team_id 相同。不需要的字段可以直接留空。（不能缺少分隔符）</p><p>tsv 文件可以采用 Excel 生成。在 Excel 中输入完数据后选择另存为文本文件（制表符分隔）即可。</p><p>如需使用<code>institution_name institution_short_name country_code</code> 三项需在 Team Affiliations 中提前创建相应的条目。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>参考官方的 API 说明，DOMjudge 包含<a href="https://clics.ecs.baylor.edu/index.php/Contest_API" target="_blank" rel="noopener"> ICPC 定义的 API </a>和<a href="https://www.domjudge.org/demoweb/api/doc" target="_blank" rel="noopener">自有的 API</a>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Domjudge-config/1545220336183.png" alt="1545220336183" title>                </div>                <div class="image-caption">1545220336183</div>            </figure><h3 id="滚榜"><a href="#滚榜" class="headerlink" title="滚榜"></a>滚榜</h3><p>尝试使用官方的 <a href="https://icpc.baylor.edu/icpctools/" target="_blank" rel="noopener">ICPC tools</a>，发现总是提示比赛未结束，查阅日志认为是 DOMjudge 的 event feed 格式与 ICPC tools 提供的 resolver 工具的格式不兼容。</p><p>尝试 DOMjura 发现同样不能正确读取 event-feed 。</p><h2 id="新生赛概况"><a href="#新生赛概况" class="headerlink" title="新生赛概况"></a>新生赛概况</h2><p>闲扯几句。</p><p>热身赛一切良好。出题人数据出锅，被批判了一个多小时2333。</p><p>正式赛赛前比赛账号导入的时候，有个人是后来添加的，和之前的版本没有对应上，导致部分队伍登录到了后一个队伍的账号，重新导入 team 后发现无法登录，还需导入 accounts。这导致比赛推迟了 5 分钟。</p><p>由于 Submission 的输出数据是保留的，而赛前我的服务器硬盘空间本来就不多了，比赛时当服务器的硬盘占用达到 90% 时，所有 judgehost 就都被关了。我只能胡乱删几个软件包腾出空间。还好没有造成大的影响。</p><p>然后直到最后还是没有搞出滚榜。</p><p>GG。总体来说还是挺顺利的，服务器没有崩，甚至平均 CPU load 只有 1.0 左右，就是感觉比较吃 I/O，还好我用的是固态（<del>先见之明</del>）。</p><p>总结一下，DOMjudge 体验极佳，可以在校赛再推广一波。</p><p>2019/3/19 补充：滚榜采用了 Github 上的<a href="https://github.com/hex539/scoreboard" target="_blank" rel="noopener">这个项目</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我校新生赛也能用上 World Final 同款评测系统啦~&lt;/p&gt;
&lt;p&gt;DOMjudge 提供了详尽的&lt;a href=&quot;https://www.domjudge.org/documentation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;，然而对于博主这种英文弱鸡来说读的很痛苦。前前后后折腾了有两个星期吧，以此文作为避（踩）坑指南。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://cjc7373.github.io/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>使用KMS激活Visio</title>
    <link href="https://cjc7373.github.io/2018/12/01/Visio-KMS-Activate/"/>
    <id>https://cjc7373.github.io/2018/12/01/Visio-KMS-Activate/</id>
    <published>2018-12-01T23:11:38.000Z</published>
    <updated>2018-12-01T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>如果你懒的话当然可以用KMSpico等工具一键激活，但博主不想电脑里多个启动项，并且博主的电脑预装了Office2013家庭与学生版，用此类工具可能出现不可预知的后果，所以打算自己动手激活Visio。</p><a id="more"></a><h2 id="转换Visio版本"><a href="#转换Visio版本" class="headerlink" title="转换Visio版本"></a>转换Visio版本</h2><p>我在<a href="http://msdn.itellyou.cn/?lang=zh-cn" target="_blank" rel="noopener">MSDN我告诉你</a>和某非著名PT站上并没有找到Visio的VL（批量授权）版本，然而KMS激活需要VL版，所以第一步是转换Visio的版本。</p><p>复制以下代码，保存为.bat文件并用管理员身份运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if exist "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles%\Microsoft Office\Office16"</span><br><span class="line">if exist "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" cd /d "%ProgramFiles(x86)%\Microsoft Office\Office16"</span><br><span class="line">cscript ospp.vbs /rearm</span><br><span class="line">for /f %%x in ('dir /b ..\root\Licenses16\visio???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" &gt;nul</span><br><span class="line">for /f %%x in ('dir /b ..\root\Licenses16\visio???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:"..\root\Licenses16\%%x" &gt;nul</span><br></pre></td></tr></table></figure><p>以上命令的作用分别为：</p><ul><li>打开Office的安装目录（Visio也属于Office的一部分）</li><li>重置零售激活</li><li>安装KMS和MAK许可证（转换版本）</li></ul><p>题外话：转换Office和Project版本同理。</p><p>Office：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /rearm</span><br><span class="line">for /f %%x in (&apos;dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul</span><br><span class="line">for /f %%x in (&apos;dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul</span><br></pre></td></tr></table></figure><p>Project：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /rearm</span><br><span class="line">for /f %%x in (&apos;dir /b ..\root\Licenses16\project???vl_kms*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul</span><br><span class="line">for /f %%x in (&apos;dir /b ..\root\Licenses16\project???vl_mak*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\root\Licenses16\%%x&quot; &gt;nul</span><br></pre></td></tr></table></figure><p>再跑下题，为什么要用批处理呢，因为这段命令直接在cmd里执行会出错，博主没学过Shell无法理解。（留下了没有知识的泪水）</p><h2 id="设置KMS密钥及服务器"><a href="#设置KMS密钥及服务器" class="headerlink" title="设置KMS密钥及服务器"></a>设置KMS密钥及服务器</h2><p>打开Office的安装目录，也就是代码里的<code>%ProgramFiles%\Microsoft Office\Office16\</code>（64位）或者<code>%ProgramFiles(x86)%\Microsoft Office\Office16\</code>（32位）。</p><p>按住Shift+右键，选择在此处打开PowerShell，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /inpkey:PD3PC-RHNGV-FXJ29-<span class="number">8</span>JK7D-RJRJK</span><br></pre></td></tr></table></figure><p>来安装KMS密钥。注意以上命令中的KMS密钥只适用与Visio2016，其他版本可到<a href="https://docs.microsoft.com/zh-cn/DeployOffice/vlactivation/gvlks" target="_blank" rel="noopener">微软官方文档</a>中查询。</p><p>然后设置KMS服务器，博主用的是网上找的，以后尝试一下自己搭一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /sethst:xxx.xxx</span><br></pre></td></tr></table></figure><p>由于不保证可用性，服务器名称已略去。</p><p>指令Office立即连接KMS服务器进行激活：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /act</span><br></pre></td></tr></table></figure><p>完成！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://03k.org/kms.html" target="_blank" rel="noopener">https://03k.org/kms.htm</a></p><p><a href="https://segmentfault.com/a/1190000015697457" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015697457</a></p><p><a href="https://blog.csdn.net/ywd1992/article/details/79412991" target="_blank" rel="noopener">https://blog.csdn.net/ywd1992/article/details/79412991</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot; class=&quot;headerlink&quot; title=&quot;题记&quot;&gt;&lt;/a&gt;题记&lt;/h2&gt;&lt;p&gt;如果你懒的话当然可以用KMSpico等工具一键激活，但博主不想电脑里多个启动项，并且博主的电脑预装了Office2013家庭与学生版，用此类工具可能出现不可预知的后果，所以打算自己动手激活Visio。&lt;/p&gt;
    
    </summary>
    
    
      <category term="KMS" scheme="https://cjc7373.github.io/tags/KMS/"/>
    
      <category term="Office" scheme="https://cjc7373.github.io/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>Markdown简介</title>
    <link href="https://cjc7373.github.io/2018/11/08/All-about-Markdown/"/>
    <id>https://cjc7373.github.io/2018/11/08/All-about-Markdown/</id>
    <published>2018-11-08T20:16:56.000Z</published>
    <updated>2019-01-22T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown?"></a><strong>什么是 Markdown?</strong></h2><p>Markdown 是一种轻量级且易使用的标记语言，通过对标题、正文、加粗、链接等主要文本格式的预设编码，帮用户在写作中有效避免频繁的格式调整，获得更加流畅沉浸的写作体验。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="All-about-Markdown/Markdown-mark.svg.png" alt="哈哈哈" title>                </div>                <div class="image-caption">哈哈哈</div>            </figure><a id="more"></a><hr><h3 id="Markdown-VS-富文本"><a href="#Markdown-VS-富文本" class="headerlink" title="Markdown VS 富文本"></a>Markdown VS 富文本</h3><p>基于 Markdown 写作，是属于<strong>纯文本</strong>写作。「纯文本」写作和「富文本」写作是对立的，我们来区分一下：</p><h4 id="「富文本」写作"><a href="#「富文本」写作" class="headerlink" title="*「富文本」写作 *"></a>*<em>「富文本」写作 *</em></h4><p>你平时在<strong>Word</strong>上写作，就属于富文本写作。修改文字的大小、修改文字颜色、调整各种格式只需要点一下鼠标就行。富文本写作最大的特点是：<strong>所见即所得</strong>，你把格式调整成什么样子，就会直接显示出什么样的效果。</p><p>然而，富文本的格式排版过于繁杂，以致于你不得不花费大量时间在这上面，而忽略了写作本身。</p><p>同时，富文本存在着<strong>多平台转换不方便</strong>的问题，假如你在 Word 上写好了文档，格式也调好了，复制粘贴到其他写作平台的时候发现：<strong>格式全乱啦</strong>；即使是转发给其他人也可能因为 Word 版本的不同而导致显示的差别很大。（如果你有过去打印店打印文档的经历的话，相信体会很深吧）富文本一般需要使用专用软件打开（如Word）。</p><h4 id="「Markdown」写作"><a href="#「Markdown」写作" class="headerlink" title="「Markdown」写作"></a><strong>「Markdown」写作</strong></h4><p>基于 <strong>Markdown</strong> 写作，就是纯文本写作。它允许人们使用纯文本格式来编写文档。如果你想设置某段文字的格式，只需要使用一些简单的符号来代表即可。所以<strong>文字和格式都是纯文本</strong>。能够用普通的文本编辑器打开。</p><p>Markdown正好处在富文本的对立面，由于其简洁的特性，导致其格式只有寥寥几种，功能上也远不如富文本编辑器。</p><hr><p><strong>Markdown 的优点</strong></p><ul><li><p>纯文本所以<strong>兼容性</strong>极强，可以用所有文本编辑器打开</p></li><li><p>让你更<strong>专注于文字</strong>而不是排版</p></li><li><p>格式<strong>转换方便</strong>，Markdown 文本你可以轻松转换为 html、电子书等</p></li><li><p>Markdown 的标记语法有<strong>极好的可读性</strong></p></li></ul><hr><p><strong>Markdown的主要用途</strong></p><ul><li>博客（自建、简书、CSDN等等）</li><li>笔记，随笔等</li><li>Github</li></ul><h2 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h2><ul><li><strong>Typora</strong> Markdown也能所见即所得！</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>Markdown语法主要分为如下几大部分： <strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 \</strong>，<strong>行内引用</strong>。</p><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h4><p>使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="2-段落"><a href="#2-段落" class="headerlink" title="2. 段落"></a>2. 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="3-区块引用"><a href="#3-区块引用" class="headerlink" title="3. 区块引用"></a>3. 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用</p></blockquote><p>效果：</p><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-代码区块"><a href="#4-代码区块" class="headerlink" title="4. 代码区块"></a>4. 代码区块</h4><p>1）代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>int main()<br>{<br>printf(“Hello, Markdown.”);<br>}</p><p>代码区块：</p><pre><code>int main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。 </p><p>2）在代码区块的前后加上  ```</p><blockquote><p>```<br>hello,world<br>```</p></blockquote><p>效果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello，world</span><br></pre></td></tr></table></figure><h4 id="5-强调"><a href="#5-强调" class="headerlink" title="5. 强调"></a>5. 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>*<em>粗体*</em>，_<em>粗体_</em></p></blockquote><p>效果：</p><blockquote><p><em>斜体<em>，</em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="6-列表"><a href="#6-列表" class="headerlink" title="6. 列表"></a>6. 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+<em>） 第一项 -（+</em>） 第二项 - （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项</p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7. 分割线"></a>7. 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><blockquote><p>***</p></blockquote><p>效果：</p><blockquote><hr></blockquote><h4 id="8-链接"><a href="#8-链接" class="headerlink" title="8. 链接"></a>8. 链接</h4><p>使用 <strong>[]()</strong> 在[]内输入链接的名称，()内输入链接的地址。 </p><blockquote><p>[我的博客](<a href="https://cjc7373.github.io">https://cjc7373.github.io</a>)</p></blockquote><p>效果：</p><blockquote><p><a href="https://cjc7373.github.io">我的博客</a></p></blockquote><h4 id="9-图片"><a href="#9-图片" class="headerlink" title="9. 图片"></a>9. 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="10-反斜杠"><a href="#10-反斜杠" class="headerlink" title="10. 反斜杠\"></a>10. 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="11-行内引用"><a href="#11-行内引用" class="headerlink" title="11. 行内引用"></a>11. 行内引用</h4><p>在字符之间加上`，起到标记作用，相当于行内引用。如：</p><blockquote><p>`Too young`</p></blockquote><p>效果：</p><blockquote><p><code>Too young</code></p></blockquote><h2 id="拓展语法"><a href="#拓展语法" class="headerlink" title="拓展语法"></a>拓展语法</h2><h4 id="1-表格"><a href="#1-表格" class="headerlink" title="1.表格"></a>1.表格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| ------ | :------: | ------: |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><p><code>------</code>用作标题和内容的分隔符，<code>:</code>用来控制对齐方式，上述表格的效果如下：</p><table><thead><tr><th>一个普通标题</th><th align="center">一个普通标题</th><th align="right">一个普通标题</th></tr></thead><tbody><tr><td>短文本</td><td align="center">中等文本</td><td align="right">稍微长一点的文本</td></tr><tr><td>稍微长一点的文本</td><td align="center">短文本</td><td align="right">中等文本</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Markdown&quot;&gt;&lt;a href=&quot;#什么是-Markdown&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown?&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是 Markdown?&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级且易使用的标记语言，通过对标题、正文、加粗、链接等主要文本格式的预设编码，帮用户在写作中有效避免频繁的格式调整，获得更加流畅沉浸的写作体验。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;All-about-Markdown/Markdown-mark.svg.png&quot; alt=&quot;哈哈哈&quot; title&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;哈哈哈&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://cjc7373.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Windows10字体崩溃修复</title>
    <link href="https://cjc7373.github.io/2018/11/02/Windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/"/>
    <id>https://cjc7373.github.io/2018/11/02/Windows10字体崩溃修复/</id>
    <published>2018-11-02T18:23:47.000Z</published>
    <updated>2019-02-13T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这就是乱改字体的后果..</p></blockquote><p>字体修复，不只是字体修复。</p><a id="more"></a><h2 id="事由"><a href="#事由" class="headerlink" title="事由"></a>事由</h2><p>偶然间看到一篇<a href="http://www.dgtle.com/article-25875-1.html" target="_blank" rel="noopener">替换Win10字体来提升字体观感的文章</a>，加上一直听说Win10的字体渲染很垃圾，于是就按照文中的步骤，把默认的微软雅黑字体替换成了苹果的苹方字体。</p><p>然而，使用了一段时间后发现，所有的字体似乎都小了一圈，而且在cmd中出现了字体大小错乱的情况。网上找了一圈发现Win10砍掉了调整字体大小的功能，现在只能以整体缩放来调整字体大小。新的字体感觉也没有想象中的那么好。</p><p>于是我把备份的默认字体又恢复了回去，按道理不会出事，然而我的电脑出锅了。一些软件的中文字体成了方框，cmd的字体也变得很奇怪。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>一番操作之后，发现设置里的新宋体是乱码，感觉可能是字体文件崩了。</p><p><img src="Windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/1541154864085.png" alt="1541154864085"></p><p>但是<code>simsunb.ttf</code>这个文件我分明备份过。。</p><p>没办法，继续面向Google解决问题，这时候找到了一个<a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-ime/%E5%9C%A8windows/d575f11c-1f2e-454c-9fcd-432809f7fd76" target="_blank" rel="noopener">微软社区页面</a>，里面给出了三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DISM.exe /Online /Cleanup-image /Scanhealth</span><br><span class="line">DISM.exe /Online /Cleanup-image /Restorehealth</span><br><span class="line">sfc /scannow</span><br></pre></td></tr></table></figure><p>根据<a href="https://support.microsoft.com/zh-cn/help/947821/fix-windows-update-errors-by-using-the-dism-or-system-update-readiness" target="_blank" rel="noopener">微软官方支持页面</a>的描述，这三个命令是检查系统文件的完整性并自动通过 Windows 更新来修复。</p><p>用管理员身份打开cmd，依次执行完重启，一切都恢复了原状。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>看了一些<a href="https://www.zhihu.com/question/274344133" target="_blank" rel="noopener">知乎回答</a>，感觉Win10的字体也并没有那么糟糕。事实上我一直以来用着默认的字体也没有感到不舒服。<del>可能是我眼瞎吧。</del></p><p>另外，上述的三个命令理论上能解决Windows的许多问题，碰到问题可以尝试。</p><h4 id="2019-2-13-更新"><a href="#2019-2-13-更新" class="headerlink" title="2019/2/13 更新"></a>2019/2/13 更新</h4><p>目前家里入了 4K 显示器，200% 缩放，观感上没有任何问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这就是乱改字体的后果..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;字体修复，不只是字体修复。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://cjc7373.github.io/categories/Windows/"/>
    
    
      <category term="Fonts" scheme="https://cjc7373.github.io/tags/Fonts/"/>
    
      <category term="Windows" scheme="https://cjc7373.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>我为什么选择了独立博客</title>
    <link href="https://cjc7373.github.io/2018/10/13/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>https://cjc7373.github.io/2018/10/13/我为什么选择了独立博客/</id>
    <published>2018-10-13T20:13:11.000Z</published>
    <updated>2019-04-21T20:13:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个独立博客式微的时代。</p><p>独立博客没有博客平台的推荐导流系统，相比之下观之者寥寥。</p><p>那我为什么还是选择了独立博客呢？</p><ul><li>自由，不会受外部因素的影响，可以随意添加自己想要的功能。</li><li>方便，一行命令就能更新博客。</li><li>可控，完全受自己管理。</li></ul><p>在这纷纭复杂的互联网中，拥有自己的一方小天地，似乎也是极好的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一个独立博客式微的时代。&lt;/p&gt;
&lt;p&gt;独立博客没有博客平台的推荐导流系统，相比之下观之者寥寥。&lt;/p&gt;
&lt;p&gt;那我为什么还是选择了独立博客呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自由，不会受外部因素的影响，可以随意添加自己想要的功能。&lt;/li&gt;
&lt;li&gt;方便，一行命令就能更新
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建小记</title>
    <link href="https://cjc7373.github.io/2018/10/13/Hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/"/>
    <id>https://cjc7373.github.io/2018/10/13/Hexo搭建小记/</id>
    <published>2018-10-13T20:10:18.000Z</published>
    <updated>2019-04-21T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>身为一个懒人，又不会写网页，也只能用用博客生成器了。</p></blockquote><a id="more"></a><h2 id="为什么选择Hexo"><a href="#为什么选择Hexo" class="headerlink" title="为什么选择Hexo"></a>为什么选择Hexo</h2><p>其实也没啥特别的理由。一开始想把博客搭在自己的服务器上，然而感觉维护太麻烦了，正好觉得Github Pages很不错，就决定用了。Github Pages只支持静态页面，WordPress之类的就不能用了，于是<del>随手找了几个静态博客生成器，</del> 随手一查就找到了Hexo。</p><h2 id="Hexo搭建过程"><a href="#Hexo搭建过程" class="headerlink" title="Hexo搭建过程"></a>Hexo搭建过程</h2><p>Hexo的官方文档有中文，这点很赞。虽然官方文档讲的不是很清楚..然而搭建还是比较简单的，加上Google了几篇教程，很快就把Hexo搭起来了。</p><p>身为一个博客生成器，当然不能让我们接触到代码了。所以Hexo的基本配置均在<code>_config.yml</code>这个配置文件中。配置采用YAML语法，看看官方文档也就差不多了解了。基本上无需过多配置就搭建完成了。</p><h2 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h2><p>Hexo有许多主题，个人采用了官方推荐的 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT.Pisces</a>主题，整体风格还是比较简洁的（然而用这个主题的实在是太多了…随便一个Hexo博客就是Next主题）。</p><p>同时主题内已集成了许多第三方服务，如Google Analysis、DISQUS等，只要改改配置文件就能配置完成，还是相当简单的。</p><h2 id="Hexo图片插入指引"><a href="#Hexo图片插入指引" class="headerlink" title="Hexo图片插入指引"></a>Hexo图片插入指引</h2><p>直接用Markdown语法引用图片会导致图片在首页无法显示，官网给出了一个解决方案，就是利用内置的插件，形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br></pre></td></tr></table></figure><p>然而这个方法会破环原生Markdown语法，对编辑者的预览等造成不便。</p><p>很奇怪官方为什么要采用这种方法。</p><p>更好的解决方案是安装<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener"><strong>hexo-asset-image</strong></a>这个插件。进入博客目录，使用如下命令安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装完成后，即可使用原生Markdown语法插入图片。</p><h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><h5 id="已实现功能"><a href="#已实现功能" class="headerlink" title="已实现功能"></a>已实现功能</h5><ul><li>评论，采用DISQUS</li><li>数据统计，采用Google Analytics</li><li>图片显示在首页</li><li>搜索引擎收录，Google Search Console</li><li>首页文章不显示全部</li><li>git配置，<code>hexo g -d</code>一条命令部署</li><li><a href="use-ci-auto-deploy-blog.md">使用Travis CI自动生成及部署</a> </li></ul><h5 id="待实现功能"><a href="#待实现功能" class="headerlink" title="待实现功能"></a>待实现功能</h5><ul><li>更多的自定义操作</li><li>文章访问量统计</li><li>在自己的服务器也部署博客，然后用 CI 实现自动部署</li><li>使用 CDN 加速 Github Pages 的访问</li><li>评论点击加载</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">hexo中完美插入本地图片</a></p><p><a href="https://gaodaxiu0406.github.io/2017/08/21/%E4%B8%BAHEXO%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%AF%8F%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E9%87%8F%E7%BB%9F%E8%AE%A1/" target="_blank" rel="noopener">为HEXO博客中每篇文章的浏览量统计</a></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a></p><p><a href="http://moweide.com/2017/08/27/hexo_next_started/" target="_blank" rel="noopener">theme-next!Hexo网站的一次华丽升级</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;身为一个懒人，又不会写网页，也只能用用博客生成器了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://cjc7373.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello,World!</title>
    <link href="https://cjc7373.github.io/2018/09/24/Hello-World-0/"/>
    <id>https://cjc7373.github.io/2018/09/24/Hello-World-0/</id>
    <published>2018-09-24T11:28:47.000Z</published>
    <updated>2018-10-14T20:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello,World!"></a>Hello,World!</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="Hello-World-0/hello.jpeg" alt="Hello,World" title>                </div>                <div class="image-caption">Hello,World</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello,World!&quot;&gt;&lt;/a&gt;Hello,World!&lt;/h3&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
     
      
    
    </summary>
    
    
      <category term="test" scheme="https://cjc7373.github.io/tags/test/"/>
    
  </entry>
  
</feed>
