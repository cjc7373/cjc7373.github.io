[{"title":"软通实习","date":"2019-07-17T15:12:51.000Z","path":"2019/07/17/isoftstone-practice/","text":"序二年级下学期期末，有一个两周的实习，学校给了我们三个选项，其中软通算是知名度最高的一家公司了。 “isoftstone”的图片搜索结果 然而网上这家公司的风评很差，不过其他两家似乎更差，于是我们班大概四分之三的人都来了软通。 经历实习第一天，上午讲的开发流程，团队角色，每日例行项目好似我们已经接手了一个实际项目，然而到了下午瞬间变成培训班，开始教我们配置环境。看下发的文档是用 Java Spring Boot 框架来开发。第二天又开始复习 Java。然后到了第三天，负责我们的老师（就叫他项目经理好了）突然说，你们想用什么技术就用什么技术吧。终于不用写 Java 了（逃 我们大概使用的是 Scrum 敏捷开发方法，最有特色的一点大概就是每日站会了。还有 Story 列表其实也挺不错的，只是没有贴在公告板上感觉失去了灵魂。 可能是时间短的原因，从一开始需求包括 Story 列表就已经确定了，我认为如果只是说做一个什么系统而不说具体需求会让大家的产品更有差异化，亮点也会更多。 技术栈由于我很倾向 Python，加上青岛大学的开源 OJ 采用的就是 Django+Vue 前后端分离的开发模式，于是我便也想采用这个模式。 最终我们决定采用前后端完全分离，前后端之间使用 HTTP 协议通信。前端采用：HTML+CSS+JavaScript（JQuery+AJAX），后端采用：Django，数据库采用：PostgreSQL 版本管理我有一些 Git 的知识，然而软通提供的版本管理工具是 SVN。用了一段时间后发现，两个工具没有本质的区别，最大的大概是 SVN 需要中心服务器，权限控制似乎也比较强大，所以像在公司内部比较好用，而 Git 分布式，分支创建极为方便，在开源社区中被广泛使用。 1563352303687 然而我们甚至没有用到分支这个功能，总体上还是没有利用好版本管理。 前端：三剑客zpc 第一天就不知道在哪找了个模板网站，然后冲了十块钱下了个模板。接下来就开始改改改。 调试一个问题是，后端的代码如何给前端调试。我们选择： 后端首先使用 Django 的本地服务器，用 Postman 进行测试，测试通过后上传代码。 不定期部署至服务器上 前端从服务器调用接口调试 然而，在其他组答辩的时候，我们才知道有个东西叫 mock，能够简化调试难度。 后端：Django很早就听说了 Python Web 一些有名的框架，后来又知道了青岛大学的开源 OJ 后端使用的就是 Django，所以很想尝试一下。曾经看过几节慕课，也看了一些官方文档（一开始是真的看不懂）。在做微信小程序的时候，我就想用 Django，奈何技术不够，放弃了。 实习前，我去找 zjb 两小时速成了一下 Django，发现 Django 虽然是 MTV（Model——Template——View）三级结构，但是前后端分离的话就没有模板了，同时我们用了 REST Framework，在函数名中直接声明要调用的方法，大大简化了开发。REST Framework 也提供了官方中文文档，不过感觉写得不是很好。 后端代码非常简单，我们先用token = request.COOKIES.get(&quot;token&quot;)获取token，查询user = User.objects.get(userToken=token)，若 token 无效则会抛出User.DoesNotExist错误，查询操作之后调用一个序列化方法users = serializers.serialize(&quot;json&quot;, allMessage, fields=(&quot;userID&quot;))，但是如果直接这样返回会有问题，所以需要把它转化成字典类型rtn[&#39;data&#39;]=json.loads(users)，然后调用JsonResponse返回。 Django 查询数据库返回的是一个 QuerySet 对象，我们能对它进行很多操作，但是其实我们都没用到.. Cookies我一开始以为 Cookies 是前端负责维护的，后来发现这只是浏览器的工作。所以实际上 Cookies 是后端维护的。在登陆时设置 Cookie，调用 API 时获取 Cookie，退出时删除 Cookie 即可。 测试我们用了 Postman 模拟 HTTP 请求进行测试，很可惜的是没有用到 Django 的自动化测试。 几个坑Django 的文档宣称： 会自动重新加载的服务器 runserver 用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。所以你不需要为了让修改的代码生效而频繁的重新启动服务器。然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。 然而有时候重新载入并不会生效（可能是 PyCharm 的问题？），这种时候就很烦.. 数据库中的DateTimeField字段存储的时间总是 UTC 时间，在settings.py中设置： 12TIME_ZONE = &apos;Asia/Shanghai&apos;USE_TZ = False 这样返回的时间是正常的，虽然数据库里的时间还是 UTC 时间，不过不影响了。 数据库：PostgreSQL据说 PostgreSQL 和 MySQL 的区别是.. 1563367521827 1563367537890 虽说 Django 官方支持 PostgreSQL，而且我们的数据库部署在服务器上，但是本地还是要一个中间件psycopg2，在 Windows 下安装无问题，在 Linux 下需要一个额外的包 libpq-dev，而在 Mac 下需要先安装 PostgreSQL。这也是一个坑点。 图形化管理界面方面，我使用了 pgadmin，一开始我以为这是个客户端，还奇怪为什么它提供 Docker 镜像，下完才发现它是网页端。果断卸载然后 docker pull.. 数据库由于我们的设计问题，改了一万次。 1563368286617 七次其实还是我们重置过一次数据库的结果，真实改动可能有十一二次吧。虽然 Django 提供了方便的 migrate 功能，但是这功能锅很多，能不改还是尽量不改。 在自己设置主键然后又取消使用自动主键时，Django 会报没有默认值的错。？？？AutoField 你要什么默认值。网上也有同样的情况，应该是 Django 的 Bug。 在改某张表的时候一直碰到报错一个不存在的列不存在，这张表就似乎坏了。我们的解决方案是重建一张新的表2333 接口文档我们的接口文档直接写在 Story 列表后面。主要写明了接口地址，方法（GET，POST，PUT，DELETE，我是想 RESTful 的，可是其他人基本随缘了），请求字段，响应字段，以及相应的解释和示例。 跨域前端调试接口的时候产生了跨域的问题。Cookie，Ajax 请求都会遭到浏览器同源策略的限制。临时的解决方案是，在 Django 上装一个插件 django-cors-headers，并且修改settings.py，在INSTALLED_APPS中加入corsheaders，在MIDDLEWARE中加入corsheaders.middleware.CorsMiddleware（位置尽量靠前），并设置字段： 12CORS_ORIGIN_ALLOW_ALL = TrueCORS_ALLOW_CREDENTIALS = True 而在前端每个 Ajax 请求中加上： 1563353270812 而在生产环境中由于同源，所以不存在跨域的问题。 然而，一个新的问题是，本地浏览器并不能够成功地存储 Cookie，当时的解决办法是，每改动一个页面就部署至服务器上进行调试，然而这个方法效率极低。后来我发现其实这只是 Chrome 浏览器的问题，其他浏览器则没有这个问题。 部署在开发中，采取的方案是前端静态网页由 Nginx 部署，而后端 Django 代码则使用 Django 自带的服务器部署，而显然，这绝不能用于生产环境。 DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. （不过我还是用了，甚至都没关 DEBUG 选项） 因为 Django 服务器使用 python3 manage.py runserver运行的， SSH 断开后进程就被中断了，所以需要让它能够后台运行，尝试了 nohup，子 shell 等方法后（都不好用），最终选择了 screen。主要命令有： 1234screen -S [NAME] 创建一个新 shellscreen -ls 查看后台 shellscreen -r [ID] 进入某个 shellCtrl+A,D 把当前 shell 切换至后台 Nginx 配置我就直接改默认配置了，路径在/etc/nginx/sites-enabled/default下。除了静态页面外，还需配置后端请求转发： 123456location /api &#123; proxy_pass http://127.0.0.1:8000; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; client_max_body_size 200M; &#125; （这个配置我是抄青岛大学 OJ 的） HTTPS尝试把域名解析至阿里云的服务器，发现不管是 HTTP 还是 HTTPS 请求都会被拦截，并被劫持到一个备案页面。 1563512996274 于是换用 GCP，一切顺利。使用 Let’s Encrypt 的证书以及官方推荐的 certbot 工具。简单几步即可签发证书并自动配置 Nginx。 参考资料前后端分离的django项目服务器跨域 CORS 跨域发送 Cookie 使用uWSGI和nginx来设置Django和你的web服务器 django web Cookie 和 Sessions 应用 从零开始建立单元测试-以Django项目为例 查询操作 Django 模型 django DateTimeField 时区问题解决","tags":[{"name":"Python","slug":"Python","permalink":"https://cjc7373.github.io/tags/Python/"},{"name":"Nginx","slug":"Nginx","permalink":"https://cjc7373.github.io/tags/Nginx/"}]},{"title":"使用 Travis CI 自动部署 Hexo 博客","date":"2019-04-21T20:16:56.000Z","path":"2019/04/21/use-ci-auto-deploy-blog/","text":"bg2017121901 缘由其实我想用 CI 来自动化部署博客很久了，只是因为懒，CI 又有很多新知识，担心自己的知识储备不够，于是一直咕咕咕。 前段时间装了 Arch 之后，我很想在两个系统之间同步写作进度，但是 Windows 的休眠和快速启动会导致在 Arch 下我只能以只读方式挂载 Windows 分区（我日常关机用休眠，所以拒绝关休眠）。原来设想的ln -s大法行不通了。 于是我想到了 CI。仔细一想其实也不复杂，无非是git push， git pull两下罢了。那么，Let’s do it! 需求我原来设想是博客同时部署在 Github Pages 和我的 VPS 上，而由于某些不可抗力（懒）后者并没有实现。所以需求就变得十分简单，commit 博客内容，CI 自动构建然后部署。 我更新博客之后，commit 然后 push 至 Github repo CI 自动构建博客 CI 将构建完成的静态文件 push 至 Github repo 我原先使用的是hexo-deployer-git插件，通过hexo g -d部署，现在这个插件可以丢弃了。同时我的 Hexo 的很多配置都被我瞎改了，同时还有许多奇奇怪怪的模块可能需要清理（不如重新来一遍（大雾）），这些先不谈。 配置 Github Repo在这个 Repo 中需要两个分支： master 用于存放构建完成的静态文件 source 用于存放 Hexo 生成的博客源文件 对 Hexo 文件夹的操作如下： 123456git initgit remote add origin git@github.com:cjc7373/cjc7373.github.io.gitgit checkout -b sourcegit add .git commit -m &quot;To use CI to automated deploy&quot;git push origin source:source 本来以为这个仓库会很大（整个文件夹大概 100M），突然发现它自带.gitignore文件，所以实际大小并没有多少。 1555835090941 然后在 Github 上将主分支切换为source分支。 配置 Travis CICI 访问仓库需要权限，可选择 Access Token 或者单独的 Deploy key，后者似乎有些麻烦，我选择了前者。当前需求应该只需要 repo 权限，然后在 Travis CI 的 Environment Variables 中加入这个 Token，注意不要勾选 Display value in build log。 然后就是编写.travis.yml了。 正当我准备抄大佬们的配置的时候，忽然看到 Travis CI 官方提供了轮子，那就用吧QAQ（其实也没简单多少），然后翻车了。 1555837683039 看了下文档，我也没搞懂每个字段的意思。所以还是自己来吧。 为了在 commit 记录中显示更新日期，我把 push 部分单独写成了 sh脚本。 .travis.yml: 1234567891011121314151617181920212223language: node_jsnode_js: stable# 只监听 source 分支的改动branches: only: - source# 缓存依赖，节省持续集成时间cache: directories: - node_modulesinstall: - npm installscript: - hexo clean - hexo gafter_script: - chmod +x ./deploy.sh # 添加可执行权限 - ./deploy.sh deploy.sh: 12345678910111213141516171819#!/bin/bashset -evexport TZ=&apos;Asia/Shanghai&apos;git config --global user.name &quot;cjc7373&quot;git config --global user.email &quot;niuchangcun@163.com&quot;# 获取以前的 commit 记录git clone -b master https://github.com/cjc7373/cjc7373.github.io.git .deploy# 这么移动是为了确保不受之前文件的影响mv .deploy/.git/ public/cd publicgit checkout mastergit add .git commit -m &quot;Site updated: `date +&quot;%Y-%m-%d %H:%M:%S&quot;`&quot;# 我也不知道 token 怎么用。。抄大佬的代码git push &quot;https://$&#123;token&#125;@github.com/cjc7373/cjc7373.github.io.git&quot; master:master --quiet 一开始忘了给deploy.sh可执行权限，CI 啥都没报错就退出了。。后来 token 又忘了写。。反正出了好多锅。。 1555840082905 （看着都是成功其实都是失败。。） 同时本地配合一下批处理，真正一键发布（滑稽 12345cd C:\\Users\\niuch\\Documents\\GitHub\\blog\\git add .git commitgit pushpause 后记历经两个多小时，终于把 CI 弄好了。虽然对 CI 还是一知半解，不过总算开了个头，也基本实现了需求。 Travis CI 官方的文档很全，但是以我的英文水平看得很吃力（懒得看），中文资料的质量又参差不齐。所以还是要锻炼自己的英语水平啊。 参考资料https://docs.travis-ci.com https://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/ https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://cjc7373.github.io/tags/Hexo/"},{"name":"CI","slug":"CI","permalink":"https://cjc7373.github.io/tags/CI/"}]},{"title":"Arch Linux 安装&配置全过程","date":"2019-03-24T20:12:51.000Z","path":"2019/03/24/Arch-Linux-Install/","text":"前言以前我也装过双系统，很遗憾，可能是知识水平不够的缘故，也有笔记本坑爹的原因，装过 Ubuntu，Manjaro，Deepin，Fedora 等众多发行版，要么启动时候卡死，要么根本无法引导，于是作罢。如今开始学习 Linux，便有了重拾双系统的念头。 这篇博客将记录 Arch 安装与配置全过程。最终目标是 Arch 能成为我的主力系统替代 Windows。 1554536417517 下面列出笔记本的配置，以供参考。 部件 型号 CPU Intel i5-7300HQ 内存 16G 硬盘 128G NVME SSD + 1T 机械 显卡 GeForce GTX 1050 Ti + Intel HD Graphics 630 无线网卡 Reltek RTL8822BE 触摸板 Synaptics 为什么选择 Arch滚动更新天下第一！（误 听说社区非常友好（然而我还没感受到 基本安装安装参考了 以官方Wiki的方式安装ArchLinux 和 官方Wiki的 Installation Guide。在未安装图形界面前，基本一切顺利。 题外话：说起无线网卡，之前装 Ubuntu 的时候，没有驱动，需要手动安装。不过内核从 4.x 某个版本之后，加入了对我这个网卡的驱动，现在无需配置即可使用了。 由于固态的空间不足，故没有分配交换文件（感觉也用不掉 16G 内存）。 在配置sudo时，使用visudo命令编辑配置文件，然而这个 vi编辑器有毒，许多操作都无法执行，感觉是个 bug。（Update：原来 vi 和 vim 是有挺大的区别的…） 图形界面众所周知，Linux社区似乎对于 Nvidia+Intel 双显卡不怎么友好，在我安装过的数个发行版中（包括 Ubuntu, Debian, Manjaro, Deepin），基本都出现了启动黑屏/在Logo处冻结的情况，本次安装 Arch Linux，同样遇到了此问题。 由于我准备使用双系统，所以并不准备安装 Nvidia 驱动，仅安装了 Intel 的显卡驱动。 在装完 Xorg，KDE，sddm 之后，我尝试启动图形界面，成功卡在了 KDE 加载的地方。在随后的尝试中，我发现连 screenfetch, lspci 这样的命令都会导致系统/虚拟控制台（tty）无响应。一开始觉得是内核的问题，因为 Arch 默认安装了 5.0 内核，遂降级至 4.20，问题依旧。 搜索发现问题可能与N卡的开源驱动 Nouveau有关，（我寻思我也没装nouveau啊），于是创建 /etc/modprobe.d/blacklist.conf，并在文件中写入blacklist nouveau，执行 update-initramfs -u（大概是更新内核配置？）。顺便安装bbswitch把N卡给禁了，具体配置按照这篇文章。 重启问题解决，于是又把内核升到 5.0.2，重启卡在命令行界面（甚至没有见到 sddm）。于是进 live cd，回滚 4.20，重启问题解决。 话说以后可以试试 Wayland？ 问题解决发现开机时有一行报错，Failed to load Linux Kernel Modules，用systemctl status systemd-modules-load.service查看发现是bbswitch加载失败了。所有东西似乎有着千丝万缕的联系… 对比发现 5.x 内核启动时并没有报错，于是删除 bbswtich，再升级 5.0 内核，成功启动sddm，问题解决（终于可以愉快地滚系统啦）。 1554535852814 原因可能是 bbswitch 配置不当，具体原因不明。此时开始仍然会报Failed to load Linux Kernel Modules，需要手动将/etc/modprobe.d/bbswitch.conf及/etc/modprobe.d/中某个文件中（我忘了）的bbswitch删除。 必要软件 Arch Linux CN 源，包含了许多 AUR 中的软件。第一次加入源的时候不知道要安装 keyring，导致安装包时卡在了 GPG 签名校验那一步。我还寻思为什么 Arch 的签名老出锅。。（BTW：为什么需要 keyring？） Shadowsocks，装完命令行版的 Shadowsocks，根据 Wiki 描述，应用 ss-local启动，然而commend not found，未能解决，于是又装了 Shadowsocks-qt5。 Chrome，ArchCN 源中有（话说什么时候试试 Chromium）。 Chrome 不支持硬件加速，现已更换 Chromium。同步等功能一切正常。 字体，不安装中文字体许多中文字是框框（然而为什么不是所有呢），我选择了wqy-microhei，然而系统自带的英文字体也很丑。按照官方Wiki把Windows中的字体复制了过来，然而发现英文字体的间距变得非常小。中文字体看着挺舒服（应该是雅黑？）。 中文输入法，装了谷歌拼音发现打出来的字是繁体，还找不到相关选项（Update：把简繁转换关了就好了）。现在在用 Rime。 印象笔记，在 Linux 有开源的客户端 Tusk。然而 Tusk 不支持 Markdown…. Tim/QQ，ArchCN 源包含。本质上是魔改过配置的 Wine 容器。 省电在用 Linux 之前，我一直认为 Linux 会比 Windows 更加省电，没想到刚好相反。所以为了省电，我不得不做许多额外的配置。 首先，耗电的大头还是在 CPU，我们请出cpupower，启用powersave调度，风扇安静了，掉电也少了不少。 除了 CPU，其他部件也耗电呐。好在有个包能够统一地管理电源消耗，那就是laptop-mode-tools，然而这玩意似乎用处不大。。 折腾瞎改配置Linux Mode Setting 可以提前启动？虽然不知道有什么用。 编辑/etc/mkinitcpio.conf，修改MODULES一行，改为MODULES=(i915)（Intel 显卡）。 目前遇到的问题 为什么任务栏有两个音量图标？（一个是 Audio Volume，一个是 KMix，然而这不都是 KDE 自带的么..） 触摸板无法使用手势 还是想禁用独显，参考资料https://xuchen.wang/archives/archbbswitch.html Tim 字体发虚，官方仓库似乎给出了解决方案。 风扇调度误我，只要CPU占用率高个那么几秒，风扇就像起飞了一样 Typora 打开时不能恢复上次打开的文件夹 实用技巧 显示桌面：在 Panel Option 中添加 Show Desktop 小工具，然后设置快捷键为 Win+D。 Clipboard 能够生成二维码。（方便多设备发送网址什么的？然而我有 Chrome 同步了..） 开机时打开 Num Lock：根据 Wiki，KDE 自带了这个选项，在Hardware/Input Devices/Keyboard中。不过我转念一想，不是先启动sddm么？试了一下果然在sddm界面小键盘是关着的。于是在/etc/sddm.conf加入 12[General]Numlock=on pacman 能够在升级前对比版本信息，对于我这种强迫症非常有用。 修改 /etc/fstab，加入以下内容，使得开机时能够自动以只读模式挂载 Windows 分区。 日志相关。由于systemd这个神奇的存在，似乎所有日志都可以通过systemd带的journalctl查看。 * 查看启动时`tty1`的滚过去的那一大堆日志：`journalctl /usr/lib/systemd/systemd -b` * 查看加载失败的 unit：`systemctl --failed` * 查看某个 unit 的日志：`journalctl -u nginx.service --since today` （另外`systemctl status`也能显示最新的大概十行日志） 增强 Bash 的自动补全：pacman -S bash-completion，重启终端即可。 Trouble Shooting 今天打开tusk发现闪退。。用终端运行报tusk: error while loading shared libraries: libnode.so: cannot open shared object file: No such file or directory，我干什么了我？我啥都没干啊。。重新安装未解决问题。重启同样未解决。 于是 Google，StackOverflow 上有一个帖子建议我先找找有没有这个库。 发现是有的，ls 看下。 然而链接到了另一个文件，一看，果然那个文件没了。。（推测和包更新了有关？）但是 Typora 有这个库呀，于是尝试链接到 Typora 带的那个库，然后问题解决了。。。我被我这波操作惊呆了。 觉得字体不好看，然后似乎改崩了…目前把 Windows 的字体扔了，重新安装的字体列表有： wqy-zenhei wqy-microhei adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts 然后把终端的字体改成了 Consolas（AUR），感觉还是这个字体好看，不过中文字体好像变丑了。。 尝试安装 Tim。 ？？？说好的自动解决依赖关系呢？ 直接构建发现会报一堆依赖的错，查看 Github 项目发现： deepin-wine-tim依赖Multilib仓库中的wine，wine_gecko和wine-mono，Archlinux默认没有开启Multilib仓库，需要编辑/etc/pacman.conf，取消对应行前面的注释(Archlinux wiki) 懂了，我以后一定先 RTFM（ Windows 分区在 Windows 启用了快速启动或者处于休眠状态时只能以只读方式挂载。什么傻吊设计。（因为我想把博客文件夹 ln 到 Arch 下，使得双系统能够同步写作） 解决方案：使用 Travis CI 自动部署 Hexo。 输入法在终端和 Telegram，Kate 下（以及更多）不能使用。 根据某大佬的博客： 安装完输入法，你需要把输入法添加到环境变量里才能让他生效。我目前的配置是在 ~/.xprofile这个文件里加上下面几行： 1234&gt; export GTK_IM_MODULE=fcitx&gt; export QT_IM_MODULE=fcitx&gt; export XMODIFIERS=@im=fcitx&gt; ​ 成功解决。 改完fstab之后，开机发现闪过一行[FAILED]，查看日志发现sys-fs-fuse-connections.mount这个服务（mount）失败了。日志为： May 02 14:19:10 Coherence systemd[1]: Condition check resulted in FUSE Control File System being skipped.May 02 14:19:11 Coherence systemd[1]: sys-fs-fuse-connections.mount: Start request repeated too quickly.May 02 14:19:11 Coherence systemd[1]: sys-fs-fuse-connections.mount: Failed with result ‘start-limit-hit’.May 02 14:19:11 Coherence systemd[1]: Failed to mount FUSE Control File System. Google 了下，没找到原因，尝试 restart，成功了。 active (mounted) 有待进一步观察。。（未复现 TO DO zsh ssh相关帐号导入arch 可以尝试一下用命令行版替代 ss-qt5 吐槽 在 Linux 下，什么东西装好不用折腾就能用我反而觉得不正常… 附一段不太恰当的比喻： Windows 是人妻，啥都有，啥都会，啥都包玩的舒服，就是经常还往家里带一些你不想要的MacOS 是女朋友，带出去在人前倍有feel，但是只能按照她的规则玩不然一脚踹下床Linux 是小萝莉，懵懂无知，你怎么调教就怎么跟你玩，但是调教过猛经常会把腰闪了，萝莉也玩坏了。。。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://cjc7373.github.io/tags/Linux/"}]},{"title":"中国电信 HG2543C1 光猫获取超级管理员密码","date":"2019-02-16T16:32:47.000Z","path":"2019/02/16/fiber-modem-crack/","text":"寒假回家，欣闻家中宽带升级成了 200M，然而坑爹的是一直以来的桥接模式被改成路由模式。由于想公网访问本地的 NAS，且想看看 IPV6 是否已在我家区域部署，所以想破解光猫获取管理员密码。 Google 该设备的型号，发现网上并没有相关的教程，可能是型号比较新的缘故。致电中国电信，被告知无法透露管理员密码，派人上门调试则需额外花费。本着自己折腾的原则，遂在某宝购入 CH340G USB转TTL板，准备拆机 TTL 破解光猫。 0x01 拆机拆机后发现 PCB 板上有 TTL 插针，用万用表测得倒数第二根为 GND（接地pin），然后剩余四根随机组合，测得 RX（接收数据pin）和 TX（发送数据pin）。用杜邦线连接 USB转TTL板和 TTL 插针。 IMG_20190219_113847 0x02 串口调试电脑安装好 USB转TTL板的驱动，USB端连接上电脑。网上的教程一般使用 SecureCRT， 然而我后来发现 Xshell 也能连接串口，遂用 Xshell 进行调试。 1550548463370 如图设置参数，port 按照自己的情况设置。 然后连接。接通电源后等待。大概等待两分钟后，按回车，出现 Login: 字样，用 root/hg2x0 登陆。 用 cat /proc/cpuinfo 看一下 CPU 信息，居然是 MIPS… 1550306022384 超级密码在/flash/cfg/agentconf/factory.conf文件中。文件前两行即为管理员账户和密码。至此，光猫破解完成。 0x03 参考资料如何通过TTL调试光猫破解电信光猫","tags":[]},{"title":"2018年终总结&2019展望","date":"2019-02-11T19:00:00.000Z","path":"2019/02/11/2018Summary_2019Plan/","text":"今天是己亥猪年的大年初七，很惭愧到今天我才想起寒假前就想写的年终总结还没有写。 2018 总结时间及事件依据：印象笔记、Google 相册、我的记忆。 事件大致以时间顺序排列。 一月初，经历了在西安的第一场雪。 （时间未知）使用了 Windows 运行来快速启动程序，（感觉上）大大提高了效率（不（感觉装逼才是真的 1549962279010 从 1.13 开始寒假训练， 3.24 校赛，3.31 天梯赛，5.17 左右 ACM省赛，7.19 开始暑假多校训练，10.26 徐州区域赛， 11.23 深圳 CCPC 总决赛，整个一年我算是比较积极地参与 ACM-ICPC 竞赛（虽然下半年逐渐开始划水 1550032126921 （六张照片依次为 CCPC、寒假训练、省赛、校赛、天梯赛、徐州区域赛） 一月末，开始种草轻薄本，并寻求把游戏本卖了，未果。 从年初开始，用空闲资金进行投资，并开始学习相关知识。一月末我第一次买入了一个基金，入坑。一开始赚了点钱很高兴，后来贸易战开始就亏了。七月初买了一本金融方面的书然而并没有看多少。八月开始跟投某大V的投资计划，九月末把主要账户转移到且慢。回想起一开始什么都不懂就冲着某个行业买基金，现在慢慢有些了解但知识仍然很浅薄。时刻要提醒自己：不要盲从。 1550032359691 定下（并践行）了在美（英）剧中学英语的目标，然后每当我看剧时总是自我安慰同时我也在学习（并没有）。 到目前为止看过的剧有（不限于18年）：Friends，Sherlock，Black Mirror 一季， The IT Crowd 两季，Monday Mornings，Greys Anatomy 一季， Person of Interest 三季，Modern Family 半季多 从3月份开始，我开始撸 DigitalOcean 的 Github 学生优惠，到现在为止服务器运维的相关知识增长地挺快…应该是从大学开始吧，我开始用VPS自建SS，一开始是 Cloudcone 还是 Vultr 后来撸到了 DO，再后来19年年初的时候知道了一个超便宜的深港专线，后来又撸了阿里云的学生机。 四月中旬看了死亡诗社，Seize the day 成了我的座右铭，虽然我一直没有做到这一点。 整个一年我总有一种感觉，学习不在状态，有时候一直陷入一种昏昏沉沉的状态，那种状态下，犯困，没有学习的心思，干其他事也提不起兴趣。仿佛就在虚度光阴。从那个寒假开始我就（似乎）养成了不良的生活习惯。 四五月份入了创新IE3P 和 iPad 2018，拔草成功，却没有对我的学习质量有多大的改善。后来又开始种草蓝牙降噪耳机… 六月末，转专业考试。一年中最重要的一件事，从环境科学与工程转到了软件工程专业，进入了理想的专业。 然而同时打算换宿舍的（非常不喜欢我们宿舍的氛围和作息），最终没有成功。后来也尝试过 Bose Sleepbuds 这个方案，效果不佳。遂产生了租房的想法。 尝试读英文原著，从大一上开始读星际穿越的剧本，读到18年年中读完了。然后开始看三体的英文版，到现在看了一半多。 九月中旬开始用 Excel 记账，对日常消费进行记录和管理，持续至今。 1550035065769 九月中旬，在学校有了一辆自己的自行车。 大二上是忙碌的一学期。首先课就很多，粗略统计之下每周有38个学时，作为对比，大一上是27学时，大一下是33学时。然后学期初的时候偶然间看到网络中心招学生助理，于是去了。（并没有学什么东西好歹还是学了点的）然后是计协（主要）和其他社团的活动。 学习成绩仍然不尽如人意，而且有着每学期逐步下滑的趋势… 记不清某个时间了，折腾过Ubuntu，碰到了N+I卡驱动的问题，卡启动Logo，最后也没解决。后来就弃疗了，平时就瞎搞搞虚拟机和 WSL 了。 十二月下旬，我校ACM新生赛，我负责了评测环境的搭建，这大概是我一年来做过的最有意义的一件事。 好多书都只读到一半，然后处于半弃坑状态，比如未来简史，值得反思… 下半年的印象笔记笔记数量似乎少了很多… 更加怀念高中时候的生活了…或许到了工作之后我也会更加怀念大学的生活吧。 2019 年初计划 学习 Linux，参考书目《Linux&amp;Unix 大学教程》 学习 Git，参考书目 《Pro Git》 学习计算机网络，参考书目《Computer Networking:A Top-down Approach》（这本书TM还是去年七月下旬借的） 学习使用 Anki （去年九月初就知道了这个软件并一直想学 emmm..) 写一篇关于 Lumia 的博客（同样是去年鸽到现在了…） 用 AutoHotkey 把 Markdown 编辑器打造地更顺手一点 在豆瓣建立起我的书单，并写书评 买轻薄本（从去年年初我就开始有这个想法了QAQ），目前种草 LG Gram，等一个19款 多运动，多出去骑车 实现本博客的 Todo（虽然大半都是在瞎搞 搬出去！ 做好未来的打算，考研 OR 出国，是否找个实验室去做项目，未来的方向等等 记录生活 后记这篇文章写了三天才写完，写的也比较杂乱。事实上在一开始我就没有一个整体的构思。 2019年已经快过去了两个月，我才堪堪写完年初计划。这些计划（或者说我未来的目标）虽有个模糊的大方向，却又不甚明了，或许我还需要更深层次的思考吧。","tags":[{"name":"总结","slug":"总结","permalink":"https://cjc7373.github.io/tags/总结/"}]},{"title":"DOMjudge 配置/踩坑指南","date":"2018-12-19T20:12:51.000Z","path":"2018/12/19/Domjudge-config/","text":"我校新生赛也能用上 World Final 同款评测系统啦~ DOMjudge 提供了详尽的官方文档，然而对于博主这种英文弱鸡来说读的很痛苦。前前后后折腾了有两个星期吧，以此文作为避（踩）坑指南。 简介DOMjudge，作为一款开源的 CCS(Contest Control System)，现已被ICPC钦定为官方的比赛评测系统。比 pc^2 这种闭源而含有诸多 Bug 的 CCS 高到不知道哪里去了啊。 1545218741334 根据官方文档的描述，DOMjudge 的主要特性有： 分布式且自动评测的 judge host Web 用户界面 模块化的系统，方面添加不同的语言/编译器 整个 DOMjudge 主要分为两个部分，Domserver 和 Judgehost，据其名字即可得出它们的功能。需要注意的是，DOMjudge 使用数据库来存放几乎一切数据，所以我们还需配置 MySQL 或者 MariaDB。 安装DOMjudge 只能运行在 Linux 环境下。博主的运行环境是 Ubuntu Server 18.04 LTS，以及 DOMjudge 6.0.3。 除了传统的安装方式外，DOMjudge 还提供了 Docker 镜像以供安装，这样就大大简化了安装的困难程度。 关于 Docker 的使用这里不作详细描述。（其实是博主也一知半解） 然而官方的 Docker 文档中仅使用了命令来启动容器，为了进一步简化安装，也为了方便修改配置，我决定采用 Docker Compose 。以下是 docker-compose.yml文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859version: \"3\"services: mariadb: image: mariadb container_name: dj-mariadb environment: - MYSQL_ROOT_PASSWORD=rootpw - MYSQL_USER=domjudge - MYSQL_PASSWORD=djpw - MYSQL_DATABASE=domjudge volumes: - $PWD/data:/var/lib/mysql ports: - 13306:3306 command: - --max-connections=1000 - --innodb-log-file-size=480M domserver: image: domjudge/domserver:latest container_name: domserver environment: - MYSQL_HOST=mariadb - MYSQL_USER=domjudge - MYSQL_DATABASE=domjudge - MYSQL_PASSWORD=djpw - MYSQL_ROOT_PASSWORD=rootpw - CONTAINER_TIMEZONE=Asia/Shanghai restart: always depends_on: - phpmyadmin - mariadb ports: - 80:80 links: - mariadb judgehost: image: domjudge/judgehost:latest container_name: judgedaemon-0 privileged: true environment: - CONTAINER_TIMEZONE=Asia/Shanghai - DAEMON_ID=0 - JUDGEDAEMON_PASSWORD=whatthehell depends_on: - domserver links: - domserver restart: always volumes: - /sys/fs/cgroup:/sys/fs/cgroup:ro phpmyadmin: image: phpmyadmin/phpmyadmin container_name: myadmin ports: - 8080:80 environment: - PMA_HOST=mariadb links: - mariadb:mariadb 然后运行 docker-compose up -d 即可完成部署。 Judgehost 利用了 Linux 内核的 Cgroup 特性，所以需进行一步额外设置。编辑 /etc/default/grub 文件，将默认的命令改为： 12GRUB_CMDLINE_LINUX_DEFAULT=\"quiet cgroup_enable=memory swapaccount=1\"GRUB_CMDLINE_LINUX=\"quiet cgroup_enable=memory swapaccount=1\" 然后运行 update-grub 并重启。 需要多核判题的话创建多个 Judgehost 容器并修改 DAEMON_ID 为不同的值即可。 目前存在的问题： judgehost 用户的初始密码不定，需要手动去 web 端更改并添加 JUDGEDAEMON_PASSWORD 的环境变量。（默认环境变量的密码是 password） 整个系统对我来说是个黑盒… 除了 MariaDB , DOMserver , Judgehost 这三个必要的容器外，我还使用了 phpMyAdmin 来进行图形化的数据库管理（备份)。数据库（即 mariadb 容器的数据卷）创建在了当前目录的data文件夹下，方便备份。 其中，Domserver 映射到了主机的 80 端口， phpMyAdmin 映射到了 8080 端口。由于是内网环境，故不准备采用 HTTPS 加密。 需要注意的是，DOMjudge 提供的 Judgehost 镜像中仅包含 C, C++, Java 三种语言的运行环境。 配置Domserver 部署成功后，即可通过 Web 端来访问了。默认的管理员账号用户名 admin 密码 admin 。 可以在 Config Checker 中进行配置检查。 C++ 的默认编译选项没有 C++11， 需手动添加。 题目导入DOMjudge 支持用 zip 格式的压缩包导入/导出题目。 具体的文件结构是： 12345678│ domjudge-problem.ini│├─data│ ├─sample│ └─secret│└─problem_statement problem.&#123;pdf,html,txt&#125; 在 domjudge-problem.ini 中定义了如下信息： 1545219324330 （懒得翻译了，有时间再补） 在 secret 文件夹中存放测试数据，在 sample 文件夹中存放样例数据， 在 problem_statement 存放题面。 （不知道为什么博主在压缩包内上传题面没有成功过，只能通过 Web 端来上传） 测试数据的扩展名为 .in 和 .ans。 队伍导入队伍及用户导入采用 tsv(tab-separated values) 格式，即信息之间采用制表符（TAB）分隔。格式由 ICPC 官方定义。 teams 格式： 12teams 1team_id external_ID group_id team_name institution_name institution_short_name country_code 参考CSL的博客发现： 在导入teams表的时候，在Country Code后追加一列，填写Institution External ID。这步是阅读源代码后猜测的，当时的实际操作是直接在数据库中的team_affiliation用SQL语句更新ExternalID的。 博主采用了这种方式，并在导入队伍后通过 Web 界面手动添加 Affiliation 信息。 accounts 格式： 12accounts 1account_type fullname username password 一种（可能）简单的方式是先导入队伍再导入用户，并且用户 username 的后缀数字与 team_id 相同。不需要的字段可以直接留空。（不能缺少分隔符） tsv 文件可以采用 Excel 生成。在 Excel 中输入完数据后选择另存为文本文件（制表符分隔）即可。 如需使用institution_name institution_short_name country_code 三项需在 Team Affiliations 中提前创建相应的条目。 API参考官方的 API 说明，DOMjudge 包含 ICPC 定义的 API 和自有的 API。 1545220336183 滚榜尝试使用官方的 ICPC tools，发现总是提示比赛未结束，查阅日志认为是 DOMjudge 的 event feed 格式与 ICPC tools 提供的 resolver 工具的格式不兼容。 尝试 DOMjura 发现同样不能正确读取 event-feed 。 新生赛概况闲扯几句。 热身赛一切良好。出题人数据出锅，被批判了一个多小时2333。 正式赛赛前比赛账号导入的时候，有个人是后来添加的，和之前的版本没有对应上，导致部分队伍登录到了后一个队伍的账号，重新导入 team 后发现无法登录，还需导入 accounts。这导致比赛推迟了 5 分钟。 由于 Submission 的输出数据是保留的，而赛前我的服务器硬盘空间本来就不多了，比赛时当服务器的硬盘占用达到 90% 时，所有 judgehost 就都被关了。我只能胡乱删几个软件包腾出空间。还好没有造成大的影响。 然后直到最后还是没有搞出滚榜。 GG。总体来说还是挺顺利的，服务器没有崩，甚至平均 CPU load 只有 1.0 左右，就是感觉比较吃 I/O，还好我用的是固态（先见之明）。 总结一下，DOMjudge 体验极佳，可以在校赛再推广一波。 2019/3/19 补充：滚榜采用了 Github 上的这个项目。","tags":[{"name":"ACM","slug":"ACM","permalink":"https://cjc7373.github.io/tags/ACM/"}]},{"title":"使用KMS激活Visio","date":"2018-12-01T23:11:38.000Z","path":"2018/12/01/Visio-KMS-Activate/","text":"题记如果你懒的话当然可以用KMSpico等工具一键激活，但博主不想电脑里多个启动项，并且博主的电脑预装了Office2013家庭与学生版，用此类工具可能出现不可预知的后果，所以打算自己动手激活Visio。 转换Visio版本我在MSDN我告诉你和某非著名PT站上并没有找到Visio的VL（批量授权）版本，然而KMS激活需要VL版，所以第一步是转换Visio的版本。 复制以下代码，保存为.bat文件并用管理员身份运行： 12345if exist \"%ProgramFiles%\\Microsoft Office\\Office16\\ospp.vbs\" cd /d \"%ProgramFiles%\\Microsoft Office\\Office16\"if exist \"%ProgramFiles(x86)%\\Microsoft Office\\Office16\\ospp.vbs\" cd /d \"%ProgramFiles(x86)%\\Microsoft Office\\Office16\"cscript ospp.vbs /rearmfor /f %%x in ('dir /b ..\\root\\Licenses16\\visio???vl_kms*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" &gt;nulfor /f %%x in ('dir /b ..\\root\\Licenses16\\visio???vl_mak*.xrm-ms') do cscript ospp.vbs /inslic:\"..\\root\\Licenses16\\%%x\" &gt;nul 以上命令的作用分别为： 打开Office的安装目录（Visio也属于Office的一部分） 重置零售激活 安装KMS和MAK许可证（转换版本） 题外话：转换Office和Project版本同理。 Office： 123cscript ospp.vbs /rearmfor /f %%x in (&apos;dir /b ..\\root\\Licenses16\\proplusvl_kms*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\\root\\Licenses16\\%%x&quot; &gt;nulfor /f %%x in (&apos;dir /b ..\\root\\Licenses16\\proplusvl_mak*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\\root\\Licenses16\\%%x&quot; &gt;nul Project： 123cscript ospp.vbs /rearmfor /f %%x in (&apos;dir /b ..\\root\\Licenses16\\project???vl_kms*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\\root\\Licenses16\\%%x&quot; &gt;nulfor /f %%x in (&apos;dir /b ..\\root\\Licenses16\\project???vl_mak*.xrm-ms&apos;) do cscript ospp.vbs /inslic:&quot;..\\root\\Licenses16\\%%x&quot; &gt;nul 再跑下题，为什么要用批处理呢，因为这段命令直接在cmd里执行会出错，博主没学过Shell无法理解。（留下了没有知识的泪水） 设置KMS密钥及服务器打开Office的安装目录，也就是代码里的%ProgramFiles%\\Microsoft Office\\Office16\\（64位）或者%ProgramFiles(x86)%\\Microsoft Office\\Office16\\（32位）。 按住Shift+右键，选择在此处打开PowerShell，输入： 1cscript ospp.vbs /inpkey:PD3PC-RHNGV-FXJ29-8JK7D-RJRJK 来安装KMS密钥。注意以上命令中的KMS密钥只适用与Visio2016，其他版本可到微软官方文档中查询。 然后设置KMS服务器，博主用的是网上找的，以后尝试一下自己搭一个： 1cscript ospp.vbs /sethst:xxx.xxx 由于不保证可用性，服务器名称已略去。 指令Office立即连接KMS服务器进行激活： 1cscript ospp.vbs /act 完成！ 参考资料https://03k.org/kms.htm https://segmentfault.com/a/1190000015697457 https://blog.csdn.net/ywd1992/article/details/79412991","tags":[{"name":"KMS","slug":"KMS","permalink":"https://cjc7373.github.io/tags/KMS/"},{"name":"Office","slug":"Office","permalink":"https://cjc7373.github.io/tags/Office/"}]},{"title":"Markdown简介","date":"2018-11-08T20:16:56.000Z","path":"2018/11/08/All-about-Markdown/","text":"什么是 Markdown?Markdown 是一种轻量级且易使用的标记语言，通过对标题、正文、加粗、链接等主要文本格式的预设编码，帮用户在写作中有效避免频繁的格式调整，获得更加流畅沉浸的写作体验。 哈哈哈 Markdown VS 富文本基于 Markdown 写作，是属于纯文本写作。「纯文本」写作和「富文本」写作是对立的，我们来区分一下： *「富文本」写作 *你平时在Word上写作，就属于富文本写作。修改文字的大小、修改文字颜色、调整各种格式只需要点一下鼠标就行。富文本写作最大的特点是：所见即所得，你把格式调整成什么样子，就会直接显示出什么样的效果。 然而，富文本的格式排版过于繁杂，以致于你不得不花费大量时间在这上面，而忽略了写作本身。 同时，富文本存在着多平台转换不方便的问题，假如你在 Word 上写好了文档，格式也调好了，复制粘贴到其他写作平台的时候发现：格式全乱啦；即使是转发给其他人也可能因为 Word 版本的不同而导致显示的差别很大。（如果你有过去打印店打印文档的经历的话，相信体会很深吧）富文本一般需要使用专用软件打开（如Word）。 「Markdown」写作基于 Markdown 写作，就是纯文本写作。它允许人们使用纯文本格式来编写文档。如果你想设置某段文字的格式，只需要使用一些简单的符号来代表即可。所以文字和格式都是纯文本。能够用普通的文本编辑器打开。 Markdown正好处在富文本的对立面，由于其简洁的特性，导致其格式只有寥寥几种，功能上也远不如富文本编辑器。 Markdown 的优点 纯文本所以兼容性极强，可以用所有文本编辑器打开 让你更专注于文字而不是排版 格式转换方便，Markdown 文本你可以轻松转换为 html、电子书等 Markdown 的标记语法有极好的可读性 Markdown的主要用途 博客（自建、简书、CSDN等等） 笔记，随笔等 Github 编辑器推荐 Typora Markdown也能所见即所得！ 基本语法Markdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \\，行内引用。 1. 标题使用#，可表示1-6级标题。 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 一级标题二级标题三级标题四级标题五级标题六级标题 2. 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 3. 区块引用在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如： &gt; 区块引用&gt;&gt; 嵌套引用 效果： 区块引用 嵌套引用 4. 代码区块1）代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： int main(){printf(“Hello, Markdown.”);} 代码区块： int main() { printf(&quot;Hello, Markdown.&quot;); }注意:需要和普通段落之间存在空行。 2）在代码区块的前后加上 ``` ```hello,world``` 效果为： 1hello，world 5. 强调在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_*粗体*，_粗体_ 效果： 斜体，斜体粗体，粗体 6. 列表使用·、+、或-标记无序列表，如： -（+） 第一项 -（+） 第二项 - （+*）第三项 注意：标记后面最少有一个_空格或制表符_。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 7. 分割线分割线最常使用就是三个或以上*，还可以使用-和_。 *** 效果： 8. 链接使用 []() 在[]内输入链接的名称，()内输入链接的地址。 [我的博客](https://cjc7373.github.io) 效果： 我的博客 9. 图片添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 10. 反斜杠\\相当于反转义作用。使符号成为普通符号。 11. 行内引用在字符之间加上`，起到标记作用，相当于行内引用。如： `Too young` 效果： Too young 拓展语法1.表格1234| 一个普通标题 | 一个普通标题 | 一个普通标题 || ------ | :------: | ------: || 短文本 | 中等文本 | 稍微长一点的文本 || 稍微长一点的文本 | 短文本 | 中等文本 | ------用作标题和内容的分隔符，:用来控制对齐方式，上述表格的效果如下： 一个普通标题 一个普通标题 一个普通标题 短文本 中等文本 稍微长一点的文本 稍微长一点的文本 短文本 中等文本","tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://cjc7373.github.io/tags/Markdown/"}]},{"title":"Windows10字体崩溃修复","date":"2018-11-02T18:23:47.000Z","path":"2018/11/02/Windows10字体崩溃修复/","text":"这就是乱改字体的后果.. 字体修复，不只是字体修复。 事由偶然间看到一篇替换Win10字体来提升字体观感的文章，加上一直听说Win10的字体渲染很垃圾，于是就按照文中的步骤，把默认的微软雅黑字体替换成了苹果的苹方字体。 然而，使用了一段时间后发现，所有的字体似乎都小了一圈，而且在cmd中出现了字体大小错乱的情况。网上找了一圈发现Win10砍掉了调整字体大小的功能，现在只能以整体缩放来调整字体大小。新的字体感觉也没有想象中的那么好。 于是我把备份的默认字体又恢复了回去，按道理不会出事，然而我的电脑出锅了。一些软件的中文字体成了方框，cmd的字体也变得很奇怪。 解决方法一番操作之后，发现设置里的新宋体是乱码，感觉可能是字体文件崩了。 但是simsunb.ttf这个文件我分明备份过。。 没办法，继续面向Google解决问题，这时候找到了一个微软社区页面，里面给出了三条命令： 123DISM.exe /Online /Cleanup-image /ScanhealthDISM.exe /Online /Cleanup-image /Restorehealthsfc /scannow 根据微软官方支持页面的描述，这三个命令是检查系统文件的完整性并自动通过 Windows 更新来修复。 用管理员身份打开cmd，依次执行完重启，一切都恢复了原状。 后记看了一些知乎回答，感觉Win10的字体也并没有那么糟糕。事实上我一直以来用着默认的字体也没有感到不舒服。可能是我眼瞎吧。 另外，上述的三个命令理论上能解决Windows的许多问题，碰到问题可以尝试。 2019/2/13 更新目前家里入了 4K 显示器，200% 缩放，观感上没有任何问题。","tags":[{"name":"Fonts","slug":"Fonts","permalink":"https://cjc7373.github.io/tags/Fonts/"},{"name":"Windows","slug":"Windows","permalink":"https://cjc7373.github.io/tags/Windows/"}]},{"title":"我为什么选择了独立博客","date":"2018-10-13T20:13:11.000Z","path":"2018/10/13/我为什么选择了独立博客/","text":"这是一个独立博客式微的时代。 独立博客没有博客平台的推荐导流系统，相比之下观之者寥寥。 那我为什么还是选择了独立博客呢？ 自由，不会受外部因素的影响，可以随意添加自己想要的功能。 方便，一行命令就能更新博客。 可控，完全受自己管理。 在这纷纭复杂的互联网中，拥有自己的一方小天地，似乎也是极好的。","tags":[]},{"title":"Hexo搭建小记","date":"2018-10-13T20:10:18.000Z","path":"2018/10/13/Hexo搭建小记/","text":"身为一个懒人，又不会写网页，也只能用用博客生成器了。 为什么选择Hexo其实也没啥特别的理由。一开始想把博客搭在自己的服务器上，然而感觉维护太麻烦了，正好觉得Github Pages很不错，就决定用了。Github Pages只支持静态页面，WordPress之类的就不能用了，于是随手找了几个静态博客生成器， 随手一查就找到了Hexo。 Hexo搭建过程Hexo的官方文档有中文，这点很赞。虽然官方文档讲的不是很清楚..然而搭建还是比较简单的，加上Google了几篇教程，很快就把Hexo搭起来了。 身为一个博客生成器，当然不能让我们接触到代码了。所以Hexo的基本配置均在_config.yml这个配置文件中。配置采用YAML语法，看看官方文档也就差不多了解了。基本上无需过多配置就搭建完成了。 Hexo主题Hexo有许多主题，个人采用了官方推荐的 NexT.Pisces主题，整体风格还是比较简洁的（然而用这个主题的实在是太多了…随便一个Hexo博客就是Next主题）。 同时主题内已集成了许多第三方服务，如Google Analysis、DISQUS等，只要改改配置文件就能配置完成，还是相当简单的。 Hexo图片插入指引直接用Markdown语法引用图片会导致图片在首页无法显示，官网给出了一个解决方案，就是利用内置的插件，形式如下： 1&#123;% asset_path slug %&#125; 然而这个方法会破环原生Markdown语法，对编辑者的预览等造成不便。 很奇怪官方为什么要采用这种方法。 更好的解决方案是安装hexo-asset-image这个插件。进入博客目录，使用如下命令安装插件： 1npm install https://github.com/CodeFalling/hexo-asset-image --save 安装完成后，即可使用原生Markdown语法插入图片。 To Do已实现功能 评论，采用DISQUS 数据统计，采用Google Analytics 图片显示在首页 搜索引擎收录，Google Search Console 首页文章不显示全部 git配置，hexo g -d一条命令部署 使用Travis CI自动生成及部署 待实现功能 更多的自定义操作 文章访问量统计 在自己的服务器也部署博客，然后用 CI 实现自动部署 使用 CDN 加速 Github Pages 的访问 评论点击加载 参考文章hexo中完美插入本地图片 为HEXO博客中每篇文章的浏览量统计 Hexo官方文档 NexT使用文档 theme-next!Hexo网站的一次华丽升级","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://cjc7373.github.io/tags/Hexo/"}]},{"title":"Hello,World!","date":"2018-09-24T11:28:47.000Z","path":"2018/09/24/Hello-World-0/","text":"Hello,World! Hello,World","tags":[{"name":"test","slug":"test","permalink":"https://cjc7373.github.io/tags/test/"}]}]