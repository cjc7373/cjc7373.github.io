<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Coherence's Blog</title><link>https://blog.coherence.codes/tags/blog/</link><description>Recent content in Blog on Coherence's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Sun, 02 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello, Hugo!</title><link>https://blog.coherence.codes/posts/2022/hello_hugo/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2022/hello_hugo/</guid><description>这是一个船新的博客！
历史 在大二（2018）的时候，我萌生了搭建一个自己的独立博客的想法，于是就有了 hexo搭建小记，当时我随手一找找到的基本都是 Hexo，于是我就用了。引用一段当时写的关于页面：
关于博客 2021-02-08 迁移到 pelican, 打算自己写个主题, 待填坑 2020-03-26 更新 Hexo 至 4.2.0，启用 hexo-generator-sitemap 插件 2020-02-22 更改评论为 disqusjs，详见作者的博文；启用 pjax 2019-12-24 启用新域名blog.coherence.codes 2019-10-07 升级主题至 Next V7.4.1 2018-09-24 第一篇博文。采用 Hexo + NexT 主题， 部署于 Github Pages。搭建过程见{% post_link Hexo搭建小记 这篇文章 %} Next 就是一个非常大众的主题，有几种变体，我用的是一个叫 pisces 的变体，长这样（原博客图已经找不到了，只能用官方 Demo 凑数了）：
这一时期的博客位于 source 分支，最后更新于 2020-04-16。
由于这个主题实在是太大众了，中途（2019-10 左右）我也想过换一个主题（hexo-theme-indigo，一个 Material Design 风格的主题），但是没有配置成功，theme-indigo 分支便是那次尝试。theme-indigo 的效果图长这样：
到了 21 年 2 月，我开始重新调研博客生成器，当时看到了一个 Python 写的 Pelican，而我又希望壮大一下 Python 生态，于是就用了。用了之后发现并没有什么合适的主题，恰巧 Pelican 用的模板引擎 Jinja 和 Django Template Engine 很像，我比较熟悉，于是我就想自己写一个主题，然而这一工作从没开始过.</description></item><item><title>Hexo搭建小记</title><link>https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 13 Oct 2018 20:10:18 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</guid><description>身为一个懒人，又不会写网页，也只能用用博客生成器了。
为什么选择Hexo 其实也没啥特别的理由。一开始想把博客搭在自己的服务器上，然而感觉维护太麻烦了，正好觉得Github Pages很不错，就决定用了。Github Pages只支持静态页面，WordPress之类的就不能用了，于是随手找了几个静态博客生成器， 随手一查就找到了Hexo。
Hexo搭建过程 Hexo的官方文档有中文，这点很赞。虽然官方文档讲的不是很清楚..然而搭建还是比较简单的，加上Google了几篇教程，很快就把Hexo搭起来了。
身为一个博客生成器，当然不能让我们接触到代码了。所以Hexo的基本配置均在_config.yml这个配置文件中。配置采用YAML语法，看看官方文档也就差不多了解了。基本上无需过多配置就搭建完成了。
Hexo主题 Hexo有许多主题，个人采用了官方推荐的 NexT.Pisces主题，整体风格还是比较简洁的（然而用这个主题的实在是太多了&amp;hellip;随便一个Hexo博客就是Next主题）。
同时主题内已集成了许多第三方服务，如Google Analysis、DISQUS等，只要改改配置文件就能配置完成，还是相当简单的。
Hexo图片插入指引 直接用Markdown语法引用图片会导致图片在首页无法显示，官网给出了一个解决方案，就是利用内置的插件，形式如下：
{% asset_path slug %} 然而这个方法会破环原生Markdown语法，对编辑者的预览等造成不便。
很奇怪官方为什么要采用这种方法。
更好的解决方案是安装hexo-asset-image这个插件。进入博客目录，使用如下命令安装插件：
npm install https://github.com/CodeFalling/hexo-asset-image --save 安装完成后，即可使用原生Markdown语法插入图片。
To Do 已实现功能 评论，采用DISQUS 数据统计，采用Google Analytics 图片显示在首页 搜索引擎收录，Google Search Console 首页文章不显示全部 git配置，hexo g -d一条命令部署 使用Travis CI自动生成及部署 待实现功能 更多的自定义操作 文章访问量统计 在自己的服务器也部署博客，然后用 CI 实现自动部署 使用 CDN 加速 Github Pages 的访问 评论点击加载 参考文章 hexo中完美插入本地图片
为HEXO博客中每篇文章的浏览量统计
Hexo官方文档
NexT使用文档
theme-next!Hexo网站的一次华丽升级</description></item></channel></rss>