<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Coherence's Blog</title><link>https://blog.coherence.codes/tags/golang/</link><description>Recent content in Golang on Coherence's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Sat, 06 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 包管理（一）入门和设计原则</title><link>https://blog.coherence.codes/posts/2024/go_pkg_mgmt_1_toturial/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2024/go_pkg_mgmt_1_toturial/</guid><description>在我初学 Go 的时候，曾被网上的过时教程和各种对 $GOPATH 的操作搞得云里雾里，而现在我们已经基本用不到 $GOPATH 了，因为在 2023 年， Go Modules 已经一统天下了。但是在这之前，是群魔乱舞的时代，对这段历史感兴趣的同学可以参考这篇博客。Go 包管理的转折来源于 2018 年 2 月 Go 作者之一 Russ Cox 在其博客上连发数篇文章进行了 Go Modules 的设计：
并最终在 Go 1.11 (2018/8) 中发布。
按照 GOPATH wiki 所述，从 Go 1.16 (2021/2) 开始，GO111MODULE=on 变量被默认设置，除非显式修改该变量，否则 Go Modules 会默认启用。当使用 Go Modules 时，GOPATH 将不再用于解析导入路径。但它仍然被用于存储下载的包（$GOPATH/pkg/mod）和二进制命令（$GOPATH/bin）。比如 Go 的 language server gopls 通常会被安装到 $GOPATH/bin 下，所以这个目录通常会加入到 $PATH 中。
以下内容皆以 Go Modules 启用为前提。
组织代码 Go 程序被组织成包（packages）。一个包是一组在同一文件夹下的源代码文件的集合。在同一文件中定义的函数、类型、变量、常量在同一个包的所有其他文件中可见。一般而言，包名就是文件夹名，但这只是惯例，而非规定。如果却有需要可以不一致。
一个文件夹下无法拥有多个包。编译器会报错 found packages a (a.go) and b (b.</description></item></channel></rss>