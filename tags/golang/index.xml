<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Coherence's Blog</title><link>https://blog.coherence.codes/tags/golang/</link><description>Recent content in Golang on Coherence's Blog</description><generator>Hugo</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Sun, 07 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 包管理（一）入门和设计原则</title><link>https://blog.coherence.codes/posts/2024/go_pkg_mgmt_1_toturial/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2024/go_pkg_mgmt_1_toturial/</guid><description>&lt;p&gt;在我初学 Go 的时候，曾被网上的过时教程和各种对 &lt;code&gt;$GOPATH&lt;/code&gt; 的操作搞得云里雾里，而现在我们已经基本用不到 &lt;code&gt;$GOPATH&lt;/code&gt; 了，因为在 2023 年， Go Modules 已经一统天下了。但是在这之前，是群魔乱舞的时代，对这段历史感兴趣的同学可以参考&lt;a href="https://blog.wolfogre.com/posts/golang-package-history/"&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;顺便提一下，GOPATH 时代包没有“版本”的概念，这可能是因为 Google 内部采用 monorepo 的方式（即所有代码都放在一个仓库中）管理代码，所有人都基于 HEAD 来 build，所以当有人的改动 break 了其他人的代码时，很容易在 build 时反映出来。Go 作者之一 Rob Pike 的文章 &lt;a href="https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html"&gt;What We Got Right, What We Got Wrong&lt;/a&gt; 中提到了这一点。&lt;/p&gt;
&lt;p&gt;Go 包管理的转折来源于 2018 年 2 月 Go 作者之一 Russ Cox 在其博客上连发数篇文章进行了 Go Modules 的设计：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20231227012240619.png" alt="image-20231227012240619"&gt;&lt;/p&gt;
&lt;p&gt;并最终在 Go 1.11 (2018/8) 中发布。&lt;/p&gt;
&lt;p&gt;按照 &lt;a href="https://go.dev/wiki/GOPATH"&gt;GOPATH wiki&lt;/a&gt; 所述，从 Go 1.16 (2021/2) 开始，&lt;code&gt;GO111MODULE=on&lt;/code&gt; 变量被默认设置，除非显式修改该变量，否则 Go Modules 会默认启用。当使用 Go Modules 时，&lt;code&gt;GOPATH&lt;/code&gt; 将不再用于解析导入路径。但它仍然被用于存储下载的包（&lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt;）和二进制命令（&lt;code&gt;$GOPATH/bin&lt;/code&gt;）。比如 Go 的 language server &lt;code&gt;gopls&lt;/code&gt; 通常会被安装到 &lt;code&gt;$GOPATH/bin&lt;/code&gt; 下，所以这个目录通常会加入到 &lt;code&gt;$PATH&lt;/code&gt; 中。&lt;/p&gt;</description></item></channel></rss>