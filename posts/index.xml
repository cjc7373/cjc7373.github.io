<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Coherence's Blog</title><link>https://blog.coherence.codes/posts/</link><description>Recent content in Posts on Coherence's Blog</description><generator>Hugo</generator><language>zh-cn</language><copyright>Coherence. 本站遵循 CC BY-NC-SA 4.0 协议</copyright><lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.coherence.codes/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>我的 NAS 方案</title><link>https://blog.coherence.codes/posts/2025/my_nas_plan/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2025/my_nas_plan/</guid><description>&lt;p&gt;很久之前，我就有组一个 NAS 的想法，直到今年才得以实现。&lt;/p&gt;
&lt;h2 id="选型"&gt;选型&lt;/h2&gt;
&lt;p&gt;首先就是选择成品 NAS 还是 DIY。我并没有 NAS 的刚需，只是想在折腾中学习，所以自然是选择 DIY。基于战未来的考虑，直接选了个八盘位的机箱，而 CPU 方面目前看来没什么吃性能的应用，所以选了 n100。最终的配置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;板U 云星 n100 550&lt;/li&gt;
&lt;li&gt;m2 转 sata 拓展卡 75&lt;/li&gt;
&lt;li&gt;机箱 乔思伯 n3 740&lt;/li&gt;
&lt;li&gt;内存 拆机 8G 0&lt;/li&gt;
&lt;li&gt;电源 Thermaltake 450W 钢影 SFX 420&lt;/li&gt;
&lt;li&gt;系统盘 宏碁 128g 70&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合计 1850。这其中电源感觉严重冗余了，因为后面实测待机功率才 30w 左右。但是机箱只支持 SFX 电源，而低功率的 SFX 电源似乎比较少，350w 的 SFX 都挺垃圾的。说句题外话，在很久之前我的 nas 配置单上选的还是 i3-10100，那时候 12 代还没出..&lt;/p&gt;
&lt;p&gt;软件同样有成品 NAS 系统和 DIY 可选，DIY 系统（比如装一个普通的 Linux 发行版）太费时费力了，所以还是选择成品的 NAS 系统。网上流行的 NAS 系统大概有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unraid，正如其名字所说的，没有 raid。整体是 JBOD（Just a Bunch of Disks）的思路，有单独的 parity disk。由于 data disk 的容量并不要求一致，所以 parity disk 要求大于等于最大的 data disk 容量。parity 用的也是奇偶校验。非开源，需付费购买授权，当然也有学习版。&lt;/li&gt;
&lt;li&gt;黑群晖，优势是能使用群晖生态系统中的软件，但是由于是逆向出来的，难免有各种兼容性问题。使用 btrfs 作为文件系统，mdadm 管理阵列。&lt;/li&gt;
&lt;li&gt;TrueNAS，基于 zfs，开源。开发商 ixsystems 本身也赞助了一些 zfs feature 的开发。卖企业版，也卖类似一体机的硬件。&lt;/li&gt;
&lt;li&gt;飞牛，国产的 NAS 系统。非开源，免费使用。面向小白用户，基本能够开箱即用。似乎也是 btrfs+mdadm 的组合。后面应该会卖硬件。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;（混沌邪恶）&lt;/del&gt; Windows Server&lt;/li&gt;
&lt;li&gt;OpenMediaVault，相对知名度没那么高的 NAS 系统，是从 FreeNAS（TrueNAS 的前身）fork 出来的。据维基百科介绍，这是因为 OMV 的开发者想要基于 Linux 来开发 FreeNAS。略显讽刺的是，truenas 在 2023 年宣布将全面转向 Linux，原先的 FreeBSD 版本（TrueNAS Core）将只会收到安全更新并被逐渐取代。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这之上，还可以先安装 PVE 作为虚拟化平台，然后在虚拟机里安装 NAS 系统。由于我很早的时候就看到过很多“鼓吹” zfs 的文章，所以文件系统的选型在一开始就定下了：zfs。并且我比较偏好开源系统，所以最终选择了 truenas。&lt;/p&gt;</description></item><item><title>OpenWrt 搭建透明代理</title><link>https://blog.coherence.codes/posts/2024/openwrt_transparent_proxy/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2024/openwrt_transparent_proxy/</guid><description>&lt;p&gt;openclash、shellclash 之类的方案感觉都太复杂了。我的需求只是给 chromecast 用上代理，并且在代理失效时不要影响局域网中的其他设备。所以想找一个简单的方案。&lt;/p&gt;
&lt;p&gt;经过一番摸索，发现 Macvlan 很适合我，具体步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建一个 macvlan 设备&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-openwrt" data-lang="openwrt"&gt;config device
 option type &amp;#39;macvlan&amp;#39;
 option ifname &amp;#39;br-lan&amp;#39;
 option mode &amp;#39;bridge&amp;#39;
 option name &amp;#39;br-lanmac0&amp;#39;
 option ipv6 &amp;#39;1&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里需要选择启用 ipv6，否则 br-lan 不会下发 RA，导致局域网内设备没有 v6 地址，具体原因还不清楚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个接口绑定到这个设备&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-openwrt" data-lang="openwrt"&gt;config interface &amp;#39;clash&amp;#39;
 option proto &amp;#39;static&amp;#39;
 option device &amp;#39;br-lanmac0&amp;#39;
 option ipaddr &amp;#39;192.168.2.2&amp;#39;
 option netmask &amp;#39;255.255.255.0&amp;#39;
 option gateway &amp;#39;192.168.2.1&amp;#39;
 option defaultroute &amp;#39;0&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;IP 地址分配一个在局域网段下的，网关填 lan 地址。注意关闭默认路由，否则会把 PPPoE 的路由给删了，导致局域网内设备连不上网，具体原因也不清楚。这个接口不需要任何路由规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把这个接口添加到防火墙的 lan zone 中，否则 lan 发给该接口的包会被丢弃&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 mihomo （原 clash-meta）二进制，配置 tun 绑定到之前的设备上&lt;/p&gt;</description></item><item><title>Linux 内存管理初探</title><link>https://blog.coherence.codes/posts/2024/linux_memory_management/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2024/linux_memory_management/</guid><description>&lt;p&gt;本文试图解释两个简单的问题：&lt;code&gt;free&lt;/code&gt; 命令中的 used/free/available 等字段究竟代表了什么？而 &lt;code&gt;ps&lt;/code&gt; 命令中的 VSZ/RSS 又代表了什么？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ free -h
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; total used free shared buff/cache available
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Mem: 38Gi 15Gi 834Mi 3.3Gi 25Gi 22Gi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Swap: 19Gi 5.3Gi 14Gi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ps aux --sort&lt;span style="color:#f92672"&gt;=&lt;/span&gt;-rss | head -5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cjc &lt;span style="color:#ae81ff"&gt;3354&lt;/span&gt; 2.3 4.6 &lt;span style="color:#ae81ff"&gt;97222056&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1917888&lt;/span&gt; ? Ssl Oct07 37:42 /usr/bin/qbittorrent
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cjc &lt;span style="color:#ae81ff"&gt;354324&lt;/span&gt; 1.3 2.7 &lt;span style="color:#ae81ff"&gt;2772076&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1137784&lt;/span&gt; ? Ssl 12:05 1:59 /usr/bin/telegram-desktop
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cjc &lt;span style="color:#ae81ff"&gt;2806&lt;/span&gt; 6.6 2.3 &lt;span style="color:#ae81ff"&gt;4141220&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;941484&lt;/span&gt; ? Sl Oct07 109:17 /usr/bin/kwin_wayland ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cjc &lt;span style="color:#ae81ff"&gt;3390&lt;/span&gt; 1.5 1.9 &lt;span style="color:#ae81ff"&gt;3994932&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;792364&lt;/span&gt; ? Sl Oct07 26:10 /usr/lib/zotero/zotero-bin ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本文假定读者具有虚拟内存的基础知识，文中的代码将以 C 语言为例。&lt;/p&gt;</description></item><item><title>日本之旅</title><link>https://blog.coherence.codes/posts/2024/japan_trip/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2024/japan_trip/</guid><description>&lt;h2 id="计划"&gt;计划&lt;/h2&gt;
&lt;p&gt;我和 Moo 一开始说的是去新马泰，后来改为日本，真正开始做攻略已经是三月下旬了。日本只支持旅行社送签，我在 3/26 申请了签证并提交了材料，4/3 出签，花了六个工作日，还是挺快的。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20240424004023270.png" alt="image-20240424004023270"&gt;&lt;/p&gt;
&lt;p&gt;订机票和酒店的时候差不多离出发还有半个月，这时候的价格已经挺贵了，可能提前两三个月订会更便宜。初步的计划是东京-&amp;gt;京都-&amp;gt;大阪，详细的计划写在 hackmd 上。实际上我们的计划并不详细，只是提前订了 Tokyo Skytree、Shibuya sky 的票，规定了一下在东京的那几天每天在哪个区域活动，而在京都和大阪的行程则完全没有计划，全靠临时起意。&lt;/p&gt;
&lt;p&gt;我在出发前半个月用多邻国速成了两周日语，非常失败，五十音都没认全，还是只能用英语交流。结论为不如用 Anki 认五十音。&lt;/p&gt;
&lt;h2 id="流水账"&gt;流水账&lt;/h2&gt;
&lt;h3 id="413"&gt;4/13&lt;/h3&gt;
&lt;p&gt;终于踏上了去东京的旅程，虽然很怕在途中突然被要求改论文/交材料，but be it，放心玩，越玩越稳。&lt;/p&gt;
&lt;p&gt;我是先到杭州东，坐&lt;a href="https://zh.wikipedia.org/zh-cn/%E5%A4%8D%E5%85%B4%E5%8F%B7CR200J%E5%9E%8B%E5%8A%A8%E8%BD%A6%E7%BB%84"&gt;垃圾桶&lt;/a&gt;去上海南，再坐地铁去浦东机场，这套流程也太长了，我上午十点出发，三点半才到浦东机场。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src="https://blog.coherence.codes/posts/2024/japan_trip/image-20240424004456080.png" width="500px"&gt;
&lt;/figure&gt;

（来点经典小红书照片）&lt;/p&gt;
&lt;p&gt;Moo 买的是西安-&amp;gt;上海浦东-&amp;gt;东京成田的中转航班，第二段和我是同一个航班，本来的计划是浦东机场会合。然而不幸的是当天西安有雷雨天气，第一段航班延误了大概两个小时，导致赶不上第二段航班，只能改签。日本的手机卡是 Moo 买的，由于 Moo 延误了，一个问题就是我在日本的第一天没有网。下飞机了发现我的电信卡没有国际漫游。有的话用一天 25，其实可以接受，但是我的卡已经没信号收不了短信了，只能微信喊我爸问了下客服，说是要换卡才能开通？这是什么操作。于是只能去便利店高价（880 日元的卡费 + 1300 日元三天的套餐费）买了张卡。&lt;/p&gt;
&lt;p&gt;出关的时候排队排了好久，大概有半个多小时，很多人可能是填的纸质材料比较慢，我填了 Visit Japan Web 感觉就半分钟就办完了。本来我们在线买的两张 Skyliner 票，只要凭兑换二维码兑换车票就行，然而现在就我一个人，和 staff 交流了半天，最后的办法是退我们网上买的票，然后重新分别买。本打算顺便买交通卡的，但是卖卡的地方（不知道有没有别的地方，我问到的应该是在 Skyliner &amp;amp; Keisai Information Center）十点关门了，于是没买到。&lt;/p&gt;
&lt;p&gt;到达第一天的青旅的时候已经过十一点了，被加收了 1000 日元 late check-in fee。入住的时候我说这是我第一次来日本，前台小哥特地说了一句“Welcome to Japan”。住的是十四人间（！），但是大家都挺安静的，只是晚上和早上在 lobby 都没见着什么人，没有交流。青旅建在铁路正下方，列车驶过的声音还挺大的。不过这地段是相当好啊，就在天空树旁边。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20240424015124861.png" alt="image-20240424015124861"&gt;&lt;/p&gt;
&lt;p&gt;（Wise Owl Hostels 就是我住的青旅，上面就是铁路）&lt;/p&gt;</description></item><item><title>Go 包管理（一）入门和设计原则</title><link>https://blog.coherence.codes/posts/2024/go_pkg_mgmt_1_toturial/</link><pubDate>Sat, 06 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2024/go_pkg_mgmt_1_toturial/</guid><description>&lt;p&gt;在我初学 Go 的时候，曾被网上的过时教程和各种对 &lt;code&gt;$GOPATH&lt;/code&gt; 的操作搞得云里雾里，而现在我们已经基本用不到 &lt;code&gt;$GOPATH&lt;/code&gt; 了，因为在 2023 年， Go Modules 已经一统天下了。但是在这之前，是群魔乱舞的时代，对这段历史感兴趣的同学可以参考&lt;a href="https://blog.wolfogre.com/posts/golang-package-history/"&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;顺便提一下，GOPATH 时代包没有“版本”的概念，这可能是因为 Google 内部采用 monorepo 的方式（即所有代码都放在一个仓库中）管理代码，所有人都基于 HEAD 来 build，所以当有人的改动 break 了其他人的代码时，很容易在 build 时反映出来。Go 作者之一 Rob Pike 的文章 &lt;a href="https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html"&gt;What We Got Right, What We Got Wrong&lt;/a&gt; 中提到了这一点。&lt;/p&gt;
&lt;p&gt;Go 包管理的转折来源于 2018 年 2 月 Go 作者之一 Russ Cox 在其博客上连发数篇文章进行了 Go Modules 的设计：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20231227012240619.png" alt="image-20231227012240619"&gt;&lt;/p&gt;
&lt;p&gt;并最终在 Go 1.11 (2018/8) 中发布。&lt;/p&gt;
&lt;p&gt;按照 &lt;a href="https://go.dev/wiki/GOPATH"&gt;GOPATH wiki&lt;/a&gt; 所述，从 Go 1.16 (2021/2) 开始，&lt;code&gt;GO111MODULE=on&lt;/code&gt; 变量被默认设置，除非显式修改该变量，否则 Go Modules 会默认启用。当使用 Go Modules 时，&lt;code&gt;GOPATH&lt;/code&gt; 将不再用于解析导入路径。但它仍然被用于存储下载的包（&lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt;）和二进制命令（&lt;code&gt;$GOPATH/bin&lt;/code&gt;）。比如 Go 的 language server &lt;code&gt;gopls&lt;/code&gt; 通常会被安装到 &lt;code&gt;$GOPATH/bin&lt;/code&gt; 下，所以这个目录通常会加入到 &lt;code&gt;$PATH&lt;/code&gt; 中。&lt;/p&gt;</description></item><item><title>记一次 mpv 异常关闭的调试</title><link>https://blog.coherence.codes/posts/2023/mpv_debug/</link><pubDate>Sun, 10 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/mpv_debug/</guid><description>&lt;p&gt;（EDIT 2025-03-24：这个 Bug 发生的环境是一加 8T+Oxygen OS，在我更换至 LineageOS 之后这个问题没有再出现过了。所以大概率是一加的锅..）&lt;/p&gt;
&lt;h2 id="查不出的问题"&gt;查不出的问题&lt;/h2&gt;
&lt;p&gt;长久以来我都被 mpv 的一个问题所困扰，那就是在正常播放视频时 mpv 有概率会自动退出（通常是按下暂停键的时候）。通过 &lt;code&gt;-v -v -v&lt;/code&gt; 参数查看详细日志发现 mpv 接收到了 stop 命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;cplayer&lt;span style="color:#f92672"&gt;]&lt;/span&gt; Run command: stop, flags&lt;span style="color:#f92672"&gt;=&lt;/span&gt;64, args&lt;span style="color:#f92672"&gt;=[&lt;/span&gt;flags&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是这个命令是谁发的不得而知。一开始怀疑是插件的问题，然而禁用所有插件（&lt;code&gt;~/.config/mpv/scripts&lt;/code&gt; 目录）后问题依旧。后尝试用 &lt;code&gt;--no-config&lt;/code&gt; 参数禁用所有配置，发现问题消失，于是尝试注释掉所有 &lt;code&gt;mpv.conf&lt;/code&gt; 中的配置，发现问题依旧。我还怀疑过是 &lt;code&gt;pipewire&lt;/code&gt;/&lt;code&gt;xorg&lt;/code&gt; 的问题，但是并没有搜索到相关信息。&lt;/p&gt;
&lt;p&gt;我还观察到 vlc 是不是也会出现播放时自动停止的现象，另外 youtube/bilibili 播放视频时会经常自动跳转到开头。后来证实这其实都是同一个问题导致的..&lt;/p&gt;
&lt;h2 id="线索"&gt;线索&lt;/h2&gt;
&lt;p&gt;在 mpv 的 issue 中找到了一个问题相同的 &lt;a href="https://github.com/mpv-player/mpv/issues/11988"&gt;bug report&lt;/a&gt;，开发者认为这是插件导致的，但是我已经禁用所有插件了，于是我留言询问应该如何排查，有一个人指出了可能和 &lt;code&gt;mpv-mpris&lt;/code&gt; 有关。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/title/MPRIS"&gt;MPRIS&lt;/a&gt; 是一个 dbus 接口，提供了控制媒体播放器的相应 API，绝大多数应用，包括上述提到的几个，都支持这一接口。mpv 的 mpris 支持通过 &lt;code&gt;mpv-mpris&lt;/code&gt; 包提供。看到这个名字我恍然大悟，&lt;code&gt;mpv-mpris&lt;/code&gt; 由系统包管理器安装，因此并没有出现在用户的插件目录下。当即我查看了 &lt;code&gt;mpv-mpris&lt;/code&gt; 的源码，发现其为 mpv C 拓展，而不是常见的 Lua 拓展。&lt;/p&gt;
&lt;p&gt;从&lt;a href="https://github.com/hoyon/mpv-mpris/blob/16fee38988bb0f4a0865b6e8c3b332df2d6d8f14/mpris.c#L602C26-L602C26"&gt;这里&lt;/a&gt;可以看到，它在收到 mpris 的 &lt;code&gt;Stop()&lt;/code&gt; 方法后，会向 mpv 发送 stop 命令，因此我准备加一行日志看看到底是不是 &lt;code&gt;mpv-mpris&lt;/code&gt; 导致了上述问题。询问了 ChatGPT 之后发现其对于如何在 mpv C 扩展中打印日志完全是在瞎扯.. 后来发现直接用 &lt;code&gt;printf&lt;/code&gt; 就行.. 从函数签名可以看到其包含了 sender 的信息，于是将其打印。这里我并没有 clone 仓库进行构建，而是直接复制 archlinux 中的 PKGBUILD，先用 &lt;code&gt;makepkg -o&lt;/code&gt; 下载解压源码，修改后再用 &lt;code&gt;makepkg -e&lt;/code&gt; 进行构建，这样做的好处是无需关心具体的构建流程以及如何应用构建后的插件，build 完直接装就行。&lt;/p&gt;</description></item><item><title>MIT 6.824 学习笔记(二) Raft</title><link>https://blog.coherence.codes/posts/2023/mit_6.824_2_raft/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/mit_6.824_2_raft/</guid><description>&lt;p&gt;本文主要是对 Raft 论文的翻译，为了保持准确性，我会尽量使用英文术语。&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;在过去十年，Leslie Lamport 的 Paxos 协议几乎成为了共识的同义词。Paxos 首先定义了一种协议来对单个决定达成共识, 比如一条单个的 log entry, 这被称为 single-decree Paxos。 其支持多个决定的版本 (比如 log) 被称为 muti-Paxos。然而，Paxos 的缺点是难以理解，并且没有提供一个良好的基础来构建可行的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;试图为这个主题增添一点幽默的尝试以惨淡的失败告终。……这个希腊寓言显然使阅读论文的人们分心了，以致于他们无法理解这个算法。我把论文发给了一些人，其中包括 Nancy Lynch, Vassos Hadzilacos 和 Phil Bernstein，他们声称读过了论文。几个月后我发邮件给他们问了如下问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;你能否实现一个分布式数据库，它能容忍任何进程的故障（可能是所有进程）而不牺牲一致性，并且在超过半数进程恢复之后继续正常工作？
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有人察觉到这个问题和 Paxos 算法之间有任何联系。&lt;/p&gt;
&lt;p&gt;—— Leslie Lamport &lt;a href="https://lamport.azurewebsites.net/pubs/pubs.html?from=https://research.microsoft.com/users/lamport/pubs/pubs.html&amp;amp;type=path#lamport-paxos"&gt;对 The Part-Time Parliament 的评论&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;相较于 Paxos，Raft 的目标是易于理解且符合直觉。为了使 Raft 易于理解，作者采取了解耦 (Raft 将共识问题分解成几个子问题 leader election, log replication, safety, and membership changes) 和缩减状态空间的方式。&lt;/p&gt;
&lt;p&gt;Raft 和已有的共识算法类似（尤其是 Viewstamped Replication），但它有一些新特性。Raft 采取了强 leader 的设计，例如 log entry 只会从 leader 向其他节点分发。这可能是为了性能考虑（比无 leader 要更快，RPC 也更少）Raft 采用基于随机计时器的 leader 选举, 从而用一种简单的方法来解决冲突。另外还有处理成员变更方面的改进。&lt;/p&gt;</description></item><item><title>git 入门</title><link>https://blog.coherence.codes/posts/2023/git_%E5%85%A5%E9%97%A8/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/git_%E5%85%A5%E9%97%A8/</guid><description>&lt;p&gt;本文的大部分内容来自于 &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git&lt;/a&gt; 这本书。&lt;/p&gt;
&lt;h2 id="objects"&gt;Objects&lt;/h2&gt;
&lt;p&gt;git 中最基础的元素是 object，每个 object 由一个 object ID (OID) 唯一标识，OID 是一个 160 bits （用 hex 字符串表示为四十个字符） 的 SHA-1 哈希。具体而言，git 中主要存在三种 objects：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;blobs&lt;/code&gt;: 存储文件内容，OID 即为文件内容的哈希&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;trees&lt;/code&gt;: 一个文件名（path entries）的有序列表，OID 为这个列表的哈希。列表的每一行如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;100644 blob 1fc4aa8f76027dd0fb8f9b533810770236d5c234 .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;容易推测这几个字段分别为权限、object 类型、哈希、文件名。子目录同样是 trees。项目的根目录即为 root tree。所有的 trees 构成了一棵 Merkle tree，&lt;del&gt;所以 git 就是区块链（即答&lt;/del&gt;。下图中三角代表 trees，方块为 blobs&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20230918111328708.png" alt="image-20230918111328708"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;commits&lt;/code&gt;: 一个&lt;strong&gt;快照&lt;/strong&gt;（snapshot），每个 commit 包含了一个到根 tree 的引用，和一个（或多个）到 parent 的引用。parent 就是上一个 commit 的 OID。在一个 merge commit 中会包含多个 parents。由于 Commit 存储的是快照而不是 diff，所以 Git checkout（切换分支）的速度很快。下图中圆形代表 commits&lt;/p&gt;</description></item><item><title>MIT 6.824 学习笔记(一) GFS</title><link>https://blog.coherence.codes/posts/2023/mit_6.824_1_gfs/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/mit_6.824_1_gfs/</guid><description>&lt;p&gt;存储系统通常是一个分布式系统的基石，通常应用可以是无状态的，而所有状态便由存储系统来管理。&lt;/p&gt;
&lt;p&gt;Google 文件系统（The Google File System, GFS）在 2003 年于一篇同名论文中被提出，发表在系统领域顶会 SOSP 上，是 Google 大数据三驾马车之一&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;。GFS 是一个成功的系统，在 00 年代早期，人们对于分布式文件系统已经有很好的理解了，但是尚未有一个可以扩展到上千个节点的系统被实现出来。很多 GFS 的设计被 HDFS 等后来的分布式文件系统上。&lt;/p&gt;
&lt;p&gt;GFS 基于以下几个方面的观察：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点故障是常见的，因为其运行在大量普通机器（commodity components）上&lt;/li&gt;
&lt;li&gt;存储的文件以大文件（数百 MB 到数 GB）为主，小文件应当被支持，但不应对其优化&lt;/li&gt;
&lt;li&gt;对文件的大多数写入操作是追加 （append）而不是覆盖/随机写，大多数读取操作是顺序读 （1 MB 或更多）
&lt;ul&gt;
&lt;li&gt;所以系统必须有良好的并发追加操作的语义&lt;/li&gt;
&lt;li&gt;工作负载通常是批处理任务，所以高吞吐量比低延时重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时设计应用和文件系统 API 有利于整个系统的灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="架构"&gt;架构&lt;/h2&gt;
&lt;p&gt;&lt;img src="./image-20230901145431686.png" alt="image-20230901145431686"&gt;&lt;/p&gt;
&lt;p&gt;GFS 采用 Master/Slave 架构，集群中存在一个 master 和多个 chunkservers，并且被多个 clients 访问。（由于单 master 的存在，GFS 存在单点故障的可能性，虽然 master 同样有备份，但恢复可能需要人工干预）一个文件将被分割成多个 chunk。chunk 的特性如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定大小，Google 的选择是 64 MB，这么大的 chunk 将有如下好处：
&lt;ul&gt;
&lt;li&gt;减少 client 和 master 的通信，因为在获取到 chunk 的信息后，client 只需要和 chunkserver 交互进行读写&lt;/li&gt;
&lt;li&gt;减少 metadata 的尺寸，以便所有 metadata 可以保存在内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作为一个普通的 Linux 文件存储在 chunkserver 上&lt;/li&gt;
&lt;li&gt;每个 chunk 由一个不可变的、唯一的 64 位 chunk handle 标记，其由 master 在 chunk 创建时指定
&lt;ul&gt;
&lt;li&gt;chunkserver 根据 chunk handle 和偏移（byte range）来读写 chunk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为了可靠性，每个 chunk 会被复制到多个 chunkservers 上 （通常为三个）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;master 管理了所有的元数据，用 Go 代码大概表示为：&lt;/p&gt;</description></item><item><title>神秘的自动关闭显示器失效问题</title><link>https://blog.coherence.codes/posts/2023/%E7%A5%9E%E7%A7%98%E7%9A%84%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%98%BE%E7%A4%BA%E5%99%A8%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/%E7%A5%9E%E7%A7%98%E7%9A%84%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%98%BE%E7%A4%BA%E5%99%A8%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="问题"&gt;问题&lt;/h2&gt;
&lt;p&gt;我的桌面环境为 KDE/X11，我在 KDE 的 Power Management 设置中设置了 &lt;code&gt;Screen Energy Saving: Switch off after 5 min&lt;/code&gt;，这个选项时不时地出问题，表现为刚开机时能够正常工作，在闲置五分钟后关闭显示器，但在一段时间过后就不行了，这个一段时间可长可短。重启电脑又能重新工作，而锁屏后也能够正常工作。这个问题从我用 KDE 开始就一直困扰着我，时至今日。&lt;/p&gt;
&lt;h2 id="排查"&gt;排查&lt;/h2&gt;
&lt;p&gt;KDE 的电源管理由 powerdevil 控制，其作为 &lt;code&gt;plasma-powerdevil.service&lt;/code&gt; 用户服务运行，查询日志发现有一些神秘的 &lt;code&gt;org_kde_powerdevil[1310]: QObject::disconnect: Unexpected nullptr parameter&lt;/code&gt; 报错，之后证实该报错与本问题无关。&lt;/p&gt;
&lt;p&gt;查看该 &lt;code&gt;.service&lt;/code&gt; 文件发现其使用 &lt;code&gt;Type=dbus&lt;/code&gt; 的启动类型，并且获得了一个叫 &lt;code&gt;org.kde.Solid.PowerManagement&lt;/code&gt; 的 bus name。用 QBBusViewer 可以看到 powerdevil 还提供了 &lt;code&gt;org.freedesktop.PowerManagement&lt;/code&gt; 这一服务。&lt;/p&gt;
&lt;p&gt;查阅 powerdevil 源码以 &lt;code&gt;Switch off after&lt;/code&gt; 为关键词进行搜索可发现相关逻辑位于 &lt;code&gt;daemon/actions/bundled/dpms.cpp&lt;/code&gt; 文件下，根据名字猜测 dpms 即 Display Power Management Signaling 的缩写。简单看了一下 dpms，这是一个古老的协议，在 1993 年发布，定义了四种模式，但 &lt;a href="https://wiki.archlinux.org/title/Display_Power_Management_Signaling"&gt;archwiki 上&lt;/a&gt;指出：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that DPMS was developed for CRT monitors, and on LCD displays, there is normally no difference between the standby, suspend and off modes.&lt;/p&gt;</description></item><item><title>强制 chromium 使用浅色模式</title><link>https://blog.coherence.codes/posts/2023/%E5%BC%BA%E5%88%B6-chromium-%E4%BD%BF%E7%94%A8%E6%B5%85%E8%89%B2%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/%E5%BC%BA%E5%88%B6-chromium-%E4%BD%BF%E7%94%A8%E6%B5%85%E8%89%B2%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h2 id="问题"&gt;问题&lt;/h2&gt;
&lt;p&gt;从前两年开始深色模式大行其道，以至于现在几乎找不到一个不支持深色模式的网站了。各大主流浏览器几乎都在两三年前就支持了 CSS 的 &lt;code&gt;prefers-color-scheme&lt;/code&gt; 媒体查询，从而根据系统/浏览器的主题来自动切换浅/深色模式。在浏览器控制台中使用 &lt;code&gt;window.matchMedia('(prefers-color-scheme: dark)').matches&lt;/code&gt; 即可测试这一 feature。&lt;/p&gt;
&lt;p&gt;我在系统中（KDE, Archlinux）使用深色模式，但我又并不喜欢大多数网站的深色模式，但是许多网站都使用了上述媒体查询来自动切换，导致很多情况下我进入一个网站后第一件事就是把浅色模式给切回来。在 Firefox/Edge 中浏览器设置便提供了深/浅色主题的切换选项，这一选项也是和上述媒体查询绑定的，然而不幸的是，chromium 并没有提供这一选项。&lt;/p&gt;
&lt;h2 id="尝试"&gt;尝试&lt;/h2&gt;
&lt;p&gt;根据&lt;a href="https://superuser.com/questions/1430098/force-light-mode-in-google-chrome"&gt;这个问题&lt;/a&gt;，我尝试安装了一个浅色主题，或者把 theme color 改成浅色，都没有作用。&lt;/p&gt;
&lt;p&gt;那 flags 呢？&lt;code&gt;#enable-force-dark&lt;/code&gt; 提供了强制开启深色模式的选项，但是我在 &lt;code&gt;chrome://flags&lt;/code&gt; 中将其设置为 disabled 之后，并没有发生什么。&lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1046660"&gt;Issue 1046660: Allow users to force web content light/dark mode independent of system setting&lt;/a&gt; 中同样提到设置 &lt;code&gt;#enable-force-dark&lt;/code&gt; 为 disabled 将会被忽略。这个 Issue 应该是最贴近我的需求的一个 issue，然而目前还是 open 状态，距离实现遥遥无期。&lt;/p&gt;
&lt;p&gt;另有一个 command line options &lt;code&gt;--disable-features=WebUIDarkMode&lt;/code&gt;，然而遗憾的是这个 option 仅针对 chromium UI, 对 web page 没有作用。&lt;/p&gt;
&lt;p&gt;就在不久之前，chromium 还不支持随系统的深色模式来切换自己的深色模式（见 &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=998903"&gt;Issue 998903: XDG Desktop Portal &amp;ldquo;Prefer dark appearance&amp;rdquo; does not affect prefers-color-scheme media query&lt;/a&gt;），这一 feature 是在四月份实现的，并在 114 中发布。从相应的 &lt;a href="https://chromium-review.googlesource.com/c/chromium/src/+/4375982"&gt;revision&lt;/a&gt; 中，我们可以发现 chromium 首先会通过 dbus 和 xdg-desktop-portal 交互，读取 &lt;code&gt;org.freedesktop.appearance&lt;/code&gt; namespace 下的 &lt;code&gt;color-scheme&lt;/code&gt; 字段。根据 &lt;a href="https://flatpak.github.io/xdg-desktop-portal/#gdbus-org.freedesktop.portal.Settings"&gt;portal 的定义&lt;/a&gt; 返回值是 1 则偏好深色外观，返回值是 2 则偏好浅色外观。并且这一 revision 中说：&lt;/p&gt;</description></item><item><title>Kubernetes 生态中的航海隐喻</title><link>https://blog.coherence.codes/posts/2023/kubernetes-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E8%88%AA%E6%B5%B7%E9%9A%90%E5%96%BB/</link><pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/kubernetes-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E8%88%AA%E6%B5%B7%E9%9A%90%E5%96%BB/</guid><description>&lt;blockquote&gt;
&lt;p&gt;Disclaimer: 本文的结论大多是根据名字推断出来的，并没有得到项目开发者的证实。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kubernetes 在 2014 年 9 月发布，在这之前 Docker 已经大行其道了。Docker 发布于 2013 年，意为码头工人，其 logo 是个鲸鱼驮着一些集装箱。&lt;/p&gt;
&lt;p&gt;&lt;img src="./610px-Docker_(container_engine)_logo.svg.png" alt="File:Docker (container engine) logo.svg"&gt;&lt;/p&gt;
&lt;p&gt;后来这个 Logo 又变得扁平了一点：&lt;/p&gt;
&lt;p&gt;&lt;img src="./512px-Docker_logo.svg.png" alt="File:Docker logo.svg"&gt;&lt;/p&gt;
&lt;p&gt;很显然这个名字和和 Logo 都与集装箱（container，即容器）有关。&lt;/p&gt;
&lt;p&gt;Kubernetes 这个名字来源于古希腊语 κυβερνήτης，意为舵手（steersman）/领航员（pilot）/船长（captain）。其 logo 是一个舵轮的形状。身为一个容器编排系统，Kubernetes 负责着一艘船的航向，倒也合理。&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://blog.coherence.codes/posts/2023/kubernetes-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E8%88%AA%E6%B5%B7%E9%9A%90%E5%96%BB/617px-Kubernetes_logo_without_workmark.svg.png" width="200px"&gt;
&lt;/figure&gt;

&lt;p&gt;值得一提是和 Kubernetes 共享词源 κυβερνήτης 的还有 governor（州长/统治者/主管）和 cybernetics（控制论）。&lt;/p&gt;
&lt;p&gt;Helm 官方的 slogan 是 Kubernetes 的包管理器，helm 意为舵轮，logo 和 Kubernetes 类似，也是一个舵轮的形状。&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://blog.coherence.codes/posts/2023/kubernetes-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E8%88%AA%E6%B5%B7%E9%9A%90%E5%96%BB/helm.svg" width="200px"&gt;
&lt;/figure&gt;

&lt;p&gt;在 Helm 2 时代，helm 还需要一个部署在集群内的组件 tiller 才能工作。tiller 似乎是舵柄的意思，它和舵直接相连。下图展示了一个舵柄和舵轮的区别：&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://blog.coherence.codes/posts/2023/kubernetes-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E8%88%AA%E6%B5%B7%E9%9A%90%E5%96%BB/1280px-Tiller_and_helm_orders.svg.png" width="300px"&gt;
&lt;/figure&gt;

&lt;p&gt;Argo 项目包含了 CD/Workflows/Rollouts 等一系列项目，总体是和应用交付、CI/CD 相关。在希腊神话中，Argo （阿尔戈号）是一艘船，由伊阿宋等希腊英雄在雅典娜帮助下建成，众英雄乘该船取得金羊毛。此后阿尔戈号作为进献雅典娜的祭品被焚毁，南船座（Argo Navis, or simply Argo）由此而来。Navis 词源为古希腊语，意为船（ship）。但是 Argo 的 logo （应该？）是一只章鱼，很奇怪的联系..&lt;/p&gt;</description></item><item><title>博客里应该写什么</title><link>https://blog.coherence.codes/posts/2023/%E5%8D%9A%E5%AE%A2%E9%87%8C%E5%BA%94%E8%AF%A5%E5%86%99%E4%BB%80%E4%B9%88/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/%E5%8D%9A%E5%AE%A2%E9%87%8C%E5%BA%94%E8%AF%A5%E5%86%99%E4%BB%80%E4%B9%88/</guid><description>&lt;p&gt;我的 Chrome 有一个插件叫 &lt;a href="https://www.one-tab.com/"&gt;Onetab&lt;/a&gt;，本意是用来放一些稍后阅读的标签页。但是稍后阅读这种东西，最终都会转变成垃圾桶，标签越积越多。随着我的几次设备/系统更替（比如从我的老暗影精灵到 deskmini），迁移来迁移去很多上古标签页居然没丢.&lt;/p&gt;
&lt;p&gt;今天在 Onetab 里翻找找到了&lt;a href="https://pureage.info/2014/08/25/hiding-302-using-proxy-pass.html"&gt;用 proxy_intercept_errors 和 recursive_error_pages 代理多次 302&lt;/a&gt; 这样一篇文章。文章本身讲的是 nginx 用于反代时如何 follow 上游的 302 的问题，这是一篇普通的技术博客。但是翻看他的博客，却有很多生活随想，日记游记之类的内容。篇幅也长短不一，最短的寥寥一两句话。而翻看我自己的博客，合计三十一篇博文，其中（质量很低的）技术博文占了绝大多数。我不禁有些感慨，写博客究竟是为了什么。是为了在面试时多一个展现自己的方面，还是仅仅是作为一个写作的平台，无所约束地抒发自己的心情？&lt;/p&gt;
&lt;p&gt;还记得我的博客刚搭起来的时候，我写过一篇&lt;a href="https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"&gt;我为什么选择了独立博客&lt;/a&gt;，内容是瞎扯的，但是最后一句话「庞大的互联网中的一方天地」我倒是现在也很认同。&lt;/p&gt;</description></item><item><title>IPv6 配置入门</title><link>https://blog.coherence.codes/posts/2023/ipv6-%E9%85%8D%E7%BD%AE%E5%85%A5%E9%97%A8/</link><pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2023/ipv6-%E9%85%8D%E7%BD%AE%E5%85%A5%E9%97%A8/</guid><description>&lt;h2 id="背景知识"&gt;背景知识&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8200"&gt;RFC 8200 (Internet Protocol, Version 6 (IPv6) Specification)&lt;/a&gt; 为最新的 IPv6 标准. 主要描述了头部 (Header) 定义, 拓展头部和选项定义等.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc7084"&gt;RFC 7084 (IPv6 CE Router Requirements)&lt;/a&gt; 定义了家用或小型办公室路由器 (IPv6 Customer Edge Routers) 配置的基本要求. OpenWrt 的配置文档遵循了这一 RFC.&lt;/p&gt;
&lt;p&gt;RFC 4861 (IPv6 Neighbor Discovery) 定义了一种网络发现机制, 等效与 IPv4 中的 ARP. 下述的两种机制均依赖于 ND.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc4862"&gt;RFC 4862 (IPv6 Stateless Address Autoconfiguration, SLAAC)&lt;/a&gt; 定义了一种无状态配置地址的机制. &lt;a href="https://datatracker.ietf.org/doc/html/rfc8415"&gt;RFC 8415 (Dynamic Host Configuration Protocol for IPv6 (DHCPv6))&lt;/a&gt; 定义了一种配置 IP 地址和前缀的机制. DHCPv6 可以替代 SLAAC 或和 SLAAC 一起工作.&lt;/p&gt;
&lt;p&gt;本文并不是一篇针对 IPv6 的详尽介绍, 而只是对家用 IPv6 配置过程中的一些机制作了阐述. 在最后分享了几个 IPv6 问题排查的例子.&lt;/p&gt;</description></item><item><title>Hello, Hugo!</title><link>https://blog.coherence.codes/posts/2022/hello_hugo/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2022/hello_hugo/</guid><description>&lt;p&gt;这是一个船新的博客！&lt;/p&gt;
&lt;h2 id="历史"&gt;历史&lt;/h2&gt;
&lt;p&gt;在大二（2018）的时候，我萌生了搭建一个自己的独立博客的想法，于是就有了 &lt;a href="https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/"&gt;hexo搭建小记&lt;/a&gt;，当时我随手一找找到的基本都是 Hexo，于是我就用了。引用一段当时写的关于页面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id="关于博客"&gt;关于博客&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-02-08 迁移到 pelican, 打算自己写个主题, 待填坑&lt;/li&gt;
&lt;li&gt;2020-03-26 更新 Hexo 至 4.2.0，启用 hexo-generator-sitemap 插件&lt;/li&gt;
&lt;li&gt;2020-02-22 更改评论为 &lt;code&gt;disqusjs&lt;/code&gt;，详见作者的&lt;a href="https://blog.skk.moe/post/disqusjs/"&gt;博文&lt;/a&gt;；启用 &lt;a href="https://github.com/theme-next/theme-next-pjax"&gt;pjax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2019-12-24 启用新域名&lt;code&gt;blog.coherence.codes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2019-10-07 升级主题至 Next V7.4.1&lt;/li&gt;
&lt;li&gt;2018-09-24 第一篇博文。采用 Hexo + NexT 主题， 部署于 Github Pages。搭建过程见{% post_link Hexo搭建小记 这篇文章 %}&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;Next 就是一个非常大众的主题，有几种变体，我用的是一个叫 &lt;code&gt;pisces&lt;/code&gt; 的变体，长这样（原博客图已经找不到了，只能用官方 Demo 凑数了）：&lt;/p&gt;
&lt;p&gt;&lt;img src="image-20221002165030564.png" alt="image-20221002165030564"&gt;&lt;/p&gt;
&lt;p&gt;这一时期的博客位于 &lt;a href="https://github.com/cjc7373/cjc7373.github.io/tree/source/source"&gt;source 分支&lt;/a&gt;，最后更新于 2020-04-16。&lt;/p&gt;
&lt;p&gt;由于这个主题实在是太大众了，中途（2019-10 左右）我也想过换一个主题（&lt;a href="https://github.com/yscoder/hexo-theme-indigo"&gt;hexo-theme-indigo&lt;/a&gt;，一个 Material Design 风格的主题），但是没有配置成功，&lt;a href="https://github.com/cjc7373/cjc7373.github.io/tree/theme-indigo"&gt;theme-indigo 分支&lt;/a&gt;便是那次尝试。theme-indigo 的效果图长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src="image-20221002165819783.png" alt="image-20221002165819783"&gt;&lt;/p&gt;
&lt;p&gt;到了 21 年 2 月，我开始重新调研博客生成器，当时看到了一个 Python 写的 Pelican，而我又希望壮大一下 Python 生态，于是就用了。用了之后发现并没有什么合适的主题，恰巧 Pelican 用的模板引擎 Jinja 和 Django Template Engine 很像，我比较熟悉，于是我就想自己写一个主题，然而这一工作从没开始过.. 于是我现在的博客是这样的（&lt;del&gt;极简主义&lt;/del&gt;）：&lt;/p&gt;</description></item><item><title>The 2022 Python Language Summit</title><link>https://blog.coherence.codes/posts/2022/the-2022-python-language-summit/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2022/the-2022-python-language-summit/</guid><description>&lt;p&gt;每年, 在 PyCon US 的前夕, 30 多位 Python 的核心开发者将会聚集起来召开 Python 语言峰会. 今年的会议在 5/11 召开, 让我们来看看今年讨论了什么吧. 有关会议的详情可在 &lt;a href="https://pyfound.blogspot.com/2022/05/the-2022-python-language-summit_01678898482.html"&gt;PSF Blog&lt;/a&gt; 中找到.&lt;/p&gt;
&lt;h2 id="cpython-的-issue-和-pr-积压"&gt;CPython 的 issue 和 PR 积压&lt;/h2&gt;
&lt;p&gt;首先祝贺一下前不久 &lt;a href="https://bugs.python.org"&gt;bpo&lt;/a&gt; 正式退休了, Python 的 issue tracker 迁移到了 Github, 无论是易用性还是审美上来说都是一件好事.&lt;/p&gt;
&lt;p&gt;随着 Python 的流行, issues 和 PRs 也开始累积起来了, 在 2022/05/07 时, CPython 有着 7,027 个 open issues 和 1,471 个 PRs. Python 开发者们向来对关闭一个 issue 持谨慎态度. 以低质量的功能请求 (feature requests) 为例, 我们可以粗略地把它们分为三类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有任何意义的, 或显然有不利影响的, 它们能被轻易地关闭&lt;/li&gt;
&lt;li&gt;会增加维护成本, 但似乎有点好处的, 对于它们的意见通常会很摇摆&lt;/li&gt;
&lt;li&gt;每个人都觉得是好的, 但没人愿意真正去实现它.. 这些 issues 通常会存在很久, 如 &lt;a href="https://github.com/python/cpython/issues/36387"&gt;BPO-539907&lt;/a&gt;, 一个存在了二十年的 issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者 Katriel 认为, 把这些 issues 留在 issue tracker 上是有害的, 增加了整个项目的维护成本. 有关这一论断, 一种极端的做法是关闭所有不活跃的 issues, 当然这是不可取的, 可以参看 &lt;a href="https://drewdevault.com/2021/10/26/stalebot.html"&gt;GitHub stale bot considered harmful&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>民族主义自媒体是如何消费我们的</title><link>https://blog.coherence.codes/posts/2022/%E6%B0%91%E6%97%8F%E4%B8%BB%E4%B9%89%E8%87%AA%E5%AA%92%E4%BD%93%E6%98%AF%E5%A6%82%E4%BD%95%E6%B6%88%E8%B4%B9%E6%88%91%E4%BB%AC%E7%9A%84/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2022/%E6%B0%91%E6%97%8F%E4%B8%BB%E4%B9%89%E8%87%AA%E5%AA%92%E4%BD%93%E6%98%AF%E5%A6%82%E4%BD%95%E6%B6%88%E8%B4%B9%E6%88%91%E4%BB%AC%E7%9A%84/</guid><description>&lt;p&gt;目前的中文互联网上存在着大量的鼓吹民族主义, 制造中西方对立的自媒体, 令人震惊的是, 他们中大部分不但充斥着情绪输出, 甚至连大部分事实都是错误的. 我偶然间读到了这样的一篇文章, 并对其中列出的事实进行了查证, 然后感觉我的智商受到了侮辱..&lt;/p&gt;
&lt;p&gt;原文: &lt;a href="https://www.zhihu.com/question/428451991/answer/2431916538"&gt;西方媒体是怎样给西方人洗脑的？ - 远方青木的回答 - 知乎&lt;/a&gt;, &lt;a href="http://web.archive.org/web/20220429053052/https://www.zhihu.com/question/428451991/answer/2431916538"&gt;archive&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;这几年欧美一直在向中国发动舆论战，我见过最离谱的一个理论甚至说什么“中国人每吃一口肉，亚马逊热带雨林就会冒出一缕白烟”。&lt;/p&gt;
&lt;p&gt;我本以为这套歪理邪说就是欧美造谣生事的想象力极限，没想到欧美的底线可以永无止尽的被突破。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;来源: &lt;a href="https://www.nytimes.com/2020/01/07/business/fake-pork-china.html"&gt;纽约时报 中国人会购买人造肉吗？&lt;/a&gt;, 另见&lt;a href="https://world.huanqiu.com/article/9CaKrnKoNzC"&gt;环球网报道&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;评论: 虽然文章很有&amp;quot;反华&amp;quot;的倾向性, 但文章主要讲的是人造肉在中国难以推广. 肉类消费对于气候的影响是不争的事实. 所以&amp;quot;中国人每吃一口肉，亚马逊热带雨林就会冒出一缕白烟&amp;quot;这句话也不能算错, 但应该把主语换成全世界人.
要求中国牺牲国民营养而减少肉类消费是不合理的, 但是推广人造肉是合理的. 作者在这里显然有断章取义之嫌.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;《&lt;a href="https://web.archive.org/web/20220429053052mp_/https://www.zhihu.com/search?q=%E5%8D%8E%E7%9B%9B%E9%A1%BF%E9%82%AE%E6%8A%A5&amp;amp;search_source=Entity&amp;amp;hybrid_search_source=Entity&amp;amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2431916538%7D"&gt;华盛顿邮报&lt;/a&gt;》在报道中声称**“中国每年强迫种植数亿棵新树”，这简直是在“犯罪”！**&lt;/p&gt;
&lt;p&gt;&lt;img src="./e577e26ef47585f1faae27fb45123efd.png" alt="e577e26ef47585f1faae27fb45123efd.png"&gt;&lt;/p&gt;
&lt;p&gt;我捋一捋他们的思路，&lt;strong&gt;大概意思就是说中国每年种数亿棵新树，但把这些新树种下去之前并没有征求这些树的同意，这数亿棵树是“不一定同意自己被种植”的，但全部被中国强迫种在地里了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，中国侵犯了树“自由被种植”的权力，强迫树木劳动，这属于犯罪，因此中国需要反思自己这种野蛮的行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;逻辑好像有那么一点点道理哦，但我怎么就觉得那么奇怪和荒谬呢。&lt;/p&gt;
&lt;p&gt;中国人种树怎么了？&lt;/p&gt;
&lt;p&gt;种树不是在保护环境吗？&lt;/p&gt;
&lt;p&gt;怎么拐了一圈之后种树居然成犯罪行为了？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;来源: 没有找到来源.&lt;/p&gt;
&lt;p&gt;评论: 据 &lt;a href="https://checkyourfact.com/2022/04/18/fact-check-washington-post-china-trees-article/"&gt;checkyourfact&lt;/a&gt;, 该截图为杜撰, 最初流传于 Facebook 和 Twitter.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;更荒谬的是，同一家西方媒体，前几年报道中国的标题是**《中国对一次性筷子的成瘾正在摧毁森林》。**&lt;/p&gt;
&lt;p&gt;首先，一次性筷子不是用森林做出来的，一次性筷子的主要原料是一个月能长3米的竹子，以及速生经济林的边角废木料。&lt;/p&gt;
&lt;p&gt;用森林里的好木头确实可以做一次性筷子，但没人这么做，因为成本太高商家会亏本，只有速生林边角废料和竹子的低廉价格才能让商家赚到钱。&lt;/p&gt;
&lt;p&gt;其次，抛开筷子的真实原材料不谈，这家西方媒体的主要立场好像也是森林是宝贵的，森林对人类有益，并以此来指责中国。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;既然如此，为什么中国种植森林也能被指责一番。是不是中国人干什么都不行，连呼吸都是错的？&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;来源: &lt;a href="https://www.washingtonpost.com/news/worldviews/wp/2013/03/14/chinas-disposable-chopstick-addiction-is-destroying-its-forests/"&gt;华盛顿邮报《中国对一次性筷子的成瘾正在摧毁森林》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;评论: 华盛顿邮报 2013 年的报道, 主要援引的是时任吉林森工集团董事长柏广新的一句话: &amp;ldquo;我国每年生产800亿双一次性筷子，相当于要砍伐2000万棵生长20年的大树&amp;rdquo;. &lt;a href="http://www.gov.cn/2013lh/content_2349497.htm"&gt;中国政府网&lt;/a&gt;和&lt;a href="http://cpc.people.com.cn/pinglun/n/2013/0312/c78779-20759994.html"&gt;光明网&lt;/a&gt;均能找到这句话以及相关对一次性筷子的批评. 报道中均指出了木头和竹子均是一次性筷子的原料.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;几年前，欧美媒体报道说根据科学家的研究，中国人种植水稻会产生更多的温室气体，因此中国人吃大米正在毁灭全球气候，进而导致人类灭亡。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;来源: 我都不知道怎么找..&lt;/p&gt;
&lt;p&gt;评论: 类似的研究肯定有, 但我不觉得哪家媒体会报道吃大米导致人类灭亡&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;2019年，国际顶级科学期刊《自然》杂志发表了一篇文章，说根据科学家的研究成果，中国政府治理沙漠，大力推进的荒漠绿化工程，种树过多，可能导致人类水资源枯竭，因此会对地球自然生态造成极大影响。&lt;/p&gt;
&lt;p&gt;《自然》杂志本是人类最顶级的科学杂志，但写这篇文章的“科学家”逻辑推导却很简单，算一算中国政府要消灭荒漠需要种多少棵树，种这些树需要消耗多少水资源，&lt;strong&gt;因此得出结论中国种树会破坏自然环境。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;别笑，这是真事。&lt;/p&gt;</description></item><item><title>我的手机变迁史</title><link>https://blog.coherence.codes/posts/2022/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E5%8F%98%E8%BF%81%E5%8F%B2/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2022/%E6%88%91%E7%9A%84%E6%89%8B%E6%9C%BA%E5%8F%98%E8%BF%81%E5%8F%B2/</guid><description>&lt;p&gt;本文纯属回忆, 描述可能会有偏差.&lt;/p&gt;
&lt;p&gt;小学时, 为方便联系, 我爸给了我一个 ZTE 的功能机, 里面只有一个打砖块的小游戏.&lt;/p&gt;
&lt;p&gt;后来这手机被我在路上掉了, 于是我换成了一个 LG 的功能机. 这个 LG 的神奇之处在于它自带了一个浏览器, 于是我可以用 2G 上网去起点, 纵横看小说. 另外它自带电信的一个应用商店, 里面有一些免费的小游戏可以下 (不知道是啥技术, 估计是 java..), 因为我当时并没有流量套餐, 后来还因为话费异常被我爸查到并追问我在上网干什么, 我记得我用看新闻蒙混过去了. 这个手机陪伴我度过了初中.&lt;/p&gt;
&lt;p&gt;考上省中后, 爸妈为了奖励我, 给我换了个新手机, 这时我爸被中国电信忽悠买了个酷派 K1 (酷派 5952).&lt;/p&gt;
&lt;p&gt;&lt;img src="./eaf7170a1d32cc48175600e65db56628.png" alt="eaf7170a1d32cc48175600e65db56628.png"&gt;&lt;/p&gt;
&lt;p&gt;这也算是当时第一批 4G 手机了, 进网贴纸贴的还是进网试用. 但是 1G 的内存根本比不过同期的小米 2S.&lt;/p&gt;
&lt;p&gt;后来因为我忘了什么原因了我又买了个手机, 这个给我爸用. 听信了当时中华酷联的鬼话我又入了酷派的坑 (加之当时电信手机确实不好买), 买了酷派大神 F1 电信版 (酷派 8297-C00).&lt;/p&gt;
&lt;p&gt;&lt;img src="image-20221002163705814.png" alt="image-20221002163705814"&gt;&lt;/p&gt;
&lt;p&gt;它采用了&amp;quot;极为先进&amp;quot;的 64 位高通 410 SoC (据称是高通首款 64 位), 对, 我又听信了 Android 5.0 优化 (ART, Android Runtime) 和 64 位的鬼话, 买了这个 1G RAM 的手机.
事实上出厂系统还是 4.4, 32 位. 于是我天天去酷派论坛蹲, 还真蹲到了 64 位的 5.0. 但事实上硬件的局限在那, 提升并没有那么大.
于是当时整天折腾各种 ROM, 各种优化. 在那个我 root 还靠各种一键 root app 的年代, 很难想象我都在优化什么.&lt;/p&gt;</description></item><item><title>我为什么选择在 Surface 上使用 Windows</title><link>https://blog.coherence.codes/posts/2022/surface_on_linux/</link><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2022/surface_on_linux/</guid><description>&lt;p&gt;自从购置 Surface Pro 7 以来, 曾数次不满于 Windows 的包管理, 遥测, Windows Defender 等方面. 然更换了 Linux 之后并没有一个太好的使用体验. 本文记录了 Surface Pro 7 在 Archlinux 上的体验.&lt;/p&gt;
&lt;p&gt;在 2021 年七月某日, 手贱尝试了一下 Windows 11 Preview (印象里是公开发布的第一版) 之后, 感叹于 Bug 之多, 奈何回滚需要重新安装 Windows, 于是一气之下装了 Archlinux.&lt;/p&gt;
&lt;p&gt;&lt;img src="./8a7b6609572d402bb2b747b706ef0c62.png" alt="img"&gt;(此处附使用截图一张)&lt;/p&gt;
&lt;p&gt;在使用了近半年之后, 再次感叹, 微软自家的产品在 Linux 上体验真的不好.. 又萌生了换回 Windows 的想法.&lt;/p&gt;
&lt;p&gt;具体而言, 有以下几个方面. 首先, Connected standby 在 Windows 下工作地很好, 然而在 Linux 下待机的耗电非常显著, 大概一晚上能掉一半电的那种. 于是后来发现了 suspend-then-hibernate 这个策略, 理论上还算可以接受. 然其有个非常严重的 Bug, 有时候其不能够成功地进入休眠状态, 导致第二天早上起来的时候 Surface 直接没电了. 而且这个问题出现频率比较高, 大概十次待机中有两三次, 非常影响使用体验. 在电量不足 10% 内核的频率调度会非常激进, 基本只能维持在 1.5G (即使电源已连接), 这时候系统会非常卡, 进一步导致了开机后仍有十多分钟的不可用状态. 这个 Bug 是我想换回 Windows 的直接原因.&lt;/p&gt;</description></item><item><title>我的第一个 Archlinux 包</title><link>https://blog.coherence.codes/posts/2021/my_first_archlinux_package/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/my_first_archlinux_package/</guid><description>&lt;p&gt;记录一下打包过程. 本文为一篇本成品博文, 笔者写了一半鸽了.&lt;/p&gt;
&lt;p&gt;Archwiki 给人的感觉还是有点零碎了.. 与打包相关的条目大概有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Creating_packages"&gt;Creating packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Arch_package_guidelines"&gt;Arch package guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Makepkg"&gt;makepkg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/PKGBUILD"&gt;PKGBUILD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/AUR_submission_guidelines"&gt;AUR submission guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Arch_Build_System"&gt;Arch Build System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好吧, 这可能就是 Wiki 的组织形式, 但对新手来说确实不友好. 另外 makepkg 和 PKGBUILD 的 man 文档也是很有用的.&lt;/p&gt;
&lt;h2 id="概览"&gt;概览&lt;/h2&gt;
&lt;p&gt;ABS 是一个 &lt;a href="https://en.wikipedia.org/wiki/Ports_collection"&gt;ports&lt;/a&gt;-like 构建系统, 其打包的主要工具为 makepkg, 根据当前目录下的 PKGBUILD 打包. 据说是比 Debian 系的打包容易不少.&lt;/p&gt;
&lt;h2 id="打包"&gt;打包&lt;/h2&gt;
&lt;p&gt;首先 makepkg 会下载 source 变量中指定的文件列表, 它们可以是一个 URL, 一个 git 仓库, 或一个在当前目录下的文件. makepkg 会校验文件的哈希并解压到以文件名命名的目录. 可用 &lt;code&gt;-g, --geninteg&lt;/code&gt; 命令来下载文件并生成哈希. 注意 VCS 的 source 是没有哈希的.&lt;/p&gt;
&lt;p&gt;事实上看一看每种语言对应的 guidelines 是非常有用的.&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211208122231668.png" alt="image-20211208122231668"&gt;&lt;/p&gt;</description></item><item><title>Hackergame 2021 write-up</title><link>https://blog.coherence.codes/posts/2021/hackergame_2021_writeup/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/hackergame_2021_writeup/</guid><description>&lt;p&gt;记录一下比赛期间踩到的坑.&lt;/p&gt;
&lt;h2 id="签到"&gt;签到&lt;/h2&gt;
&lt;p&gt;开始完全没有读题直接进题目, 然后想了半天没思路并随机测试了一些数.. 直到我读了题..&lt;/p&gt;
&lt;h2 id="进制十六参上"&gt;进制十六——参上&lt;/h2&gt;
&lt;p&gt;显然, 大家都知道怎么编辑十六进制, 然而我并不想手输这么多文本, 于是 Google 在线 OCR, 结果 OCR 的内容有部分是错的.. 被迫找同学要了一份 OCR 结果.&lt;/p&gt;
&lt;h2 id="去吧追寻自由的电波"&gt;去吧！追寻自由的电波&lt;/h2&gt;
&lt;p&gt;直接 Google ffmepg 音频速度. 然而很多结果给的一个过滤器是不改变音调的方案, 后来发现直接改采样率就行了..&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;cjc@coherence hackergame_2021&lt;span style="color:#f92672"&gt;]&lt;/span&gt;$ file radio.mp3 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;radio.mp3: Audio file with ID3 version 2.4.0, contains: MPEG ADTS, layer III, v1, &lt;span style="color:#ae81ff"&gt;128&lt;/span&gt; kbps, &lt;span style="color:#ae81ff"&gt;48&lt;/span&gt; kHz, Stereo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;cjc@coherence hackergame_2021&lt;span style="color:#f92672"&gt;]&lt;/span&gt;$ ffmpeg -i radio.mp3 -af &lt;span style="color:#e6db74"&gt;&amp;#34;asetrate=16000&amp;#34;&lt;/span&gt; radio_output.mp3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令来自&lt;a href="http://johnriselvato.com/ffmpeg-how-to-change-the-pitch-sample-rate-of-an-audio-track-mp3/"&gt;这里&lt;/a&gt;, 虽然我根本没有看这篇文章..&lt;/p&gt;
&lt;h2 id="猫咪问答-pro-max"&gt;猫咪问答 Pro Max&lt;/h2&gt;
&lt;p&gt;没错, 被第二题坑了.. 以为是第四题不对, 于是写了个暴力跑了几万次..&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20211030151026284.png" alt="image-20211030151026284"&gt;&lt;/p&gt;
&lt;p&gt;提示: 这是一个提示.&lt;/p&gt;
&lt;h2 id="卖瓜"&gt;卖瓜&lt;/h2&gt;
&lt;p&gt;已经被同学提示了这是个 PHP 溢出问题.. 甚至都找到了 (同学给的) &lt;a href="https://www.php.net/manual/zh/language.types.integer.php#125251"&gt;PHP 文档中的一条评论 (甚至题解也给了这个)&lt;/a&gt;, 但是并不知道怎么做.. 于是用 &lt;code&gt;b1=2**63//6+n&lt;/code&gt; (n 为 -10~10 之间的一个随机数) 瞎试做出来了.&lt;/p&gt;</description></item><item><title>2020年终总结&amp;2021展望</title><link>https://blog.coherence.codes/posts/2021/2020summary_2021plan/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/2020summary_2021plan/</guid><description>&lt;p&gt;又到了传统艺能&lt;del&gt;年终&lt;/del&gt;年初总结时间, 在一天鸽一天的情况之下, 今天已经是正月十四了..&lt;/p&gt;
&lt;h2 id="2020-总结"&gt;2020 总结&lt;/h2&gt;
&lt;p&gt;一句话总结的话, 知识的广度提升了, 深度还不够, 学习状态仍旧不能让自己满意. 以及这一年我始终在担心有没有学上, 找不找得到工作.&lt;/p&gt;
&lt;h3 id="学业"&gt;学业&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于疫情的爆发, 导致了 2020 春季学期完全在家上课, 更加方便摸鱼了(&lt;/p&gt;
&lt;p&gt;一开始港哥在群里说武汉疫情的时候, 我还不觉得这是什么大事, 后来才发现我错得离谱.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二月底到三月初, 陆续投了几个实习, 被拒了几个, 后来决定考研之后, 又鸽了几个&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210225125307219.png" alt="image-20210225125307219"&gt;&lt;/p&gt;
&lt;p&gt;说实话我对以后能不能找到工作还是有点怀疑的..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从三月开始, 断断续续地开始准备考研了, 然而实际上还是不够努力吧, 到考试前一天我还没完全搞懂二次型..&lt;/p&gt;
&lt;p&gt;不过从时间上来说, 暑假之后就全力准备考研了..&lt;/p&gt;
&lt;p&gt;我很想说考研让我变得更沉得下心来学习了, 但事实上这并不是真的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只准备了两三天之后 (因为太晚看到了), 尝试申请了一下 GSoC, 不出意外凉了..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;七月到十月, 参加开源之夏, 也算是赚到了人生的第一桶金吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="玩"&gt;玩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一月, 去滑雪+攀岩, 还是挺有意思的&lt;/li&gt;
&lt;li&gt;二月初, 折腾了一下 Windows 10 on Arm for Lumia 1520, 并没有什么用, 于是继续吃灰&lt;/li&gt;
&lt;li&gt;七月, 乘着沪通铁路的开通, 去上海玩了一次, 居然被我碰到了一次高铁延误..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="环境"&gt;环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二月末, 开始搞 Manjaro, 一开始两个系统都用, 逐渐就只用 Linux 了 (特别是我发现了 proton 和 lutris 之后..)&lt;/li&gt;
&lt;li&gt;三月初, 开始尝试 Typora+第三方云同步&lt;/li&gt;
&lt;li&gt;七月, 从 Onedrive 转向 Syncthing (是不是有一种 Anything can be self-hosted 的趋势呢..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="书"&gt;书&lt;/h3&gt;
&lt;p&gt;本年度仍然没有怎么看书..&lt;/p&gt;</description></item><item><title>Anki 工作流</title><link>https://blog.coherence.codes/posts/2021/anki_workflow/</link><pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2021/anki_workflow/</guid><description>&lt;p&gt;&lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt; 是一个间隔式重复的&amp;quot;闪卡 (flashcard)&amp;ldquo;记忆软件. 下面来谈谈我考研及日常生活中的 Anki 工作流.&lt;/p&gt;
&lt;h2 id="为什么选择-anki"&gt;为什么选择 Anki&lt;/h2&gt;
&lt;p&gt;和市面上其他的记忆软件一样, Anki 也是基于遗忘曲线, 基于间隔式重复这一原理的. 最大的不同在于它是高度自定义的. 自己制作卡组, 设计模板, 甚至编写自己的插件. 还有很多特性例如 Notes 和 Cards 相分离我其实并没有用到.&lt;/p&gt;
&lt;p&gt;其次 Anki 是一款开源软件, 在我希望所有软件都用自由软件替换的如今, 这无疑是一个重要的理由.&lt;/p&gt;
&lt;p&gt;最后它在 Windows, Linux, Android 上都有客户端, 并支持同步. 虽然内置的同步服务器是由 Ankiweb 提供的 (我至今不知道 Ankiweb 和 Anki 的关系以及它是如何运作的), 然而也能够用自建的替换.&lt;/p&gt;
&lt;p&gt;虽然网上能够找到很多已制作好的卡组, 然而这些卡组并不一定适合自己. 以记单词而言, 卡组中的许多卡片都是自己已经熟知的. 况且制卡这个过程本身能够帮助自己记忆. 所以我还是选择了自己构建卡组的方式.&lt;/p&gt;
&lt;h2 id="基础卡片"&gt;基础卡片&lt;/h2&gt;
&lt;p&gt;对于一般的记忆来说, 基础的 Note type 就够用了.. 比如我一开始用 Anki 来提醒我复习新概念英语, 用的是以下的 Note type:&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20210224200941341.png" alt="image-20210224200941341"&gt;&lt;/p&gt;
&lt;p&gt;十分简单.&lt;/p&gt;
&lt;h2 id="考研"&gt;考研&lt;/h2&gt;
&lt;p&gt;考研的时候打算用 Anki 背单词, 于是我做真题的时候碰到不认识的单词记录下来, 然后用 Anki 制卡.&lt;/p&gt;
&lt;p&gt;卡片字段设计和工作流受到了&lt;a href="https://ankiweb.net/shared/info/934622764"&gt;考研英语真题生词&lt;/a&gt;这个卡组的启发.&lt;/p&gt;</description></item><item><title>Codeforces Round 634 (Div. 3) 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/</link><pubDate>Sun, 19 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/codeforces_634_div3/</guid><description>&lt;h2 id="1335a---candies-and-two-sisters"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/A"&gt;1335A - Candies and Two Sisters&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;快乐签到。&lt;/p&gt;
&lt;h2 id="1335b---construct-the-string"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/B"&gt;1335B - Construct the String&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先构造长度为 $a$ 的字符串，然后第 $i+a$ 个字母为第 $i$ 个字母，输出即可。&lt;/p&gt;
&lt;h2 id="1335c---two-teams-composing"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/C"&gt;1335C - Two Teams Composing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2/1 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给 $n$ 个数，每个数有一个值，要求把它们分成数量相同的两组，一组所有的值相等，一组所有的值不等。&lt;/p&gt;
&lt;p&gt;先统计每个值的数量，得出最大个数 $m$，和不同值的数的个数 $l$，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ans = min(l, m) if m &amp;lt; l + 2 else ans = min(l, m) + 1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="1335d---anti-sudoku"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/D"&gt;1335D - Anti-Sudoku&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个求解好的数独，求改动不超过 9 个数，使其每行、列、区块内皆有两个相同的数。&lt;/p&gt;
&lt;p&gt;想了两分钟，发现将所有的 1 替换为 2 即可。&lt;/p&gt;
&lt;h2 id="1335e---three-blocks-palindrome"&gt;&lt;a href="https://codeforces.com/contest/1335/problem/E2"&gt;1335E - Three Blocks Palindrome&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Not Attempted&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Codeforces Round 629 (Div. 3) 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/</link><pubDate>Sun, 12 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/codeforces_629_div3/</guid><description>&lt;p&gt;快乐划水。&lt;/p&gt;
&lt;h2 id="1328a---divisibility-problem"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/A"&gt;1328A - Divisibility Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;快乐签到。&lt;/p&gt;
&lt;h2 id="1328b---k-th-beautiful-string"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/B"&gt;1328B - K-th Beautiful String&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个数n，要求构造一个字符串，包含n-2个a，2个b，且在这个字符串的按字典序的全排列中排在第k个。&lt;/p&gt;
&lt;p&gt;找b的位置即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; _ &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(t):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n, k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; p &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(max(n&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;,k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (p &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; k:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pos2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; (k &lt;span style="color:#f92672"&gt;-&lt;/span&gt; int(((p &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (p &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; pos1 &lt;span style="color:#f92672"&gt;or&lt;/span&gt; i &lt;span style="color:#f92672"&gt;==&lt;/span&gt; pos2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="1328c---ternary-xor"&gt;&lt;a href="https://codeforces.com/contest/1328/problem/C"&gt;1328C - Ternary XOR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给一个三进制数x，求两个数a，b，使这两个数的异或为x，且max(a, b)最小。&lt;/p&gt;</description></item><item><title>博客图片文件夹迁移</title><link>https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/</link><pubDate>Wed, 01 Apr 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/write_a_script_to_classify_posts/</guid><description>&lt;p&gt;我原来的博客文件夹结构是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200328175914444.png" alt="image-20200328175914444"&gt;&lt;/p&gt;
&lt;p&gt;博文数量少的时候，还挺直观，但是数量一多，看着就很杂乱，因此，萌生了重新归类的想法。&lt;/p&gt;
&lt;p&gt;思路大概是这样：按年份归类，然后图片统一放到当前目录下的&lt;code&gt;images&lt;/code&gt;文件夹里。&lt;/p&gt;
&lt;h2 id="实践"&gt;实践&lt;/h2&gt;
&lt;p&gt;脚本的逻辑大概是对每一篇博文，寻找其元数据的 date 字段，将其移动到对应的文件夹下，同时对同名的文件夹也进行递归移动。由于图片都是相对引用的，所以不会出问题。（即使出了咱还有 git）&lt;/p&gt;</description></item><item><title>Kickstart 2020 Round A 题解</title><link>https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/</link><pubDate>Thu, 26 Mar 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/kickstart_2020_round_a/</guid><description>&lt;p&gt;第一次打Kickstart，体验还是很不错的。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7"&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;迟了几分钟进比赛，发现前十已经两题AC了。&lt;/p&gt;
&lt;h2 id="allocation"&gt;Allocation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;1/0 Accepted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;签到题，排序后从大到小输出即可。&lt;/p&gt;
&lt;h2 id="plates"&gt;Plates&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2/0 TLE, WA&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;N叠盘子，每叠K个，每个盘子有一个beauty值，从中取P个，但对于每叠只能从上到下取，求beauty值最大为多少。&lt;/p&gt;
&lt;p&gt;先写了一个每次取最大的，WA，发现不对，然后去做第三题了。后又写了个dfs，TLE了。当时心态有点崩，因为TOP 10基本是两分钟AC，想到DP，但没有深入想。&lt;/p&gt;
&lt;p&gt;官方题解是对于每一叠盘子，先预处理前n个的beauty值和sum，然后对于每一个状态&lt;code&gt;dp[i][j]&lt;/code&gt;，即在前i叠盘子和取j个盘子时能取到的最大值，有状态转移方程&lt;code&gt;dp[i][j] = max(dp[i][j], sum[i][x]+dp[i-1][j-x])&lt;/code&gt;。循环求dp即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__&lt;span style="color:#f92672"&gt;==&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(input())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, t&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; out &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Case #&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;: &amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n, k, p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append([int(i) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; input()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;split()])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append([&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; a[i]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; s &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; j
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sum[i]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;append(s)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cur &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (p&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sum[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; [&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (p&lt;span style="color:#f92672"&gt;-&lt;/span&gt;k)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; j &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, p&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(min(j&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, k&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dp[i][j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(dp[i][j], sum[i][x] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; dp[i&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;][j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;x])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ans &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(ans, dp[i][p])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; out &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; str(ans)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(out)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="workout"&gt;Workout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2/1 Accepted&lt;/code&gt;&lt;/p&gt;</description></item><item><title>2019年终总结&amp;2020展望</title><link>https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/</link><pubDate>Sat, 01 Feb 2020 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/2019summary_2020plan/</guid><description>&lt;p&gt;又是一年一度的年终总结时间了，进入二十一世纪的第二个十年，我的心情十分激动……&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;好吧，激动是假的。时空是连续的，进入2020和平常的一天没有任何区别。转眼间已经来到了庚子鼠年的大年初八，我恍然记得我的年终总结还没有写，于是准备把这个传统艺能发扬下去，也看一看2019定的目标完成了多少。&lt;/p&gt;
&lt;h2 id="2019-总结"&gt;2019 总结&lt;/h2&gt;
&lt;p&gt;时间及事件依据：印象笔记、Google 相册、我的记忆、Telegram。&lt;/p&gt;
&lt;p&gt;事件尽量归类，未归类的大致以时间顺序排列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;找到了一个&lt;del&gt;记录生活&lt;/del&gt;吐槽的平台。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200201201451074.png" alt="image-20200201201451074"&gt;&lt;/p&gt;
&lt;p&gt;这个channel的内容输入延续至今。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一月，金工实习和数学建模美赛，虽然没学到什么，还是挺有意思的。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200201202345974.png" alt="image-20200201202345974"&gt;&lt;/p&gt;
&lt;p&gt;图为某数控机床。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月上旬，重新开始在印象笔记写日记。三月末更换至纸质方式。&lt;/p&gt;
&lt;p&gt;之后觉得日记意义不大，更换为每日计划，但是没有坚持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月，在外租房居住。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月和十二月，分别安排了我校ACM的校赛和新生赛。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src="./image-20200201215603263.png" alt="image-20200201215603263"&gt;&lt;/p&gt;
&lt;p&gt;请记住我这句话，都是泪。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寒假里把N1刷了一遍OMV，但存储只有一个U盘。暑假刷回了无灯的固件，买了个硬盘盒+320G机械，勉强能当NAS来用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ingress，从入坑到弃坑，大概是二月到五月的事。&lt;del&gt;（其实以前玩过&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;因为这个游戏还出去玩了挺多次的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三月末，开始入坑Arch Linux。&lt;/p&gt;
&lt;p&gt;然后发现这是个巨坑。（折腾万岁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;投资方面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和去年没多大变化吧。看的还是那两个人，还是没有系统地学经济学。只不过跟着大盘走盈利了一些罢了。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20200222105649825.png" alt="image-20200222105649825"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;英语方面。自我感觉英语能力有了较大提升。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;年度英美刷剧（和去年总结对比了一下）：Friends二刷，The Newsroom，Person of Interest 两季，The IT Crowd一季多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十月份想去考一考托福，大概也学了一段时间，后来无限期搁置了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Kindle读原著方面，把三体一看完了，又开了个哈利波特的坑，也看完了第一部。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我看了多少书？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;买了好多书。&lt;del&gt;（然而都没有看&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Linux&amp;amp;Unix大学教程基本看完了。后来又买了本鸟哥的，还没看。&lt;/li&gt;
&lt;li&gt;Head First with HTML&amp;amp;CSS 还剩最后两章没看。&lt;/li&gt;
&lt;li&gt;Computer Networking: A Top-down Approach，18年7月在图书馆里借了第五版影印版，一年基本没看，大三上由于要学计算机网络，好歹看了点，后又从淘宝打印了第七版英文版，看了三分之二左右。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四月初，启用了Digital Wellbeing，但是并没有起到限制玩手机时间的作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四月末，参加了一次西安GDG活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;剁手记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二月初，给家中置换了一个新的显示器，淘汰了老AOC 21&amp;rsquo; 1680*1050 服役十二年的历史。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./image-20200201203042582.png" alt="image-20200201203042582"&gt;&lt;/p&gt;
&lt;p&gt;图为 AOC 27&amp;rsquo; 4K 某型号。&lt;/p&gt;</description></item><item><title>WSL使用体验</title><link>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Sun, 08 Dec 2019 19:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/wsl%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>&lt;p&gt;首先，WSL真香！&lt;/p&gt;
&lt;h2 id="开启wsl"&gt;开启WSL&lt;/h2&gt;
&lt;p&gt;最简单的方式是使用管理员权限运行Powershell，然后输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重启电脑，然后在应用商店中安装WSL发行版。&lt;/p&gt;
&lt;h2 id="arch"&gt;Arch&lt;/h2&gt;
&lt;p&gt;注意到WSL是没有Arch Linux发行版的（以前有一个非官方的，很快被下架了），但是我们有办法添加Arch发行版。去&lt;a href="https://github.com/yuk7/ArchWSL"&gt;这个仓库&lt;/a&gt;下载打包好的appx文件和证书，首先将证书导入至受信任的根证书颁发机构，然后安装appx即可。&lt;/p&gt;
&lt;h2 id="体验"&gt;体验&lt;/h2&gt;
&lt;h3 id="坑"&gt;坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认WSL不会读取&lt;code&gt;~/.bashrc&lt;/code&gt;而会读取&lt;code&gt;~/.bash_profile&lt;/code&gt;，所以需要在&lt;code&gt;~/.bash_profile&lt;/code&gt;中写入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[[&lt;/span&gt; -f ~/.bashrc &lt;span style="color:#f92672"&gt;]]&lt;/span&gt; ; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	. ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;才能够正常读取bash配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="netcat"&gt;Netcat&lt;/h3&gt;
&lt;p&gt;首先我Google到的是&lt;code&gt;gnu-netcat&lt;/code&gt;。但是运行时报错&lt;code&gt;nc: core.c:372: core_tcp_connect: Assertion ret == 0' failed.&lt;/code&gt;搜索了&lt;a href="https://github.com/msys2/MSYS2-packages/issues/1030"&gt;相关Issus&lt;/a&gt;之后，我更换成了&lt;a href="https://www.archlinux.org/packages/community/x86_64/openbsd-netcat/"&gt;openbsd-netcat&lt;/a&gt;，问题解决。&lt;/p&gt;
&lt;h3 id="缺点"&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WSL下无法使用Docker等涉及内核的操作，该缺陷在WSL2中被解决。&lt;/li&gt;
&lt;li&gt;默认无图形界面，使用GUI需自己安装X Server，较为麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="windows-terminal"&gt;Windows Terminal&lt;/h2&gt;
&lt;p&gt;注意，截至目前，Windows Terminal仍处于预览阶段，正式发布预计要到2020年4月。&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191115231943950.png" alt="image-20191115231943950"&gt;&lt;/p&gt;
&lt;p&gt;安装WSL后，Windows Terminal能够自动识别WSL并添加至可用Terminal列表中。&lt;/p&gt;
&lt;h3 id="bug"&gt;Bug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动Shell后的工作目录为Windows当前用户的Home目录，而非Linux的用户Home目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./image-20191115232130240.png" alt="image-20191115232130240"&gt;&lt;/p&gt;
&lt;p&gt;​	可以通过在配置文件中加入&lt;code&gt;&amp;quot;commandline&amp;quot; : &amp;quot;wsl ~&amp;quot;&lt;/code&gt;来解决，不过这个方案只适用于默认WSL发行版，对于其他发行版无效，可以通过在&lt;code&gt;.bashrc&lt;/code&gt;中添加一条判断语句来解决。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows Terminal目前暂无法自动添加至右键菜单上下文，需手动添加注册表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往Terminal中粘贴内容是会自动在行间加空格。（更新：这个bug是由于\r\n与\n的处理问题，在0.7中被解决）&lt;/p&gt;
&lt;p&gt;&lt;img src="./image-20191115233340872.png" alt="image-20191115233340872"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wsl2"&gt;WSL2&lt;/h2&gt;
&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;
&lt;p&gt;可喜可贺，WSL终于能用Docker了。&lt;/p&gt;
&lt;p&gt;配置镜像源（无systemd）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在配置文件 &lt;code&gt;/etc/default/docker&lt;/code&gt; 中的 &lt;code&gt;DOCKER_OPTS&lt;/code&gt; 中配置Hub地址：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;DOCKER_OPTS=&amp;#34;--registry-mirror=https://docker.mirrors.ustc.edu.cn/&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新启动服务:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id="坑-1"&gt;坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方宣称在18945之后的版本中Windows访问WSL提供的网络服务只需使用localhost即可（服务需绑定之0.0.0.0而不是127.0.0.1，因为实际上这些连接被认为是局域网中的连接）。&lt;/p&gt;</description></item><item><title>重新安装 Hexo</title><link>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</link><pubDate>Wed, 07 Aug 2019 16:03:29 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/reinstall-hexo/</guid><description>&lt;h2 id="缘由"&gt;缘由&lt;/h2&gt;
&lt;p&gt;直接原因是 Github 的一个假装很贴心的功能：&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565183420437.png" alt="1565183420437"&gt;&lt;/p&gt;
&lt;p&gt;由于我的 Hexo 已年代久远，所以有了一堆漏洞，在尝试 Github 的自动修复未果之后，同时也因为当初搞 Hexo 的时候不是很懂，文档也没写好，就决定重新装一遍。&lt;/p&gt;
&lt;h2 id="过程"&gt;过程&lt;/h2&gt;
&lt;h3 id="环境"&gt;环境&lt;/h3&gt;
&lt;p&gt;node.js 6.4.1&lt;/p&gt;
&lt;p&gt;hexo 3.9.0&lt;/p&gt;
&lt;p&gt;hexo-cli 2.0.0&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565186395227.png" alt="1565186395227"&gt;&lt;/p&gt;
&lt;p&gt;官方文档上写需要 node.js 6.9+，然而我是 6.4，不知道会不会锅。&lt;/p&gt;
&lt;h3 id="hexo-安装"&gt;Hexo 安装&lt;/h3&gt;
&lt;p&gt;首先，把仓库 clone 下来后，备份一份源文件。然后找一个空文件夹，按照官方文档的指引，执行：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;hexo init
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;（我发现现在 &lt;code&gt;hexo init&lt;/code&gt; 会同时自动执行 &lt;code&gt;npm install&lt;/code&gt;命令了）&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565185528852.png" alt="1565185528852"&gt;&lt;/p&gt;
&lt;p&gt;然而还是有一个漏洞，不管了。&lt;/p&gt;
&lt;p&gt;然后删除原文件夹中文件（保留.git），把新的文件复制过去。同时把备份文件夹中的&lt;code&gt;source&lt;/code&gt;文件夹覆盖过去。（自动创建 .gitignore 好评）&lt;/p&gt;
&lt;p&gt;这时候基本的安装就完成了，接下来打开 Github Desktop 开始对比差异。&lt;/p&gt;
&lt;p&gt;在全局配置&lt;code&gt;_config.yml&lt;/code&gt;中，&lt;/p&gt;
&lt;p&gt;&lt;img src="./1565184499949.png" alt="1565184499949"&gt;&lt;/p&gt;
&lt;p&gt;这个配置是为每篇博文创建一个单独的资源文件夹。&lt;/p&gt;
&lt;p&gt;基本不用变，直接 discard changes 即可。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt; 和 &lt;code&gt;deploy.sh&lt;/code&gt; 也直接还原。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cjc7373.github.io/2018/10/13/Hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/#Hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E6%8C%87%E5%BC%95"&gt;图片的问题&lt;/a&gt;先不管，有问题再说。&lt;/p&gt;
&lt;h3 id="主题安装"&gt;主题安装&lt;/h3&gt;
&lt;p&gt;剩下的差异全是主题文件。既然都重新搞了，那就换一个主题吧。在自己的 stars 里找了个主题 &lt;a href="https://github.com/yscoder/hexo-theme-indigo"&gt;hexo-theme-indigo&lt;/a&gt;，看了下也支持 Analysis、Disqus，就决定用它了。&lt;/p&gt;
&lt;p&gt;接下来就开始按照&lt;a href="https://github.com/yscoder/hexo-theme-indigo/wiki"&gt;主题文档&lt;/a&gt;来安装。首先 clone 仓库，我选择 card 分支，感觉比较好看（其实也没有对比）。&lt;/p&gt;</description></item><item><title>大二下学期期末复习</title><link>https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</guid><description>&lt;h2 id="软件工程试卷"&gt;软件工程试卷&lt;/h2&gt;
&lt;p&gt;来源： &lt;a href="https://tellyouwhat.cn/p/northwest-university-software-engineering-review-materials/"&gt;Harbor Zeng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./bd61005egy1g0cx8lnllsj20rt112adk.jpg" alt="img"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./bd61005egy1g0cx8izobuj22eo37kb29.jpg" alt="img"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./bd61005egy1g0cx8p7mccj20rt112adg.jpg" alt="img"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="./bd61005egy1g0cx8t4qtvj20rt11241p.jpg" alt="img"&gt;&lt;/p&gt;</description></item><item><title>软通实习</title><link>https://blog.coherence.codes/posts/2020_and_before/isoftstone-practice/</link><pubDate>Wed, 17 Jul 2019 15:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/isoftstone-practice/</guid><description>&lt;h2 id="序"&gt;序&lt;/h2&gt;
&lt;p&gt;二年级下学期期末，有一个两周的实习，学校给了我们三个选项，其中软通算是知名度最高的一家公司了。
&lt;img src="./isoftstone.png" alt="“isoftstone”的图片搜索结果"&gt;&lt;/p&gt;
&lt;p&gt;然而网上这家公司的风评很差，不过其他两家似乎更差，于是我们班大概四分之三的人都来了软通。&lt;/p&gt;
&lt;h2 id="经历"&gt;经历&lt;/h2&gt;
&lt;p&gt;实习第一天，上午讲的开发流程，团队角色，每日例行项目好似我们已经接手了一个实际项目，然而到了下午瞬间变成培训班，开始教我们配置环境。看下发的文档是用 Java Spring Boot 框架来开发。第二天又开始复习 Java。然后到了第三天，负责我们的老师（就叫他项目经理好了）突然说，你们想用什么技术就用什么技术吧。终于不用写 Java 了（逃&lt;/p&gt;
&lt;p&gt;我们大概使用的是 Scrum 敏捷开发方法，最有特色的一点大概就是每日站会了。还有 Story 列表其实也挺不错的，只是没有贴在公告板上感觉失去了灵魂。&lt;/p&gt;
&lt;p&gt;可能是时间短的原因，从一开始需求包括 Story 列表就已经确定了，我认为如果只是说做一个什么系统而不说具体需求会让大家的产品更有差异化，亮点也会更多。&lt;/p&gt;
&lt;h2 id="技术栈"&gt;技术栈&lt;/h2&gt;
&lt;p&gt;由于我很倾向 Python，加上青岛大学的开源 OJ 采用的就是 Django+Vue 前后端分离的开发模式，于是我便也想采用这个模式。&lt;/p&gt;
&lt;p&gt;最终我们决定采用前后端完全分离，前后端之间使用 HTTP 协议通信。前端采用：HTML+CSS+JavaScript（JQuery+AJAX），后端采用：Django，数据库采用：PostgreSQL&lt;/p&gt;
&lt;h2 id="版本管理"&gt;版本管理&lt;/h2&gt;
&lt;p&gt;我有一些 Git 的知识，然而软通提供的版本管理工具是 SVN。用了一段时间后发现，两个工具没有本质的区别，最大的大概是 SVN 需要中心服务器，权限控制似乎也比较强大，所以像在公司内部比较好用，而 Git 分布式，分支创建极为方便，在开源社区中被广泛使用。&lt;/p&gt;
&lt;p&gt;&lt;img src="./1563352303687.png" alt="1563352303687"&gt;&lt;/p&gt;
&lt;p&gt;然而我们甚至没有用到分支这个功能，总体上还是没有利用好版本管理。&lt;/p&gt;
&lt;h2 id="前端三剑客"&gt;前端：三剑客&lt;/h2&gt;
&lt;p&gt;zpc 第一天就不知道在哪找了个模板网站，然后冲了十块钱下了个模板。接下来就开始改改改。&lt;/p&gt;
&lt;h3 id="调试"&gt;调试&lt;/h3&gt;
&lt;p&gt;一个问题是，后端的代码如何给前端调试。我们选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后端首先使用 Django 的本地服务器，用 Postman 进行测试，测试通过后上传代码。&lt;/li&gt;
&lt;li&gt;不定期部署至服务器上&lt;/li&gt;
&lt;li&gt;前端从服务器调用接口调试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而，在其他组答辩的时候，我们才知道有个东西叫 &lt;a href="http://mockjs.com/"&gt;mock&lt;/a&gt;，能够简化调试难度。&lt;/p&gt;
&lt;h2 id="后端django"&gt;后端：Django&lt;/h2&gt;
&lt;p&gt;很早就听说了 Python Web 一些有名的框架，后来又知道了青岛大学的开源 OJ 后端使用的就是 Django，所以很想尝试一下。曾经看过几节慕课，也看了一些官方文档（一开始是真的看不懂）。在做微信小程序的时候，我就想用 Django，奈何技术不够，放弃了。&lt;/p&gt;
&lt;p&gt;实习前，我去找 zjb 两小时速成了一下 Django，发现 Django 虽然是 MTV（Model——Template——View）三级结构，但是前后端分离的话就没有模板了，同时我们用了 REST Framework，在函数名中直接声明要调用的方法，大大简化了开发。REST Framework 也提供了&lt;a href="https://q1mi.github.io/Django-REST-framework-documentation/"&gt;官方中文文档&lt;/a&gt;，不过感觉写得不是很好。&lt;/p&gt;</description></item><item><title>使用 Travis CI 自动部署 Hexo 博客</title><link>https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/</link><pubDate>Sun, 21 Apr 2019 20:16:56 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/use-ci-auto-deploy-blog/</guid><description>&lt;p&gt;&lt;img src="./bg2017121901.png" alt="bg2017121901"&gt;&lt;/p&gt;
&lt;h2 id="缘由"&gt;缘由&lt;/h2&gt;
&lt;p&gt;其实我想用 CI 来自动化部署博客很久了，只是因为懒，CI 又有很多新知识，担心自己的知识储备不够，于是一直咕咕咕。&lt;/p&gt;
&lt;p&gt;前段时间装了 Arch 之后，我很想在两个系统之间同步写作进度，但是 Windows 的休眠和快速启动会导致在 Arch 下我只能以只读方式挂载 Windows 分区（我日常关机用休眠，所以拒绝关休眠）。原来设想的&lt;code&gt;ln -s&lt;/code&gt;大法行不通了。&lt;/p&gt;
&lt;p&gt;于是我想到了 CI。仔细一想其实也不复杂，无非是&lt;code&gt;git push&lt;/code&gt;， &lt;code&gt;git pull&lt;/code&gt;两下罢了。那么，Let&amp;rsquo;s do it!&lt;/p&gt;
&lt;h2 id="需求"&gt;需求&lt;/h2&gt;
&lt;p&gt;我原来设想是博客同时部署在 Github Pages 和我的 VPS 上，而由于某些不可抗力~~（懒）~~后者并没有实现。所以需求就变得十分简单，commit 博客内容，CI 自动构建然后部署。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我更新博客之后，commit 然后 push 至 Github repo&lt;/li&gt;
&lt;li&gt;CI 自动构建博客&lt;/li&gt;
&lt;li&gt;CI 将构建完成的静态文件 push 至 Github repo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我原先使用的是&lt;code&gt;hexo-deployer-git&lt;/code&gt;插件，通过&lt;code&gt;hexo g -d&lt;/code&gt;部署，现在这个插件可以丢弃了。同时我的 Hexo 的很多配置都被我瞎改了，同时还有许多奇奇怪怪的模块可能需要清理（不如重新来一遍（大雾）），这些先不谈。&lt;/p&gt;
&lt;h2 id="配置-github-repo"&gt;配置 Github Repo&lt;/h2&gt;
&lt;p&gt;在这个 Repo 中需要两个分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master 用于存放构建完成的静态文件&lt;/li&gt;
&lt;li&gt;source 用于存放 Hexo 生成的博客源文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 Hexo 文件夹的操作如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;git init
git remote add origin git@github.com:cjc7373/cjc7373.github.io.git
git checkout -b source
git add .
git commit -m &amp;#34;To use CI to automated deploy&amp;#34;
git push origin source:source
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本来以为这个仓库会很大（整个文件夹大概 100M），突然发现它自带&lt;code&gt;.gitignore&lt;/code&gt;文件，所以实际大小并没有多少。&lt;/p&gt;</description></item><item><title>Arch Linux 安装&amp;配置全过程</title><link>https://blog.coherence.codes/posts/2020_and_before/arch-linux-install/</link><pubDate>Sun, 24 Mar 2019 20:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/arch-linux-install/</guid><description>&lt;blockquote&gt;
&lt;p&gt;Note from 2024/06/10：本文所记载很多内容已经过时，要获取最新的信息还是要善用 ArchWiki 和 Google。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;以前我也装过双系统，很遗憾，可能是知识水平不够的缘故，也有笔记本坑爹的原因，装过 Ubuntu，Manjaro，Deepin，Fedora 等众多发行版，要么启动时候卡死，要么根本无法引导，于是作罢。如今开始学习 Linux，便有了重拾双系统的念头。&lt;/p&gt;
&lt;p&gt;这篇博客将记录 Arch 安装与配置全过程。最终目标是 Arch 能成为我的主力系统替代 Windows。&lt;/p&gt;
&lt;p&gt;&lt;img src="./1554536417517.png" alt="1554536417517"&gt;&lt;/p&gt;
&lt;p&gt;下面列出笔记本的配置，以供参考。&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;部件&lt;/th&gt;
 &lt;th&gt;型号&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;CPU&lt;/td&gt;
 &lt;td&gt;Intel i5-7300HQ&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;内存&lt;/td&gt;
 &lt;td&gt;16G&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;硬盘&lt;/td&gt;
 &lt;td&gt;128G NVME SSD + 1T 机械&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;显卡&lt;/td&gt;
 &lt;td&gt;GeForce GTX 1050 Ti + Intel HD Graphics 630&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;无线网卡&lt;/td&gt;
 &lt;td&gt;Reltek RTL8822BE&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;触摸板&lt;/td&gt;
 &lt;td&gt;Synaptics&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="为什么选择-arch"&gt;为什么选择 Arch&lt;/h2&gt;
&lt;p&gt;滚动更新天下第一！（误&lt;/p&gt;
&lt;p&gt;听说社区非常友好（然而我还没感受到&lt;/p&gt;
&lt;h2 id="基本安装"&gt;基本安装&lt;/h2&gt;
&lt;p&gt;安装参考了 &lt;a href="https://www.viseator.com/2017/05/17/arch_install/"&gt;以官方Wiki的方式安装ArchLinux&lt;/a&gt; 和 官方Wiki的 &lt;a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)"&gt;Installation Guide&lt;/a&gt;。在未安装图形界面前，基本一切顺利。&lt;/p&gt;
&lt;p&gt;题外话：说起无线网卡，之前装 Ubuntu 的时候，没有驱动，需要手动安装。不过内核从 4.x 某个版本之后，加入了对我这个网卡的驱动，现在无需配置即可使用了。&lt;/p&gt;
&lt;p&gt;由于固态的空间不足，故没有分配交换文件（感觉也用不掉 16G 内存）。&lt;/p&gt;
&lt;p&gt;在配置&lt;code&gt;sudo&lt;/code&gt;时，使用&lt;code&gt;visudo&lt;/code&gt;命令编辑配置文件，然而这个 vi编辑器有毒，许多操作都无法执行，感觉是个 bug。（Update：原来 vi 和 vim 是有挺大的区别的&amp;hellip;）&lt;/p&gt;</description></item><item><title>中国电信 HG2543C1 光猫获取超级管理员密码</title><link>https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/</link><pubDate>Sat, 16 Feb 2019 16:32:47 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/fiber-modem-crack/</guid><description>&lt;p&gt;寒假回家，欣闻家中宽带升级成了 200M，然而坑爹的是一直以来的桥接模式被改成路由模式。由于想公网访问本地的 NAS，且想看看 IPV6 是否已在我家区域部署，所以想破解光猫获取管理员密码。&lt;/p&gt;
&lt;p&gt;Google 该设备的型号，发现网上并没有相关的教程，可能是型号比较新的缘故。致电中国电信，被告知无法透露管理员密码，派人上门调试则需额外花费。本着自己折腾的原则，遂在某宝购入 CH340G USB转TTL板，准备拆机 TTL 破解光猫。&lt;/p&gt;
&lt;h2 id="0x01-拆机"&gt;0x01 拆机&lt;/h2&gt;
&lt;p&gt;拆机后发现 PCB 板上有 TTL 插针，用万用表测得倒数第二根为 GND（接地pin），然后剩余四根随机组合，测得 RX（接收数据pin）和 TX（发送数据pin）。用杜邦线连接 USB转TTL板和 TTL 插针。&lt;/p&gt;
&lt;p&gt;&lt;img src="./IMG_20190219_113847.jpg" alt="IMG_20190219_113847"&gt;&lt;/p&gt;
&lt;h2 id="0x02-串口调试"&gt;0x02 串口调试&lt;/h2&gt;
&lt;p&gt;电脑安装好 USB转TTL板的驱动，USB端连接上电脑。网上的教程一般使用 SecureCRT， 然而我后来发现 Xshell 也能连接串口，遂用 Xshell 进行调试。&lt;/p&gt;
&lt;p&gt;&lt;img src="./1550548463370.png" alt="1550548463370"&gt;&lt;/p&gt;
&lt;p&gt;如图设置参数，port 按照自己的情况设置。&lt;/p&gt;
&lt;p&gt;然后连接。接通电源后等待。大概等待两分钟后，按回车，出现 &lt;code&gt;Login:&lt;/code&gt; 字样，用 &lt;code&gt;root/hg2x0&lt;/code&gt; 登陆。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;cat /proc/cpuinfo&lt;/code&gt; 看一下 CPU 信息，居然是 MIPS&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src="./1550306022384.png" alt="1550306022384"&gt;&lt;/p&gt;
&lt;p&gt;超级密码在&lt;code&gt;/flash/cfg/agentconf/factory.conf &lt;/code&gt;文件中。文件前两行即为管理员账户和密码。至此，光猫破解完成。&lt;/p&gt;
&lt;h2 id="0x03-参考资料"&gt;0x03 参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://paper.seebug.org/506/#0x03"&gt;如何通过TTL调试光猫&lt;/a&gt;
&lt;a href="https://m2.zhugh.com:26800/po-jie-dian-xin-guang-mao/"&gt;破解电信光猫&lt;/a&gt;&lt;/p&gt;</description></item><item><title>2018年终总结&amp;2019展望</title><link>https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/</link><pubDate>Mon, 11 Feb 2019 19:00:00 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/2018summary_2019plan/</guid><description>&lt;p&gt;今天是己亥猪年的大年初七，很惭愧到今天我才想起寒假前就想写的年终总结还没有写。&lt;/p&gt;
&lt;h2 id="2018-总结"&gt;2018 总结&lt;/h2&gt;
&lt;p&gt;时间及事件依据：印象笔记、Google 相册、我的记忆。&lt;/p&gt;
&lt;p&gt;事件大致以时间顺序排列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一月初，经历了在西安的第一场雪。&lt;/li&gt;
&lt;li&gt;（时间未知）使用了 Windows 运行来快速启动程序，&lt;del&gt;（感觉上）大大提高了效率&lt;/del&gt;（不（感觉装逼才是真的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./1549962279010.png" alt="1549962279010"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 1.13 开始寒假训练， 3.24 校赛，3.31 天梯赛，5.17 左右 ACM省赛，7.19 开始暑假多校训练，10.26 徐州区域赛， 11.23 深圳 CCPC 总决赛，整个一年我算是比较积极地参与 ACM-ICPC 竞赛（虽然下半年逐渐开始划水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./1550032126921.png" alt="1550032126921"&gt;
（六张照片依次为 CCPC、寒假训练、省赛、校赛、天梯赛、徐州区域赛）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一月末，开始种草轻薄本，并寻求把游戏本卖了，未果。&lt;/li&gt;
&lt;li&gt;从年初开始，用空闲资金进行投资，并开始学习相关知识。一月末我第一次买入了一个基金，入坑。一开始赚了点钱很高兴，后来贸易战开始就亏了。七月初买了一本金融方面的书然而并没有看多少。八月开始跟投某大V的投资计划，九月末把主要账户转移到且慢。回想起一开始什么都不懂就冲着某个行业买基金，现在慢慢有些了解但知识仍然很浅薄。时刻要提醒自己：不要盲从。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./1550032359691.png" alt="1550032359691"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定下（并践行）了在美（英）剧中学英语的目标，然后每当我看剧时总是自我安慰同时我也在&lt;del&gt;学习&lt;/del&gt;（并没有）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到目前为止看过的剧有（不限于18年）：Friends，Sherlock，Black Mirror 一季， The IT Crowd 两季，Monday Mornings，Greys Anatomy 一季， Person of Interest 三季，Modern Family 半季多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从3月份开始，我开始撸 DigitalOcean 的 Github 学生优惠，到现在为止服务器运维的相关知识增长地挺快&amp;hellip;应该是从大学开始吧，我开始用VPS自建SS，一开始是 Cloudcone 还是 Vultr 后来撸到了 DO，再后来19年年初的时候知道了一个超便宜的深港专线，后来又撸了阿里云的学生机。&lt;/li&gt;
&lt;li&gt;四月中旬看了死亡诗社，Seize the day 成了我的座右铭，虽然我一直没有做到这一点。&lt;/li&gt;
&lt;li&gt;整个一年我总有一种感觉，学习不在状态，有时候一直陷入一种昏昏沉沉的状态，那种状态下，犯困，没有学习的心思，干其他事也提不起兴趣。仿佛就在虚度光阴。从那个寒假开始我就（似乎）养成了不良的生活习惯。&lt;/li&gt;
&lt;li&gt;四五月份入了创新IE3P 和 iPad 2018，拔草成功，却没有对我的学习质量有多大的改善。后来又开始种草蓝牙降噪耳机&amp;hellip;&lt;/li&gt;
&lt;li&gt;六月末，转专业考试。一年中最重要的一件事，从环境科学与工程转到了软件工程专业，进入了理想的专业。&lt;/li&gt;
&lt;li&gt;然而同时打算换宿舍的（非常不喜欢我们宿舍的氛围和作息），最终没有成功。后来也尝试过 Bose Sleepbuds 这个方案，效果不佳。遂产生了租房的想法。&lt;/li&gt;
&lt;li&gt;尝试读英文原著，从大一上开始读星际穿越的剧本，读到18年年中读完了。然后开始看三体的英文版，到现在看了一半多。&lt;/li&gt;
&lt;li&gt;九月中旬开始用 Excel 记账，对日常消费进行记录和管理，持续至今。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="./1550035065769.png" alt="1550035065769"&gt;&lt;/p&gt;</description></item><item><title>DOMjudge 配置/踩坑指南</title><link>https://blog.coherence.codes/posts/2020_and_before/domjudge-config/</link><pubDate>Wed, 19 Dec 2018 20:12:51 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/domjudge-config/</guid><description>&lt;p&gt;我校新生赛也能用上 World Final 同款评测系统啦~&lt;/p&gt;
&lt;p&gt;DOMjudge 提供了详尽的&lt;a href="https://www.domjudge.org/documentation"&gt;官方文档&lt;/a&gt;，然而对于博主这种英文弱鸡来说读的很痛苦。前前后后折腾了有两个星期吧，以此文作为避（踩）坑指南。&lt;/p&gt;
&lt;h2 id="简介"&gt;简介&lt;/h2&gt;
&lt;p&gt;DOMjudge，作为一款开源的 CCS(&lt;a href="https://clics.ecs.baylor.edu/index.php?title=Contest_Control_System"&gt;Contest Control System&lt;/a&gt;)，现已被ICPC钦定为官方的比赛评测系统。比 pc^2 这种闭源而含有诸多 Bug 的 CCS 高到不知道哪里去了啊。&lt;/p&gt;
&lt;p&gt;&lt;img src="./1545218741334.png" alt="1545218741334"&gt;&lt;/p&gt;
&lt;p&gt;根据官方文档的描述，DOMjudge 的主要特性有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式且自动评测的 judge host&lt;/li&gt;
&lt;li&gt;Web 用户界面&lt;/li&gt;
&lt;li&gt;模块化的系统，方面添加不同的语言/编译器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个 DOMjudge 主要分为两个部分，Domserver 和 Judgehost，据其名字即可得出它们的功能。需要注意的是，DOMjudge 使用数据库来存放几乎一切数据，所以我们还需配置 MySQL 或者 MariaDB。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;/h2&gt;
&lt;p&gt;DOMjudge 只能运行在 Linux 环境下。博主的运行环境是 Ubuntu Server 18.04 LTS，以及 DOMjudge 7.1.1。&lt;/p&gt;
&lt;p&gt;除了传统的安装方式外，DOMjudge 还提供了 Docker 镜像以供安装，这样就大大简化了安装的困难程度。&lt;/p&gt;
&lt;p&gt;关于 Docker 的使用这里不作详细描述。（其实是博主也一知半解）&lt;/p&gt;
&lt;p&gt;然而&lt;a href="https://hub.docker.com/r/domjudge/domserver"&gt;官方的 Docker 文档中&lt;/a&gt;仅使用了命令来启动容器，为了进一步简化安装，也为了方便修改配置，我决定采用 Docker Compose 。以下是 &lt;code&gt;docker-compose.yml &lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;version&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mariadb&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;container_name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;dj-mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_ROOT_PASSWORD=rootpw&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_USER=domjudge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_PASSWORD=djpw&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_DATABASE=domjudge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;$PWD/data:/var/lib/mysql&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;13306&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;3306&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - --&lt;span style="color:#ae81ff"&gt;max-connections=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - --&lt;span style="color:#ae81ff"&gt;innodb-log-file-size=480M&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;domserver&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;domjudge/domserver:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;container_name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;domserver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_HOST=mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_USER=domjudge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_DATABASE=domjudge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_PASSWORD=djpw&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;MYSQL_ROOT_PASSWORD=rootpw&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;CONTAINER_TIMEZONE=Asia/Shanghai&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;restart&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;depends_on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;phpmyadmin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;80&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;links&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;judgehost&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;domjudge/judgehost:latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;container_name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;judgedaemon-0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;privileged&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;CONTAINER_TIMEZONE=Asia/Shanghai&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;DAEMON_ID=0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;JUDGEDAEMON_PASSWORD=whatthehell&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;depends_on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;domserver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;links&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;domserver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;restart&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;/sys/fs/cgroup:/sys/fs/cgroup:ro&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;phpmyadmin&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;phpmyadmin/phpmyadmin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;container_name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;myadmin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;8080&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;PMA_HOST=mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;links&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mariadb:mariadb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后运行 &lt;code&gt;docker-compose up -d&lt;/code&gt; 即可完成部署。&lt;/p&gt;</description></item><item><title>使用KMS激活Visio</title><link>https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/</link><pubDate>Sat, 01 Dec 2018 23:11:38 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/visio-kms-activate/</guid><description>&lt;h2 id="题记"&gt;题记&lt;/h2&gt;
&lt;p&gt;如果你懒的话当然可以用KMSpico等工具一键激活，但博主不想电脑里多个启动项，并且博主的电脑预装了Office2013家庭与学生版，用此类工具可能出现不可预知的后果，所以打算自己动手激活Visio。&lt;/p&gt;
&lt;h2 id="转换visio版本"&gt;转换Visio版本&lt;/h2&gt;
&lt;p&gt;我在&lt;a href="http://msdn.itellyou.cn/?lang=zh-cn"&gt;MSDN我告诉你&lt;/a&gt;和某非著名PT站上并没有找到Visio的VL（批量授权）版本，然而KMS激活需要VL版，所以第一步是转换Visio的版本。&lt;/p&gt;
&lt;p&gt;复制以下代码，保存为.bat文件并用管理员身份运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; exist &lt;span style="color:#e6db74"&gt;&amp;#34;%ProgramFiles%\Microsoft Office\Office16\ospp.vbs&amp;#34;&lt;/span&gt; cd /d &lt;span style="color:#e6db74"&gt;&amp;#34;%ProgramFiles%\Microsoft Office\Office16&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; exist &lt;span style="color:#e6db74"&gt;&amp;#34;%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs&amp;#34;&lt;/span&gt; cd /d &lt;span style="color:#e6db74"&gt;&amp;#34;%ProgramFiles(x86)%\Microsoft Office\Office16&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cscript ospp.vbs /rearm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; /f %%x in &lt;span style="color:#f92672"&gt;(&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;dir /b ..\root\Licenses16\visio???vl_kms*.xrm-ms&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; cscript ospp.vbs /inslic:&lt;span style="color:#e6db74"&gt;&amp;#34;..\root\Licenses16\%%x&amp;#34;&lt;/span&gt; &amp;gt;nul
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; /f %%x in &lt;span style="color:#f92672"&gt;(&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;dir /b ..\root\Licenses16\visio???vl_mak*.xrm-ms&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; cscript ospp.vbs /inslic:&lt;span style="color:#e6db74"&gt;&amp;#34;..\root\Licenses16\%%x&amp;#34;&lt;/span&gt; &amp;gt;nul
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上命令的作用分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开Office的安装目录（Visio也属于Office的一部分）&lt;/li&gt;
&lt;li&gt;重置零售激活&lt;/li&gt;
&lt;li&gt;安装KMS和MAK许可证（转换版本）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;题外话：转换Office和Project版本同理。&lt;/p&gt;
&lt;p&gt;Office：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cscript ospp.vbs /rearm
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\proplusvl_kms*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
for /f %%x in (&amp;#39;dir /b ..\root\Licenses16\proplusvl_mak*.xrm-ms&amp;#39;) do cscript ospp.vbs /inslic:&amp;#34;..\root\Licenses16\%%x&amp;#34; &amp;gt;nul
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Project：&lt;/p&gt;</description></item><item><title>Markdown简介</title><link>https://blog.coherence.codes/posts/2020_and_before/all-about-markdown/</link><pubDate>Thu, 08 Nov 2018 20:16:56 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/all-about-markdown/</guid><description>&lt;h2 id="什么是-markdown"&gt;&lt;strong&gt;什么是 Markdown?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Markdown 是一种轻量级且易使用的标记语言，通过对标题、正文、加粗、链接等主要文本格式的预设编码，帮用户在写作中有效避免频繁的格式调整，获得更加流畅沉浸的写作体验。&lt;/p&gt;
&lt;p&gt;&lt;img src="./Markdown-mark.svg.png" alt="哈哈哈"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="markdown-vs-富文本"&gt;Markdown VS 富文本&lt;/h3&gt;
&lt;p&gt;基于 Markdown 写作，是属于&lt;strong&gt;纯文本&lt;/strong&gt;写作。「纯文本」写作和「富文本」写作是对立的，我们来区分一下：&lt;/p&gt;
&lt;h4 id="富文本写作-"&gt;**「富文本」写作 **&lt;/h4&gt;
&lt;p&gt;你平时在&lt;strong&gt;Word&lt;/strong&gt;上写作，就属于富文本写作。修改文字的大小、修改文字颜色、调整各种格式只需要点一下鼠标就行。富文本写作最大的特点是：&lt;strong&gt;所见即所得&lt;/strong&gt;，你把格式调整成什么样子，就会直接显示出什么样的效果。&lt;/p&gt;
&lt;p&gt;然而，富文本的格式排版过于繁杂，以致于你不得不花费大量时间在这上面，而忽略了写作本身。&lt;/p&gt;
&lt;p&gt;同时，富文本存在着&lt;strong&gt;多平台转换不方便&lt;/strong&gt;的问题，假如你在 Word 上写好了文档，格式也调好了，复制粘贴到其他写作平台的时候发现：&lt;strong&gt;格式全乱啦&lt;/strong&gt;；即使是转发给其他人也可能因为 Word 版本的不同而导致显示的差别很大。（如果你有过去打印店打印文档的经历的话，相信体会很深吧）富文本一般需要使用专用软件打开（如Word）。&lt;/p&gt;
&lt;h4 id="markdown写作"&gt;&lt;strong&gt;「Markdown」写作&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;基于 &lt;strong&gt;Markdown&lt;/strong&gt; 写作，就是纯文本写作。它允许人们使用纯文本格式来编写文档。如果你想设置某段文字的格式，只需要使用一些简单的符号来代表即可。所以&lt;strong&gt;文字和格式都是纯文本&lt;/strong&gt;。能够用普通的文本编辑器打开。&lt;/p&gt;
&lt;p&gt;Markdown正好处在富文本的对立面，由于其简洁的特性，导致其格式只有寥寥几种，功能上也远不如富文本编辑器。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Markdown 的优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;纯文本所以&lt;strong&gt;兼容性&lt;/strong&gt;极强，可以用所有文本编辑器打开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让你更&lt;strong&gt;专注于文字&lt;/strong&gt;而不是排版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式&lt;strong&gt;转换方便&lt;/strong&gt;，Markdown 文本你可以轻松转换为 html、电子书等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdown 的标记语法有&lt;strong&gt;极好的可读性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Markdown的主要用途&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;博客（自建、简书、CSDN等等）&lt;/li&gt;
&lt;li&gt;笔记，随笔等&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="编辑器推荐"&gt;编辑器推荐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Typora&lt;/strong&gt; Markdown也能所见即所得！&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="基本语法"&gt;基本语法&lt;/h2&gt;
&lt;p&gt;Markdown语法主要分为如下几大部分： &lt;strong&gt;标题&lt;/strong&gt;，&lt;strong&gt;段落&lt;/strong&gt;，&lt;strong&gt;区块引用&lt;/strong&gt;，&lt;strong&gt;代码区块&lt;/strong&gt;，&lt;strong&gt;强调&lt;/strong&gt;，&lt;strong&gt;列表&lt;/strong&gt;，&lt;strong&gt;分割线&lt;/strong&gt;，&lt;strong&gt;链接&lt;/strong&gt;，&lt;strong&gt;图片&lt;/strong&gt;，&lt;strong&gt;反斜杠 \&lt;/strong&gt;，&lt;strong&gt;行内引用&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id="1-标题"&gt;1. 标题&lt;/h4&gt;
&lt;p&gt;使用&lt;code&gt;#&lt;/code&gt;，可表示1-6级标题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id="一级标题"&gt;一级标题&lt;/h1&gt;
&lt;h2 id="二级标题"&gt;二级标题&lt;/h2&gt;
&lt;h3 id="三级标题"&gt;三级标题&lt;/h3&gt;
&lt;h4 id="四级标题"&gt;四级标题&lt;/h4&gt;
&lt;h5 id="五级标题"&gt;五级标题&lt;/h5&gt;
&lt;h6 id="六级标题"&gt;六级标题&lt;/h6&gt;&lt;/blockquote&gt;
&lt;h4 id="2-段落"&gt;2. 段落&lt;/h4&gt;
&lt;p&gt;段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用&lt;strong&gt;两个以上&lt;/strong&gt;空格加上回车（引用中换行省略回车）。&lt;/p&gt;</description></item><item><title>关于我</title><link>https://blog.coherence.codes/posts/2020_and_before/about_me/</link><pubDate>Sat, 03 Nov 2018 16:37:04 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/about_me/</guid><description>&lt;h2 id="关于我"&gt;关于我&lt;/h2&gt;
&lt;p&gt;博主是一名大四学生。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爱好一切数码产品&lt;/li&gt;
&lt;li&gt;安卓（伪）瞎折腾党&lt;/li&gt;
&lt;li&gt;ACM 打铁选手&lt;/li&gt;
&lt;li&gt;Linux 初学者&lt;/li&gt;
&lt;li&gt;科幻爱好者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="关于博客"&gt;关于博客&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2021-02-08 迁移到 pelican, 打算自己写个主题, 待填坑&lt;/li&gt;
&lt;li&gt;2020-03-26 更新 Hexo 至 4.2.0，启用 hexo-generator-sitemap 插件&lt;/li&gt;
&lt;li&gt;2020-02-22 更改评论为 &lt;code&gt;disqusjs&lt;/code&gt;，详见作者的&lt;a href="https://blog.skk.moe/post/disqusjs/"&gt;博文&lt;/a&gt;；启用 &lt;a href="https://github.com/theme-next/theme-next-pjax"&gt;pjax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2019-12-24 启用新域名&lt;code&gt;blog.coherence.codes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2019-10-07 升级主题至 Next V7.4.1&lt;/li&gt;
&lt;li&gt;2018-09-24 第一篇博文。采用 Hexo + NexT 主题， 部署于 Github Pages。搭建过程见&lt;a href="https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/"&gt;Hexo搭建小记&lt;/a&gt;这篇文章&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="联系我"&gt;联系我&lt;/h2&gt;
&lt;p&gt;Telegram：@Coherence0&lt;/p&gt;
&lt;p&gt;Email：niuchangcun AT gmail.com&lt;/p&gt;</description></item><item><title>Windows10字体崩溃修复</title><link>https://blog.coherence.codes/posts/2020_and_before/windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/</link><pubDate>Fri, 02 Nov 2018 18:23:47 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/windows10%E5%AD%97%E4%BD%93%E5%B4%A9%E6%BA%83%E4%BF%AE%E5%A4%8D/</guid><description>&lt;blockquote&gt;
&lt;p&gt;这就是乱改字体的后果..&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;字体修复，不只是字体修复。&lt;/p&gt;
&lt;h2 id="事由"&gt;事由&lt;/h2&gt;
&lt;p&gt;偶然间看到一篇&lt;a href="http://www.dgtle.com/article-25875-1.html"&gt;替换Win10字体来提升字体观感的文章&lt;/a&gt;，加上一直听说Win10的字体渲染很垃圾，于是就按照文中的步骤，把默认的微软雅黑字体替换成了苹果的苹方字体。&lt;/p&gt;
&lt;p&gt;然而，使用了一段时间后发现，所有的字体似乎都小了一圈，而且在cmd中出现了字体大小错乱的情况。网上找了一圈发现Win10砍掉了调整字体大小的功能，现在只能以整体缩放来调整字体大小。新的字体感觉也没有想象中的那么好。&lt;/p&gt;
&lt;p&gt;于是我把备份的默认字体又恢复了回去，按道理不会出事，然而我的电脑出锅了。一些软件的中文字体成了方框，cmd的字体也变得很奇怪。&lt;/p&gt;
&lt;h2 id="解决方法"&gt;解决方法&lt;/h2&gt;
&lt;p&gt;一番操作之后，发现设置里的新宋体是乱码，感觉可能是字体文件崩了。&lt;/p&gt;
&lt;p&gt;&lt;img src="./1541154864085.png" alt="1541154864085"&gt;&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;simsunb.ttf&lt;/code&gt;这个文件我分明备份过。。&lt;/p&gt;
&lt;p&gt;没办法，继续面向Google解决问题，这时候找到了一个&lt;a href="https://answers.microsoft.com/zh-hans/windows/forum/windows_10-ime/%E5%9C%A8windows/d575f11c-1f2e-454c-9fcd-432809f7fd76"&gt;微软社区页面&lt;/a&gt;，里面给出了三条命令：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;DISM.exe /Online /Cleanup-image /Scanhealth
DISM.exe /Online /Cleanup-image /Restorehealth
sfc /scannow
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据&lt;a href="https://support.microsoft.com/zh-cn/help/947821/fix-windows-update-errors-by-using-the-dism-or-system-update-readiness"&gt;微软官方支持页面&lt;/a&gt;的描述，这三个命令是检查系统文件的完整性并自动通过 Windows 更新来修复。&lt;/p&gt;
&lt;p&gt;用管理员身份打开cmd，依次执行完重启，一切都恢复了原状。&lt;/p&gt;
&lt;h2 id="后记"&gt;后记&lt;/h2&gt;
&lt;p&gt;看了一些&lt;a href="https://www.zhihu.com/question/274344133"&gt;知乎回答&lt;/a&gt;，感觉Win10的字体也并没有那么糟糕。事实上我一直以来用着默认的字体也没有感到不舒服。&lt;del&gt;可能是我眼瞎吧。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;另外，上述的三个命令理论上能解决Windows的许多问题，碰到问题可以尝试。&lt;/p&gt;
&lt;h4 id="2019213-更新"&gt;2019/2/13 更新&lt;/h4&gt;
&lt;p&gt;目前家里入了 4K 显示器，200% 缩放，观感上没有任何问题。&lt;/p&gt;</description></item><item><title>我为什么选择了独立博客</title><link>https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 13 Oct 2018 20:13:11 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E4%BA%86%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</guid><description>&lt;p&gt;这是一个独立博客式微的时代。&lt;/p&gt;
&lt;p&gt;独立博客没有博客平台的推荐导流系统，相比之下观之者寥寥。&lt;/p&gt;
&lt;p&gt;那我为什么还是选择了独立博客呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自由，不会受外部因素的影响，可以随意添加自己想要的功能。&lt;/li&gt;
&lt;li&gt;方便，一行命令就能更新博客。&lt;/li&gt;
&lt;li&gt;可控，完全受自己管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这纷纭复杂的互联网中，拥有自己的一方小天地，似乎也是极好的。&lt;/p&gt;</description></item><item><title>Hexo搭建小记</title><link>https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 13 Oct 2018 20:10:18 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/hexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</guid><description>&lt;blockquote&gt;
&lt;p&gt;身为一个懒人，又不会写网页，也只能用用博客生成器了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="为什么选择hexo"&gt;为什么选择Hexo&lt;/h2&gt;
&lt;p&gt;其实也没啥特别的理由。一开始想把博客搭在自己的服务器上，然而感觉维护太麻烦了，正好觉得Github Pages很不错，就决定用了。Github Pages只支持静态页面，WordPress之类的就不能用了，于是&lt;del&gt;随手找了几个静态博客生成器，&lt;/del&gt; 随手一查就找到了Hexo。&lt;/p&gt;
&lt;h2 id="hexo搭建过程"&gt;Hexo搭建过程&lt;/h2&gt;
&lt;p&gt;Hexo的官方文档有中文，这点很赞。虽然官方文档讲的不是很清楚..然而搭建还是比较简单的，加上Google了几篇教程，很快就把Hexo搭起来了。&lt;/p&gt;
&lt;p&gt;身为一个博客生成器，当然不能让我们接触到代码了。所以Hexo的基本配置均在&lt;code&gt;_config.yml&lt;/code&gt;这个配置文件中。配置采用YAML语法，看看官方文档也就差不多了解了。基本上无需过多配置就搭建完成了。&lt;/p&gt;
&lt;h2 id="hexo主题"&gt;Hexo主题&lt;/h2&gt;
&lt;p&gt;Hexo有许多主题，个人采用了官方推荐的 &lt;a href="https://github.com/iissnan/hexo-theme-next"&gt;NexT.Pisces&lt;/a&gt;主题，整体风格还是比较简洁的（然而用这个主题的实在是太多了&amp;hellip;随便一个Hexo博客就是Next主题）。&lt;/p&gt;
&lt;p&gt;同时主题内已集成了许多第三方服务，如Google Analysis、DISQUS等，只要改改配置文件就能配置完成，还是相当简单的。&lt;/p&gt;
&lt;h2 id="hexo图片插入指引"&gt;Hexo图片插入指引&lt;/h2&gt;
&lt;p&gt;直接用Markdown语法引用图片会导致图片在首页无法显示，官网给出了一个解决方案，就是利用内置的插件，形式如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{% asset_path slug %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然而这个方法会破环原生Markdown语法，对编辑者的预览等造成不便。&lt;/p&gt;
&lt;p&gt;很奇怪官方为什么要采用这种方法。&lt;/p&gt;
&lt;p&gt;更好的解决方案是安装&lt;a href="https://github.com/CodeFalling/hexo-asset-image"&gt;&lt;strong&gt;hexo-asset-image&lt;/strong&gt;&lt;/a&gt;这个插件。进入博客目录，使用如下命令安装插件：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm install https://github.com/CodeFalling/hexo-asset-image --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装完成后，即可使用原生Markdown语法插入图片。&lt;/p&gt;
&lt;h2 id="to-do"&gt;To Do&lt;/h2&gt;
&lt;h5 id="已实现功能"&gt;已实现功能&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;评论，采用DISQUS&lt;/li&gt;
&lt;li&gt;数据统计，采用Google Analytics&lt;/li&gt;
&lt;li&gt;图片显示在首页&lt;/li&gt;
&lt;li&gt;搜索引擎收录，Google Search Console&lt;/li&gt;
&lt;li&gt;首页文章不显示全部&lt;/li&gt;
&lt;li&gt;git配置，&lt;code&gt;hexo g -d&lt;/code&gt;一条命令部署&lt;/li&gt;
&lt;li&gt;&lt;a href="use-ci-auto-deploy-blog.md"&gt;使用Travis CI自动生成及部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="待实现功能"&gt;待实现功能&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;更多的自定义操作&lt;/li&gt;
&lt;li&gt;文章访问量统计&lt;/li&gt;
&lt;li&gt;在自己的服务器也部署博客，然后用 CI 实现自动部署&lt;/li&gt;
&lt;li&gt;使用 CDN 加速 Github Pages 的访问&lt;/li&gt;
&lt;li&gt;评论点击加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="参考文章"&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"&gt;hexo中完美插入本地图片&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gaodaxiu0406.github.io/2017/08/21/%E4%B8%BAHEXO%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%AF%8F%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E6%B5%8F%E8%A7%88%E9%87%8F%E7%BB%9F%E8%AE%A1/"&gt;为HEXO博客中每篇文章的浏览量统计&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hexo.io/zh-cn/docs/"&gt;Hexo官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://theme-next.iissnan.com/"&gt;NexT使用文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://moweide.com/2017/08/27/hexo_next_started/"&gt;theme-next!Hexo网站的一次华丽升级&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Hello,World!</title><link>https://blog.coherence.codes/posts/2020_and_before/hello-world-0/</link><pubDate>Mon, 24 Sep 2018 11:28:47 +0000</pubDate><guid>https://blog.coherence.codes/posts/2020_and_before/hello-world-0/</guid><description>&lt;h3 id="helloworld"&gt;Hello,World!&lt;/h3&gt;
&lt;p&gt;&lt;img src="./hello.jpeg" alt="Hello,World"&gt;&lt;/p&gt;</description></item></channel></rss>